{'html': b'(*******************************************************************'
         b'****\n\n                    Mathematica-Compatible Notebook\n\nThis '
         b'notebook can be used on any computer system with Mathematica 4.0'
         b',\nMathReader 4.0, or any compatible application. The data for th'
         b'e notebook \nstarts with the line containing stars above.\n\nTo get'
         b' the notebook into a Mathematica-compatible application, do one '
         b'of \nthe following:\n\n* Save the data starting with the line of st'
         b'ars above into a file\n  with a name ending in .nb, then open the'
         b' file inside the application;\n\n* Copy the data starting with the'
         b' line of stars above to the\n  clipboard, then use the Paste menu'
         b' command inside the application.\n\nData for notebooks contains on'
         b'ly printable 7-bit ASCII and can be\nsent directly in email or th'
         b'rough ftp in text mode.  Newlines can be\nCR, LF or CRLF (Unix, M'
         b'acintosh or MS-DOS style).\n\nNOTE: If you modify the data for thi'
         b's notebook not in a Mathematica-\ncompatible application, you mus'
         b't delete the line below containing the \nword CacheID, otherwise '
         b'Mathematica-compatible applications may try to \nuse invalid cach'
         b'e data.\n\nFor more information on notebooks and Mathematica-compa'
         b'tible \napplications, contact Wolfram Research:\n  web: http://www'
         b'.wolfram.com\n  email: info@wolfram.com\n  phone: +1-217-398-0700 '
         b'(U.S.)\n\nNotebook reader applications are available free of charg'
         b'e from \nWolfram Research.\n**************************************'
         b'*********************************)\n\n(*CacheID: 232*)\n\n\n(*Not'
         b'ebookFileLineBreakTest\nNotebookFileLineBreakTest*)\n(*NotebookOpt'
         b'ionsPosition[     20233,        436]*)\n(*NotebookOutlinePosition'
         b'[     21410,        473]*)\n(*  CellTagsIndexPosition[     21366,'
         b'        469]*)\n(*WindowFrame->Normal*)\n\n\n\nNotebook[{\nCell["\\'
         b'<\\\nReadImage/: ReadImage[filename_, n_] := \n   ReadList[filename'
         b', Table[Number, {n}]]\nDispIt/: DispIt[t_] := ListPlot3D[t, Light'
         b'ing -> False, \n    Mesh -> False, AspectRatio -> 3, \n    ViewPoi'
         b'nt -> {0, 0, -1000}, Axes -> False]\nDispIt/: DispIt[t_, a_] := L'
         b'istPlot3D[t, Lighting -> False, \n    Mesh -> False, AspectRatio '
         b'-> a, \n    ViewPoint -> {0, 0, -1000}, Axes -> False]\nEpsOut/: E'
         b'psOut[which_] := Display[\\"!psfix -epsf > out.ps\\", \n    which]\n'
         b'SetOptions[ListPlot, PlotJoined -> True]; \\\n\\>", "Text",\n  Evalu'
         b'atable->True,\n  ImageRegion->{{0, 1}, {0, 1}}],\n\nCell[BoxData[{\n'
         b'    \\( (*\\ synthesise\\ a\\ simple\\ 3  \n        D\\ image\\ '
         b'*) \\[IndentingNewLine]\\(nptsz\\  = \\ \\(nptsy\\  = \\ \\(npts'
         b'x\\  \\\n= \\ 32\\)\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\(i'
         b'ms = \n        Table[Table[\n            Table[0\\ Random[], {nptsx'
         b'}], {nptsy}], {nptsz}];\\)\\), "\\n", \n    \\(\\(zstart = Floor[n'
         b'ptsz\\/4];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(ystart = Floo'
         b'r[nptsy\\/4];\\)\\), "\\n", \n    \\(\\(xstart = Floor[nptsx\\/4'
         b'];\\)\\), "\\n", \n    \\(\\(zw = Floor[nptsz\\/4];\\)\\), "\\[Ind'
         b'entingNewLine]", \n    \\(\\(yw = Floor[nptsy\\/4];\\)\\), "\\n", \n'
         b'    \\(\\(xw = Floor[nptsx\\/4];\\)\\), "\\n", \n    \\(\\(zcen ='
         b' Floor[\\(3\\ nptsz\\)\\/4];\\)\\), "\\[IndentingNewLine]", \n  '
         b'  \\(\\(ycen = Floor[\\(3\\ nptsy\\)\\/4];\\)\\), "\\n", \n    \\(\\'
         b'(xcen = Floor[\\(3\\ nptsx\\)\\/4];\\)\\), "\\n", \n    \\(\\(For['
         b'p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n        For[m = 1, m '
         b'\\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1, \n        '
         b'    n \\[LessEqual] \n              nptsx, \\(n++\\), \\(ims\\[Lef'
         b'tDoubleBracket]m, n, \n                  p\\[RightDoubleBracket] +'
         b'= \n                If[\\((m - ycen)\\)\\^2 + \\((n - xcen)\\)\\^2 '
         b'+ \\((p - zcen)\\)\\^2 \\\n< 0.8\\ xw\\^2, 200, 0];\\)]]];\\)\\), '
         b'"\\n", \n    \\(\\(For[p = 1, p \\[LessEqual] zw, \\(p++\\), \n     '
         b'   For[m = 1, m \\[LessEqual] yw, \\(m++\\), \n          For[n = 1, '
         b'n \\[LessEqual] xw, \\(n++\\), \n            ims\\[LeftDoubleBrac'
         b'ket]ystart + m, xstart + n, \n                zstart + p\\[RightDo'
         b'ubleBracket] += 100]]];\\)\\)}], "Input",\n  ImageRegion->{{0, 1}, '
         b'{0, 1}}],\n\nCell[BoxData[\n    \\(\\(\\( (*\\ \n      function\\'
         b' to\\ plot\\ a\\ 3  \n        D\\ image\\ within\\ range\\ *) \\)'
         b'\\(\\[IndentingNewLine]\\)\\(dispim[\n        dim_]\\  := \\[Indent'
         b'ingNewLine]Module[{max\\  = \\ \\(-10^\\((6)\\)\\), \n          min'
         b'\\ \\  = \\ \\(-max\\), nz\\  = \\ Length[dim], p, \n          ddim '
         b'= dim}, \\[IndentingNewLine]Print["\\<no slices : \\>", \n          '
         b'nz]; \\[IndentingNewLine]\\(\\((max\\  = If[# > \\ max, #, max])\\'
         b') &\\) /@ \n          Flatten[ddim]; \\[IndentingNewLine]\\(\\((m'
         b'in\\  = \n                If[# < \\ min, #, min])\\) &\\) /@ \n   '
         b'       Flatten[ddim]; \\[IndentingNewLine]Print["\\<min : \\>", \n  '
         b'        min, "\\< max : \\>" max]; \\[IndentingNewLine]For[p = 1, \n'
         b'          p \\[LessEqual] \n            nz, \\(p++\\), \\n\\(ListD'
         b'ensityPlot[ddim[\\([p]\\)], \n              Mesh \\[Rule] False,'
         b' \n              PlotRange \\[Rule] {min, \n                  max}]'
         b';\\)\\[IndentingNewLine]]\\[IndentingNewLine]]\\)\\)\\)], \\\n"Input'
         b'"],\n\nCell[BoxData[{\n    \\( (*\\ Use\\ synthetic\\ image\\ *)'
         b' \\[IndentingNewLine]\\(im\\  = \\ \n        ims;\\)\\), "\\[Indenti'
         b'ngNewLine]", \n    \\(im[\\([1, 1, 1]\\)]\\)}], "Input"],\n\nCell[B'
         b'oxData[\n    \\(\\(?dispim\\)\\)], "Input"],\n\nCell[BoxData[{\n    '
         b'\\({nptsx, nptsy, nptsz}\\), "\\[IndentingNewLine]", \n    \\(For'
         b'[p = 1, \n      p \\[LessEqual] \n        nptsz, \\(p++\\), \\n\\(L'
         b'istDensityPlot[im[\\([p]\\)], Mesh \\[Rule] False, \n          PlotR'
         b'ange \\[Rule] {0, 350}];\\)\\[IndentingNewLine]]\\)}], "Input",\n'
         b'  ImageRegion->{{0, 1}, {0, 1}}],\n\nCell[BoxData[{\n    \\( (*\\'
         b'(\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\'
         b')\\(**\\)\\(**\\)\\(**\\)\\\n\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(*'
         b'*\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(*'
         b'*\\)\\\n\\(**\\)\\(**\\)\\)*\\[IndentingNewLine]Now\\ the\\ Fourier'
         b'\\ Versions\\ \\\n\\[IndentingNewLine]***************************'
         b'****************************)  \\\n(*\\ this\\ function\\ rotates'
         b'\\ quadrants\\ of\\ a\\ 2  \n        D\\ image\\ *) \\[IndentingNewL'
         b'ine]\\(\\(RotImage2D[im_] := \n      Module[{nptsx, nptsy}, nptsy ='
         b' Length[im]; \n        nptsx = Length[im\\[LeftDoubleBracket]1\\[Ri'
         b'ghtDoubleBracket]]; \n        RotateLeft[Transpose[RotateLeft[Tra'
         b'nspose[im], Floor[nptsx\\/2 + 1]]], \n          Floor[nptsy\\/2 + 1'
         b']]]\\)\\(\\[IndentingNewLine]\\)\\( (*\\ \n      inverse\\ of\\ t'
         b'he\\ above\\ *) \\)\\)\\), "\\[IndentingNewLine]", \n    \\(IRotImag'
         b'e2D[im_] := \n      Module[{nptsx, nptsy}, nptsy = Length[im]; \n '
         b'       nptsx = Length[im\\[LeftDoubleBracket]1\\[RightDoubleBracke'
         b't]]; \n        RotateRight[\n          Transpose[RotateRight[Trans'
         b'pose[im], Floor[nptsx\\/2 + 1]]], \n          Floor[nptsy\\/2 + 1]]'
         b']\\)}], "Input",\n  ImageRegion->{{0, 1}, {0, 1}}],\n\nCell[BoxData['
         b'\n    \\(Table[Mod[j + Floor[nptsz/2\\ ], nptsz] + 1, {j, nptsz}]\\)'
         b'], "Input"],\n\nCell[BoxData[\n    \\(\\(\\(\\[IndentingNewLine'
         b']\\)\\(RotImage3D[im_]\\  := \\ \n      Table[RotImage2D[im[\\([Mo'
         b'd[j + Floor[nptsz/2\\ ], nptsz] + 1]\\)]], {j, \n          nptsz}]\\'
         b')\\)\\)], "Input"],\n\nCell[BoxData[\n    \\(\\(\\(fim = \n      '
         b'  Fourier[im];\\)\\(\\[IndentingNewLine]\\)\\( (*\\[IndentingNewLi'
         b'ne]fim2 = \n        RotImage[fim]; \\n\n      ListDensityPlot[Re[Lo'
         b'g[fim2]], Mesh \\[Rule] False]; \\n\n      ListDensityPlot[Im[Log[f'
         b'im2]], \n        Mesh \\[Rule] False];\\[IndentingNewLine]*) \\)'
         b'\\)\\)], "Input",\n  ImageRegion->{{0, 1}, {0, 1}}],\n\nCell[BoxD'
         b'ata[\n    \\(\\(\\(\\[IndentingNewLine]\\)\\( (*\\ \n      now\\ f'
         b'orm\\ derivative\\ of\\ Gaussian\\ edge\\ filters\\ *) \\)\\)\\)]'
         b', "Input"],\n\nCell[BoxData[{\n    \\(G[x_, \n        s_] := \\[Ex'
         b'ponentialE]\\^\\(-\\(x\\^2\\/\\(2\\ s\\^2\\)\\)\\)\\/\\@\\(2\\ \\[Pi'
         b']\\)\\), \\\n"\\n", \n    \\(Gx[x_, \n        s_] := \\[PartialD]'
         b'\\_xx G[xx, s] /. \\[InvisibleSpace]xx \\[Rule] \n          x\\),'
         b' "\\n", \n    \\(Gxx[x_, \n        s_] := \\[PartialD]\\_{xx, 2}G['
         b'xx, s] /. \\[InvisibleSpace]xx \\[Rule] \n          x\\)}], "Input",'
         b'\n  ImageRegion->{{0, 1}, {0, 1}}],\n\nCell[BoxData[{\n    \\(\\(x'
         b'maskim = \n        Table[Table[\n            Table[0, {nptsx}], {n'
         b'ptsy}, {nptsz}]];\\)\\), \\\n"\\[IndentingNewLine]", \n    \\(\\(zma'
         b'skim\\  = \\ \\(ymaskim\\  = \\ xmaskim\\);\\)\\), "\\[IndentingN'
         b'ewLine]", \n    \\(\\(zzmaskim\\  = \\ \\(yymaskim\\  = \\(xxmas'
         b'kim\\  = \\ \n            xmaskim\\)\\);\\)\\), "\\[IndentingNewLine'
         b']", \n    \\(\\(zxmaskim\\  = \\ \\(zymaskim\\  = \\ \\(xymaskim\\'
         b'  = \\ \n            xmaskim\\)\\);\\)\\), "\\n", \n    \\(\\(ycen'
         b' = nptsy\\/2;\\)\\), "\\n", \n    \\(\\(xcen = nptsx\\/2;\\)\\), "'
         b'\\[IndentingNewLine]", \n    \\(\\(zcen = nptsz\\/2;\\)\\), "\\n'
         b'", \n    \\(\\(sx = 1.0;\\)\\), "\\n", \n    \\(\\(sy = 1.0;\\)\\),'
         b' "\\[IndentingNewLine]", \n    \\(\\(sz\\  = 1.0;\\)\\), "\\n", '
         b'\n    \\(\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n        '
         b'For[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1, '
         b'n \\[LessEqual] nptsx, \\(n++\\), \n            xmaskim\\[LeftDou'
         b'bleBracket]p, m, n\\[RightDoubleBracket] = \n              G[p - z'
         b'cen, sz]\\ G[m - ycen, sy]\\ Gx[n - xcen, \n                  sx]]]'
         b'];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[xmaskim[\\([xcen // Fl'
         b'oor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] \n   '
         b'       All];\\)\\[IndentingNewLine]\\), "\\[IndentingNewLine]", '
         b'\n    \\(\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n        '
         b'For[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1, '
         b'n \\[LessEqual] nptsx, \\(n++\\), \n            ymaskim\\[LeftDou'
         b'bleBracket]p, m, n\\[RightDoubleBracket] = \n              G[p - z'
         b'cen, sz]\\ Gx[m - ycen, sy]\\ G[n - xcen, \n                  sx]]]'
         b'];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[ymaskim[\\([ycen // Fl'
         b'oor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] \n   '
         b'       All];\\)\\[IndentingNewLine]\\), "\\[IndentingNewLine]", '
         b'\n    \\(\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n        '
         b'For[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1, '
         b'n \\[LessEqual] nptsx, \\(n++\\), \n            zmaskim\\[LeftDou'
         b'bleBracket]p, m, n\\[RightDoubleBracket] = \n              Gx[p - '
         b'zcen, sz]\\ G[m - ycen, sy]\\ G[n - xcen, \n                  sx]]]'
         b'];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[zmaskim[\\([zcen // Fl'
         b'oor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] All]'
         b';\\)\\n\\[IndentingNewLine]\\[IndentingNewLine] (*\\ \n      2  nd'
         b'\\ derivative\\ images\\ *) \\), "\\[IndentingNewLine]", \n    \\(\\'
         b'(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n        For[m = 1, m'
         b' \\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1, n \\[Less'
         b'Equal] nptsx, \\(n++\\), \n            xxmaskim\\[LeftDoubleBracket]'
         b'p, m, n\\[RightDoubleBracket] = \n              G[p - zcen, sz]\\ G'
         b'[m - ycen, sy]\\ Gxx[n - xcen, \n                  sx]]]];\\)\\)'
         b', "\\n", \n    \\(\\(ListDensityPlot[xxmaskim[\\([xcen // Floor]\\'
         b')], Mesh \\[Rule] False, \n        PlotRange \\[Rule] \n          Al'
         b'l];\\)\\[IndentingNewLine]\\), "\\[IndentingNewLine]", \n    \\(\\('
         b'For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n        For[m = 1, m '
         b'\\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1, n \\[LessE'
         b'qual] nptsx, \\(n++\\), \n            yymaskim\\[LeftDoubleBracket]p'
         b', m, n\\[RightDoubleBracket] = \n              G[p - zcen, sz]\\ Gx'
         b'x[m - ycen, sy]\\ G[n - xcen, \n                  sx]]]];\\)\\),'
         b' "\\n", \n    \\(\\(ListDensityPlot[yymaskim[\\([ycen // Floor]\\)'
         b'], Mesh \\[Rule] False, \n        PlotRange \\[Rule] \n          All'
         b'];\\)\\[IndentingNewLine]\\), "\\[IndentingNewLine]", \n    \\(\\(F'
         b'or[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n        For[m = 1,'
         b' m \\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1, n \\[Le'
         b'ssEqual] nptsx, \\(n++\\), \n            zzmaskim\\[LeftDoubleBracke'
         b't]p, m, n\\[RightDoubleBracket] = \n              Gxx[p - zcen, sz'
         b']\\ G[m - ycen, sy]\\ G[n - xcen, \n                  sx]]]];\\)'
         b'\\), "\\n", \n    \\(\\(ListDensityPlot[zzmaskim[\\([zcen // Floor'
         b']\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] \n      '
         b'    All];\\)\\[IndentingNewLine]\\), "\\[IndentingNewLine]", \n  '
         b'  \\(\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n        For'
         b'[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1,'
         b' n \\[LessEqual] nptsx, \\(n++\\), \n            xymaskim\\[LeftD'
         b'oubleBracket]p, m, n\\[RightDoubleBracket] = \n              G[p -'
         b' zcen, sz]\\ Gx[m - ycen, sy]\\ Gx[n - xcen, \n                  sx'
         b']]]];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[xymaskim[\\([zcen /'
         b'/ Floor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] All]'
         b';\\)\\n\\), "\\[IndentingNewLine]", \n    \\(\\(For[p = 1, p \\[Less'
         b'Equal] nptsz, \\(p++\\), \n        For[m = 1, m \\[LessEqual] nptsy,'
         b' \\(m++\\), \n          For[n = 1, n \\[LessEqual] nptsx, \\(n++\\'
         b'), \n            zxmaskim\\[LeftDoubleBracket]p, m, n\\[RightDouble'
         b'Bracket] = \n              Gx[p - zcen, sz]\\ G[m - ycen, sy]\\ Gx['
         b'n - xcen, \n                  sx]]]];\\)\\), "\\n", \n    \\(\\(Lis'
         b'tDensityPlot[zxmaskim[\\([zcen // Floor]\\)], Mesh \\[Rule] False, '
         b'\n        PlotRange \\[Rule] All];\\)\\n\\), "\\[IndentingNewLine]'
         b'", \n    \\(\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n     '
         b'   For[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For[n = '
         b'1, n \\[LessEqual] nptsx, \\(n++\\), \n            zymaskim\\[Lef'
         b'tDoubleBracket]p, m, n\\[RightDoubleBracket] = \n              Gx['
         b'p - zcen, sz]\\ Gx[m - ycen, sy]\\ G[n - xcen, \n                  '
         b'sx]]]];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[zymaskim[\\([zcen'
         b' // Floor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] Al'
         b'l];\\)\\[IndentingNewLine]\\)}], "Input",\n  ImageRegion->{{0, 1}, {'
         b'0, 1}}],\n\nCell[BoxData[\n    \\(xmaskim[\\([1, 1, 1]\\)] // N\\)]'
         b', "Input"],\n\nCell[BoxData[{\n    \\(\\(dim\\  = \\ zymaskim;\\'
         b')\\), "\\[IndentingNewLine]", \n    \\(\\(max\\  = \\ \\(-10^\\(('
         b'6)\\)\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\(min\\ \\  = \\'
         b' \\(-max\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\(\\(\\((max'
         b'\\  = If[# > \\ max, #, max])\\) &\\) /@ \n        Flatten[dim];\\'
         b')\\), "\\[IndentingNewLine]", \n    \\(\\(\\(\\((min\\  = If[# <'
         b' \\ min, #, min])\\) &\\) /@ \n        Flatten[dim];\\)\\), "\\[Ind'
         b'entingNewLine]", \n    \\({min, max}\\), "\\[IndentingNewLine]",'
         b' \n    \\(For[p = 1, \n      p \\[LessEqual] \n        nptsz, \\(p'
         b'++\\), \\n\\(ListDensityPlot[dim[\\([p]\\)], Mesh \\[Rule] False, '
         b'\n          PlotRange \\[Rule] {min, max}];\\)\\[IndentingNewLin'
         b'e]]\\)}], "Input"],\n\nCell[BoxData[{\n    \\( (*\\ 1  st\\ derivat'
         b'ives\\ *) \\[IndentingNewLine]\\(fxmaskim = \n        Fourier[N[xmas'
         b'kim]];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(fymaskim = Fouri'
         b'er[N[ymaskim]];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(fzmaski'
         b'm = Fourier[N[zmaskim]];\\)\\[IndentingNewLine] (*\\ \n      2  '
         b'nd\\ derivatives\\ *) \\), "\\[IndentingNewLine]", \n    \\(\\(fxxm'
         b'askim = Fourier[N[xxmaskim]];\\)\\), "\\n", \n    \\(\\(fyymaskim '
         b'= Fourier[N[yymaskim]];\\)\\), "\\n", \n    \\(\\(fzzmaskim = Four'
         b'ier[N[zzmaskim]];\\)\\), "\\n", \n    \\(\\(fxymaskim = Fourier[N['
         b'xymaskim]];\\)\\), "\\n", \n    \\(\\(fzxmaskim = Fourier[N[zxmask'
         b'im]];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(fzymaskim = Fouri'
         b'er[N[zymaskim]];\\)\\[IndentingNewLine]\\)}], "Input",\n  ImageRegio'
         b'n->{{0, 1}, {0, 1}}],\n\nCell[BoxData[{\n    \\(\\(xfiltimf = \n  '
         b'      Chop[InverseFourier[N[fim\\ fxmaskim]]] // RotImage3D;\\)\\),'
         b' "\\n", \n    \\(\\(ListDensityPlot[xfiltimf[\\([xcen]\\)], Mesh \\'
         b'[Rule] False, \n        PlotRange \\[Rule] All];\\)\\), "\\[Inden'
         b'tingNewLine]", \n    \\(\\(yfiltimf = \n        Chop[InverseFourier['
         b'N[fim\\ fymaskim]]] // RotImage3D;\\)\\), "\\n", \n    \\(\\(ListDe'
         b'nsityPlot[yfiltimf[\\([ycen]\\)], Mesh \\[Rule] False, \n        Plo'
         b'tRange \\[Rule] All];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(zf'
         b'iltimf = \n        Chop[InverseFourier[N[fim\\ fzmaskim]]] // RotI'
         b'mage3D;\\)\\), "\\n", \n    \\(\\(ListDensityPlot[zfiltimf[\\([zcen'
         b']\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] All];\\)'
         b'\\[IndentingNewLine] (*\\ \n      2  nd\\ derivatives\\ *) \\), "\\'
         b'[IndentingNewLine]", \n    \\(\\(xxfiltimf = \n        Chop[InverseF'
         b'ourier[N[fim\\ fxxmaskim]]] // RotImage3D;\\)\\), "\\n", \n    \\('
         b'\\(ListDensityPlot[xxfiltimf[\\([xcen]\\)], Mesh \\[Rule] False,'
         b' \n        PlotRange \\[Rule] All];\\)\\), "\\[IndentingNewLine]"'
         b', \n    \\(\\(yyfiltimf = \n        Chop[InverseFourier[N[fim\\ f'
         b'yymaskim]]] // RotImage3D;\\)\\), "\\n", \n    \\(\\(ListDensityPl'
         b'ot[yyfiltimf[\\([ycen]\\)], Mesh \\[Rule] False, \n        PlotRange'
         b' \\[Rule] All];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(zzfiltim'
         b'f = \n        Chop[InverseFourier[N[fim\\ fzzmaskim]]] // RotImage'
         b'3D;\\)\\), "\\n", \n    \\(\\(ListDensityPlot[zzfiltimf[\\([zcen]\\)'
         b'], Mesh \\[Rule] False, \n        PlotRange \\[Rule] \n          All'
         b'];\\)\\[IndentingNewLine]\\), "\\[IndentingNewLine]", \n    \\(\\(x'
         b'yfiltimf = \n        Chop[InverseFourier[N[fim\\ fxymaskim]]] // R'
         b'otImage3D;\\)\\), "\\n", \n    \\(\\(ListDensityPlot[xyfiltimf[\\(['
         b'xcen]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] All'
         b'];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(zyfiltimf = \n       '
         b' Chop[InverseFourier[N[fim\\ fzymaskim]]] // RotImage3D;\\)\\), "\\n'
         b'", \n    \\(\\(ListDensityPlot[zyfiltimf[\\([ycen]\\)], Mesh \\[Ru'
         b'le] False, \n        PlotRange \\[Rule] All];\\)\\), "\\[Indentin'
         b'gNewLine]", \n    \\(\\(zxfiltimf = \n        Chop[InverseFourier[N['
         b'fim\\ fzxmaskim]]] // RotImage3D;\\)\\), "\\n", \n    \\(\\(ListDen'
         b'sityPlot[zxfiltimf[\\([zcen]\\)], Mesh \\[Rule] False, \n        Plo'
         b'tRange \\[Rule] \n          All];\\)\\[IndentingNewLine]\\[Indent'
         b'ingNewLine]\\)}], "Input",\n  ImageRegion->{{0, 1}, {0, 1}}],\n\nCel'
         b'l[BoxData[{\n    \\(\\(dim\\  = \\ zzfiltimf;\\)\\), "\\[IndentingNe'
         b'wLine]", \n    \\(\\(max\\  = \\ \\(-10^\\((6)\\)\\);\\)\\), "\\[Ind'
         b'entingNewLine]", \n    \\(\\(min\\ \\  = \\ \\(-max\\);\\)\\), "\\['
         b'IndentingNewLine]", \n    \\(\\(\\(\\((max\\  = If[# > \\ max, #, m'
         b'ax])\\) &\\) /@ \n        Flatten[dim];\\)\\), "\\[IndentingNewLin'
         b'e]", \n    \\(\\(\\(\\((min\\  = If[# < \\ min, #, min])\\) &\\) '
         b'/@ \n        Flatten[dim];\\)\\), "\\[IndentingNewLine]", \n    \\'
         b'({min, max}\\), "\\[IndentingNewLine]", \n    \\(For[p = 1, \n   '
         b'   p \\[LessEqual] \n        nptsz, \\(p++\\), \\n\\(ListDensityPl'
         b'ot[dim[\\([p]\\)], Mesh \\[Rule] False, \n          PlotRange \\['
         b'Rule] {min, max}];\\)\\[IndentingNewLine]]\\)}], "Input"],\n\nCel'
         b'l[BoxData[\n    \\(\\(\\(\\[IndentingNewLine]\\)\\( (*\\ \n      '
         b'Form\\ Gradient\\ image\\ *) \\)\\(\\[IndentingNewLine]\\)\\(gra'
         b'dim\\  = \\ \n        Sqrt[xfiltimf^2\\  + \\ yfiltimf^2\\  + \\ \n '
         b'           zfiltimf^2];\\)\\(\\[IndentingNewLine]\\)\\)\\)], "Inpu'
         b't"],\n\nCell[BoxData[{\n    \\(\\(max\\  = \\ \\(-10^\\((6)\\)\\);\\'
         b')\\), "\\[IndentingNewLine]", \n    \\(\\(min\\ \\  = \\ \\(-max\\'
         b');\\)\\), "\\[IndentingNewLine]", \n    \\(\\(\\(\\((max\\  = If['
         b'# > \\ max, #, max])\\) &\\) /@ \n        Flatten[gradim];\\)\\), '
         b'"\\[IndentingNewLine]", \n    \\(\\(\\(\\((min\\  = If[# < \\ min, #'
         b', min])\\) &\\) /@ \n        Flatten[gradim];\\)\\), "\\[Indenting'
         b'NewLine]", \n    \\({min, max}\\), "\\[IndentingNewLine]", \n    '
         b'\\(For[p = 1, \n      p \\[LessEqual] \n        nptsz, \\(p++\\), '
         b'\\n\\(ListDensityPlot[gradim[\\([p]\\)], \n          Mesh \\[Rule]'
         b' False, \n          PlotRange \\[Rule] {0, \n              max}];\\)'
         b'\\[IndentingNewLine]]\\), "\\[IndentingNewLine]", \n    \\(\\(gmin'
         b'\\  = \\ min;\\)\\), "\\[IndentingNewLine]", \n    \\(\\(gmax\\  '
         b'= \\ max;\\)\\)}], "Input"],\n\nCell[BoxData[{\n    \\( (*\\ \n  '
         b'    form\\ elements\\ of\\ curvature\\ matrix\\ *) \\[IndentingNew'
         b'Line]eps\\  = \\ \n      0.1; \\  (*\\ this\\ is\\ the\\ regularisat'
         b'ion\\ factor\\  - \\ \n        to\\ avoid\\ divide\\ by\\ zero\\ '
         b'*) \\[IndentingNewLine]fppcurveim\\  = \\ \\\n\\((yfiltimf^2\\ xxfi'
         b'ltimf\\  + \\ xfiltimf^2\\ \\ yyfiltimf\\  - \\ \n            2\\ xf'
         b'iltimf\\ yfiltimf\\ xyfiltimf)\\)/\\((\\((gradim\\  + \\ \n         '
         b'       eps\\ gmax)\\)*\\((\\((eps\\ \\ gmax)\\)^2\\  + \\ xfiltim'
         b'f^2\\  + \\ \n                yfiltimf^2)\\))\\);\\), "\\[Indenting'
         b'NewLine]", \n    \\(\\(fqqcurveim\\  = \\ \\((xfiltimf^2\\ zfiltimf'
         b'^2\\ xxfiltimf\\  + \\ \n                yfiltimf^2\\ zfiltimf^2\\'
         b' yyfiltimf\\  + \n                2\\ xfiltimf\\ yfiltimf\\ zfilt'
         b'imf^2\\ xyfiltimf\\ \\\n)\\)/\\((\\((gradim\\  + \\ eps\\ \\ gmax)\\'
         b')^\\((3)\\)*\\((\\((eps\\ gmax)\\)^2 + \\ \n                    xfil'
         b'timf^2\\  + \\ \n                    yfiltimf^2)\\))\\)\\  + \\ \\(('
         b'\\ \\ \\((xfiltimf^2 + \n                      yfiltimf^2)\\) zzf'
         b'iltimf\\  - \n                2\\ xfiltimf\\ \\ zfiltimf\\ zxfilti'
         b'mf\\  - \n                2\\ yfiltimf\\ \\ \\ zfiltimf\\ zyfiltimf'
         b')\\)/\\((\\((gradim\\  + \\ \n                    eps\\ gmax)\\)'
         b'^\\((3)\\))\\)\\ ;\\)\\), "\\[IndentingNewLine]", \n    \\(\\(fpqc'
         b'urveim\\  = \\ \\((xfiltimf\\ yfiltimf\\ zfiltimf \\((\\ \n         '
         b'           xxfiltimf\\  - yyfiltimf)\\) + \\ \\((xfiltimf^2\\  - '
         b'\n                      yfiltimf^2\\ )\\)\\ zfiltimf\\ xyfiltimf\\'
         b' )\\)/\\((\\((gradim\\ \\\n + \\ eps\\ gmax)\\)^\\((2)\\)*\\((\\('
         b'(eps\\ gmax)\\)^2 + \\ xfiltimf^2\\  + \\ \n                    yf'
         b'iltimf^2)\\))\\)\\  - \\[IndentingNewLine]\\ \\((\\ \n              '
         b'yfiltimf\\ zxfiltimf\\  + \\ \n                xfiltimf\\ zyfilti'
         b'mf)\\)/\\((\\((gradim\\  + \\ \n                    eps\\ gmax)'
         b'\\)^\\((2)\\))\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\(gaus'
         b'scurveim\\  = \\ \\(-\\((fppcurveim\\ fqqcurveim\\  - \\ \n         '
         b'     fpqcurveim^2)\\)\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\'
         b'(meancurveim\\  = \\ \n        0.5 \\((fppcurveim\\  + \\ fqqcurve'
         b'im)\\);\\)\\)}], "Input"],\n\nCell[BoxData[{\n    \\(\\(dim\\  = '
         b'\\ gausscurveim;\\)\\), "\\[IndentingNewLine]", \n    \\(\\(max\\  ='
         b' \\ \\(-10^\\((6)\\)\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\'
         b'(min\\ \\  = \\ \\(-max\\);\\)\\), "\\[IndentingNewLine]", \n    '
         b'\\(\\(\\(\\((max\\  = If[# > \\ max, #, max])\\) &\\) /@ \n      '
         b'  Flatten[dim];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(\\(\\((mi'
         b'n\\  = If[# < \\ min, #, min])\\) &\\) /@ \n        Flatten[dim];'
         b'\\)\\), "\\[IndentingNewLine]", \n    \\({min, max}\\), "\\[Indenti'
         b'ngNewLine]", \n    \\(For[p = 1, \n      p \\[LessEqual] \n      '
         b'  nptsz, \\(p++\\), \\n\\(ListDensityPlot[dim[\\([p]\\)], Mesh \\[R'
         b'ule] False, \n          PlotRange \\[Rule] {min, max}];\\)\\[Indenti'
         b'ngNewLine]]\\)}], "Input"]\n},\nFrontEndVersion->"4.0 for X",\nScree'
         b'nRectangle->{{0, 1152}, {0, 900}},\nWindowToolbars->{},\nCellGroup'
         b'ing->Manual,\nWindowSize->{1011, 668},\nWindowMargins->{{0, Automa'
         b'tic}, {Automatic, 0}},\nPrintingPageRange->{Automatic, Automatic}'
         b',\nPrintingOptions->{"PaperSize"->{612, 792},\n"PaperOrientation"-'
         b'>"Portrait",\n"PostScriptOutputFile":>FrontEnd`FileName[{"cs", "r'
         b'esearch", "medim", \\\n"images3", "starship", "ucacarr", "teaching'
         b'", "3c72", "math"}, "edge2.nb.ps", \\\nCharacterEncoding -> "ISO88'
         b'59-1"],\n"Magnification"->1},\nPrivateNotebookOptions->{"ColorPale'
         b'tte"->{RGBColor, -1}},\nShowCellLabel->True,\nShowCellTags->False,'
         b'\nRenderingOptions->{"ObjectDithering"->True,\n"RasterDithering"->'
         b'False}\n]\n\n\n(****************************************************'
         b'*******************\nCached data follows.  If you edit this Noteb'
         b'ook file directly, not using\nMathematica, you must remove the li'
         b'ne containing CacheID at the top of \nthe file.  The cache data w'
         b'ill then be recreated when you save this file \nfrom within Mathe'
         b'matica.\n********************************************************'
         b'***************)\n\n(*CellTagsOutline\nCellTagsIndex->{}\n*)\n\n(*'
         b'CellTagsIndex\nCellTagsIndex->{}\n*)\n\n(*NotebookFileOutline\nNo'
         b'tebook[{\nCell[1717, 49, 565, 14, 212, "Text",\n  Evaluatable->Tru'
         b'e],\nCell[2285, 65, 1443, 29, 433, "Input"],\nCell[3731, 96, 899, '
         b'17, 187, "Input"],\nCell[4633, 115, 162, 3, 59, "Input"],\nCell[47'
         b'98, 120, 44, 1, 27, "Input"],\nCell[4845, 123, 295, 6, 75, "Input'
         b'"],\nCell[5143, 131, 1081, 18, 183, "Input"],\nCell[6227, 151, 88,'
         b' 1, 27, "Input"],\nCell[6318, 154, 182, 3, 43, "Input"],\nCell[650'
         b'3, 159, 333, 7, 107, "Input"],\nCell[6839, 168, 131, 2, 43, "Inpu'
         b't"],\nCell[6973, 172, 372, 10, 101, "Input"],\nCell[7348, 184, 510'
         b'7, 94, 837, "Input"],\nCell[12458, 280, 60, 1, 27, "Input"],\nCell'
         b'[12521, 283, 644, 12, 155, "Input"],\nCell[13168, 297, 728, 12, 2'
         b'03, "Input"],\nCell[13899, 311, 2183, 40, 363, "Input"],\nCell[160'
         b'85, 353, 645, 12, 155, "Input"],\nCell[16733, 367, 238, 4, 75, "I'
         b'nput"],\nCell[16974, 373, 726, 15, 171, "Input"],\nCell[17703, 390'
         b', 1875, 30, 203, "Input"],\nCell[19581, 422, 648, 12, 155, "Input'
         b'"]\n}\n]\n*)\n\n\n\n\n(*********************************************'
         b'**************************\nEnd of Mathematica Notebook file.\n***'
         b'********************************************************************'
         b')\n\n',
 'links': [],
 'pid': 3726,
 'url': 'http://www0.cs.ucl.ac.uk/staff/S.Arridge/teaching/ndsp/voxcurvature.nb'}
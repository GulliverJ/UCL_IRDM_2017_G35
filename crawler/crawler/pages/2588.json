{'html': b'<!-- -*-html-*- -->\n<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01'
         b' Transitional//EN">\n<html>\n <!-- -*-html-*- -->\n<head>\n  <META h'
         b'ttp-equiv="content-type" content="text/html; charset=ISO-8859-1"'
         b'>\n  <title>Student Projects</title>  <style type="text/css">\n   '
         b' <!--\n\tbody { \n\tbackground-color:#FFFFFF; \n\tfont-family: Ari'
         b'al, Helvetica, sans-serif; \n\t}\n\th1 { color:#074d88; }\n\th2 { '
         b'color:#074d88; }\n\th3 { color:#074d88; }\n\ttd { border: 0px; margi'
         b'n: 0px; }\n\ta:link { color:#0000CC; text-decoration:none }\n\ta:vis'
         b'ited { color:#0000CC; text-decoration:none }\n\ta:hover { color:#0'
         b'000FF; text-decoration:underline }\n\ta:active { color:#FFFFFF; te'
         b'xt-decoration:underline }\n\ta:focus { color:#0000FF; text-decorat'
         b'ion:underline }\n      -->\n  </style>\n  <script type="text/javasc'
         b'ript">\n    \n    var _gaq = _gaq || [];\n    _gaq.push([\'_setAccou'
         b"nt', 'UA-18142776-1']);\n    _gaq.push(['_trackPageview']);\n    \n"
         b"    (function() {\n    var ga = document.createElement('script');"
         b" ga.type = 'text/javascript'; ga.async = true;\n    ga.src = ('ht"
         b"tps:' == document.location.protocol ? 'https://ssl' : 'http://www') "
         b"+ '.google-analytics.com/ga.js';\n    var s = document.getElement"
         b"sByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n    }"
         b')();\n    \n  </script>\n</head>\n <body>\n    <!-- -*-html-*- --'
         b'>\n<table style="text-align: left; width: 100%; height: 110px;  m'
         b'argin:\n\t      0px; border: 0px;" cellspacing="0" cellpadding="0"'
         b'>\n  <tr>\n    <td style="background-color: rgb(204, 204, 204);\n\t '
         b'      vertical-align: top;\n\t       font-weight: bold;\n\t       fo'
         b'nt-size: 15px;\n\t       padding: 10px; ">\n      DEPARTMENT OF COM'
         b'PUTER SCIENCE<br>\n      Dr. Jens Krinke\n    </td>\n    <td style='
         b'"background-color: rgb(204, 204, 204); \n\t       height: 110px; w'
         b'idth: 265px;">\n      <a href="http://www.ucl.ac.uk/"><img border'
         b'=0 height=110\n      width=265 src="UCL.gif" alt="UCL"></a>\n    <'
         b'/td>\n  </tr>\n  <tr style="background-color: rgb(153, 153, 153); '
         b'height: 20px;"> \n    <td></td><td></td>\n  </tr>\n</table>\n<table '
         b'style="text-align: left; width: 100%; height: 100%;  margin:\n\t  '
         b'    0px; border: 0px;"\n       cellspacing="0" cellpadding="0">\n '
         b'  <tr>\n      <td\n\tstyle="vertical-align: top; height: 100%; widt'
         b'h: 130px;\n\tborder: 0px; margin: 0px; text-align: left; \n\tpadding'
         b': 10px;\n\tbackground-color: rgb(204, 204, 204);">\n\t<span style="f'
         b'ont-weight: bold;\n\t\t     font-size: 15px;">\n\t  <br><a href="'
         b'index.html">Home</a><br>- <a href="contact.html">Contact</a><br>- <a'
         b' href="index.html">Teaching</a><br>- <a href="index.html">Research</'
         b'a><br>- <a href="publications.html">Publications</a><br>\t</span>'
         b'\n\t  <small></small>      </td>\n      <td style="vertical-align: '
         b'top; height: 100%;\n\t\t padding: 10px;">\n\t<h2>Student Projects'
         b'</h2>\n    <h2>General Ideas</h2>\n\n    <p>My areas of interest ar'
         b'e Software Test, Program Analysis, Clone\n      Detection, Bug De'
         b'tection. If you are interested to do a project in\n      one of t'
         b'he areas, please contact me.</p>\n\n    <p>Some project ideas are:'
         b'</p>\n\n    <h3>General Software Engineering</h3>\n\n    <ul>\n  '
         b'    <li>Finding and Exploiting Similarity between Software Tests</li'
         b">\n      <!--li>Tracking a user's operations to automatically tra"
         b'ck time spent\n\ton a project</li-->\n      <li>Identify reused cod'
         b'e between mobile applications.</li>\n      <li>Identify reused co'
         b'de between Eclipse plugins.</li>\n      <li>Search for how code i'
         b's copied: Where is my code coming from\n\tand where does it end up'
         b'?</li>\n      <li>Detection of Changes in Public Interfaces.</li>'
         b'\n      <!--li>A diff/patch combination that is aware of copy, mo'
         b've, and rename\n\toperations.</li-->\n    </ul>\n\n    <h3>Code P'
         b'rovenance</h3>\n\n    <ul>\n      <li>Finding and Exploiting Simila'
         b'rity between Software Tests</li>\n      <li>Identify reused code '
         b'between mobile applications.</li>\n      <li>Identify reused code'
         b' between Eclipse plugins.</li>\n      <li>Search for how code is '
         b'copied: Where is my code coming from\n\tand where does it end up?<'
         b'/li>\n      <li>Multi-version code hashing and search.</li>\n     '
         b' <li>Studying the Variability in Metrics for Cloned Code</li>\n  '
         b'    <li>Tracking Copied Code</li>\n      <li>Find irregular patte'
         b'rns in source code and natural text for plagiarism detection.</l'
         b'i>\n      <!--li>Change Detection in the Presence of Cut-Copy-Pas'
         b'te</li-->\n      <!--li>A diff/patch combination that is aware of'
         b' copy, move, and rename\n\toperations.</li-->\n      <!--li>Framewo'
         b'rk for Malware Analysis of Android Applications</li-->\n    </ul>'
         b'\n\n    <h3>Software Testing and Fault Localisation</h3>\n\n    <ul>'
         b'\n      <li>Finding and Exploiting Similarity between Software Te'
         b'sts</li>\n      <li>Cross-Referencing for Deletion Dependence</li'
         b'>\n      <li>Automatic removal of unused code.</li>\n      <li>Pro'
         b'ducing Minimal Versions of Programs that Expose\n\tFaults</li>\n   '
         b'   <li>Automatic detection of non-determinism in programs.</li>\n'
         b'      <!--li>Move Observation-Based Slicing to the Cloud</li-->\n'
         b'      <!--li>Mutation Testing of Memory-Related Operations</li--'
         b'>\n      <!--li>Risks of Data Based Taint Analysis</li-->\n      <'
         b'!--li>Framework for Malware Analysis of Android Applications</li'
         b'-->\n    </ul>\n\n    <h3>Software Security</h3>\n    \n    <ul>\n'
         b'      <li>Risks of Data Based Taint Analysis</li>\n      <li>Info'
         b'rmation Flow Control and Taint Analysis via Program\n\tSlicing for'
         b' Java</li>\n      <!--li>Framework for Malware Analysis of Androi'
         b'd Applications</li-->\n      <!--li>Source Code Obfuscation for J'
         b'ava</li-->\n      <li>Mutation-Based Obfuscation</li>\n      <li>O'
         b'bfuscation in Android Apps</li>\n    </ul>\n\n    <p>A list of conc'
         b"rete topics you'll find below.</p>\n    \n    <h2>Specific Topics<"
         b'/h2>\n\n    <h3>Finding and Exploiting Similarity between Software'
         b' Tests</h3>\n\n    With Unit Testing one has a link between the te'
         b'sted code and the\n    code that tests it.  This project will inv'
         b'estigate if similar test\n    code corresponds to the tested code'
         b' to be similar, too (and vice\n    versa). If such a corresponden'
         b'ce exists, it may be possible to\n    exploit the similarity to r'
         b'euse test code for code that is not yet\n    tested but has some '
         b'similar code that is already tested.\n\n    <h3>Cross-Referencing '
         b'for Deletion Dependence</h3>\n\n    In the ORBS Project, programs '
         b'are manipulated by deleting\n    statements and source code lines'
         b' as much as possible.  Very often,\n    a deletion is attempted, '
         b'but the resulting source code cannot even\n    be compiled. This '
         b'project will build a referencing tool that will\n    extract link'
         b's between lines from the analysed source code.  These\n    links '
         b'will establish that a line x can only be deleted when a\n    line'
         b' y already has been deleted.  The extracted links will be used\n '
         b'   to improve the ongoing ORBS research project.\n\n    \n    <h3>I'
         b'dentify Reused Code between Mobile Applications</h3>\n    \n    Mo'
         b'bile applications have to be developed quickly and therefore are'
         b'\n    likely to reuse proven code from similar applications.  Thi'
         b's\n    project will analyse mobile applications (e.g. Android app'
         b's) for\n    reused code.  It will employ tools and techniques fro'
         b'm Clone\n    Detection and Software Bertillonage to identify simi'
         b'lar and\n    identical parts to gather data about reuse between a'
         b'pps. It will\n    then study patterns of reuse between apps and w'
         b'ill also look at\n    reuse from and to non-mobile projects.\n\n   '
         b' <h3>Automatic Removal of Unused Code</h3>\n    <!-- 3091 M091 --'
         b'>\n\n    During Testing of a system, coverage of the code is often'
         b' measured\n    to find out which code has been executed. If a tes'
         b't fails, there\n    are often tools at hand that help with findin'
         b'g problems inside the\n    system, however, most of them are stat'
         b'ic analysis tools that\n    analyse the complete source code. Thi'
         b's project will develop a tool\n    that automatically removes sou'
         b'rce code that is not executed during\n    a test. An approach cal'
         b'led delta debugging can be used for it: It\n    removes parts of '
         b'the source code and checks if the tests executed\n    still produ'
         b'ce the same output as before. Delta debugging will find\n    the '
         b'minimal source code that will still produce the same test\n    re'
         b'sults. The reduced source code can than be used for much more\n  '
         b'  effective fault localisation or other static analyses.\n\n    <h'
         b'3>Producing Minimal Versions of Programs that Expose Faults</h3>'
         b'\n\n    Understanding what actually is responsible for causing a f'
         b'ailure\n    is a hard task. This project will remove as much as p'
         b'ossible from\n    a program that causes a failure so that remove '
         b'anything else will\n    either cause a different failure or chang'
         b'e the behaviour with\n    respect to the failure.\n    \n    <p>The'
         b' project will build on previous research on\n    Observation-Base'
         b'd Slicing</p>\n\n    <h3>Tracking Copied Code</h3>\n    <!-- 3091 M'
         b'091 -->\n\n    Clone detection tools usually report identified clo'
         b'nes in sets of\n    source code locations independent of its auth'
         b'or and/or owner.\n    This project will will use an available clo'
         b'ne detection tool\n    to find cloned code and then use the infor'
         b'mation available in a version\n    archive to find the authors of'
         b' the clones. For a specific author,\n    a tool to be developed w'
         b'ill then track from where he has copied\n    code or where his co'
         b'de appears, too.\n\n    <h3>Studying the Variability in Metrics fo'
         b'r Cloned Code</h3>\n\n    It is assumed that there are differences'
         b' in properties for cloned\n    and for non-cloned code and theref'
         b'ore metrics for cloned and\n    non-cloned code have been defined'
         b', computed, and compared.\n    However, what actually is cloned c'
         b'ode is defined by the tool used\n    to identify cloned code.  Ho'
         b'wever, not only the tool used impacts\n    the distinction betwee'
         b'n cloned and non-cloned code, but also its\n    configuration. \n\n'
         b'    <p>This project will study the variability in measured metrics f'
         b'or\n    cloned and non-cloned code by using different tools and d'
         b'ifferent\n    configurations. In addition, it will use search-bas'
         b'ed techniques\n    to identify the maximum range of variability.<'
         b'/p>\n\n    <p>As search-based techniques are used, this project wi'
         b'll need to\n    use a cloud-based approach.</p>\n\n    <h3>Studying'
         b' the Impact of Obfuscation on Source Code Plagiarism\n    Detecti'
         b'on</h3>\n    <!-- 3091 M091 -->\n\n    As can be seen in the Oracle'
         b' vs. Google case, software plagiarism is now\n    longer just a p'
         b'roblem in Higher Education but it has become a\n    serious threa'
         b'd to  to Intellectual Property Protection. However,\n    current '
         b'source code plagiarism detection tools are of limited use\n    if'
         b' the plagiarism is actively disguised through obfuscation.  This'
         b'\n    project will research how obfuscation impacts current detec'
         b'tion\n    approaches by doing a large-scale evaluation of clone a'
         b'nd\n    plagiarism detectors.<p>\n\n     <ul>\n       <li>The projec'
         b't will first research and develop a tool to apply\n\t a range of a'
         b'utomatic obfuscations like reformatting and\n\t identifier renamin'
         b'g to source code.</li>\n       <li>The project will then use the '
         b'automatic obfuscation to\n\t study how likely different plagiarism'
         b' and clone detectors can\n\t still detect the obfuscated copy as p'
         b'lagiarised.</li>\n     </ul>\n     \n    <h4>Material:</h4>\n    <ul'
         b'>\n      <li>Zhang, F., Jhi, Y. C., Wu, D., Liu, P., & Zhu, S. (2'
         b'012, July). A\n\tfirst step towards algorithm plagiarism detection'
         b'. In Proceedings\n\tof the 2012 International Symposium on Softwar'
         b'e Testing and\n\tAnalysis (pp. 111-121). ACM.</li>\n    </ul>\n\n'
         b'    <h3>Mutation-Based Obfuscation</h3>\n\n    Obfusctaion is usua'
         b'lly done by applying transformations to\n    programs that change'
         b' their syntax, but not their\n    semantics. Guranteeing that tra'
         b'nsformations are semantics\n    preserving is quite hard.  This p'
         b'roject will used mutation-based\n    testing transformation which'
         b' specifically try to change the\n    semantics.  To ensure that t'
         b"he mutations don't change the\n    behaviour, automated testing w"
         b"ill ensure that only mutation that\n    don't change the behaviou"
         b'r are accepted.\n\n    <ul>\n      <li>This project will have to us'
         b'e mutation test tools and\n\tautomatic test generation for Java.\n '
         b'     <li>Some serach-based approach may be used to find a set of'
         b'\n\tmutations that minimise the textual similarity between the\n\tor'
         b'iginal and the obfuscated version.\n    </ul>\n    \n    <h3>Detect'
         b'ion of Changes in Public Interfaces</h3>\n    <!-- 3091 M091 -->\n'
         b'    \n    Changes to the source code of a system are easily ident'
         b'ifiable by\n    a textual comparison of the current to the previo'
         b'us version. The\n    detection of semantic or syntactic changes i'
         b's much more\n    complicated. Independent of the changes in the c'
         b'ode of a system,\n    it is often more interesting to identify th'
         b'e changes in the public\n    interfaces of a system. This project'
         b' has to develop an approach to\n    compare the public interfaces'
         b" of a system's current version to the\n    public interfaces of t"
         b'he previous version. This approach has to\n    identify how the i'
         b'nterfaces has changed and to report to changes.\n\n\n    <h3>Risks '
         b'of Data Based Taint Analysis</h3>\n    <!-- 3091 M091 GA99 -->\n  '
         b'  \n    Dynamic application instrumentation and monitoring has be'
         b'come so\n    efficient that dynamic taint analyses tools have bee'
         b'n built which\n    track user data through the execution of appli'
         b'cation programs. To\n    prevent taint explosion, such tools igno'
         b're tainting through\n    control instructions. However, control i'
         b'nstructions can be used to\n    copy information and thus, such t'
         b'ools will have false\n    negatives. This project will study such'
         b' risks by evaluating a tool\n    like privacy scope with indirect'
         b' channels. For example, a loop\n    like the following will copy '
         b'variable a to b without ever creating\n    a data dependence betw'
         b'een a and b: b = 0; i = 0; while (i != a) {\n    ++i; ++b}\n\n    <'
         b'h4>Material:</h4>\n    <ul>\n      <li>http://appanalysis.org/priv'
         b'acyscope/index.html</li>\n    </ul>\n\n    <h3>Information Flow Con'
         b'trol and Taint Analysis via Program\n      Slicing for Java</h3>\n'
         b'    <!-- 3091 M091 GA99 -->\n\n    Program Slicing uses dependence'
         b' information that exists between\n    statements to find if a sta'
         b'tement may influence a different\n    statement. Recently, slicin'
         b'g-based techniques have been used for\n    information flow contr'
         b'ol and taint analysis. Unlike traditional\n    approaches, the sl'
         b'icing-based techniques can be applied to\n    real-world programs'
         b' effectively.\n\n    <ul>\n      <li>This project will develop such'
         b' a technique to be applied to\n\tJava programs. The project will t'
         b'ake a specification of sources\n\tand sinks and will check how dif'
         b'ferent levels of security can\n\tflow from the sources to the sink'
         b'.\n      <li>The project will use the WALA infrastructure (T. J. '
         b'Watson\n\tLibraries for Analysis) which provides static analysis\n\t'
         b'capabilities for Java bytecode and related languages.\n    </ul>\n'
         b'    \n    <h4>Material:</h4>\n    <ul>\n      <li>http://http://wal'
         b'a.sourceforge.net/</li>\n    </ul>\n    \n\n    <h3>Automatic detect'
         b'ion of non-determinism in programs.</h3>\n\n    Testing of program'
         b's is made more complicated by non-deterministic\n    behaviour. M'
         b'ost often, this is caused by concurrent\n    execution. However, '
         b'programs can have non-deterministic behaviour\n    even when they'
         b' are single threaded. For example, such behaviour can\n    be cau'
         b'sed by explicitly undefined behaviour in programming\n    languag'
         b'es like C that are exposed by using different compilers.\n\n    <p'
         b'>This project will use dynamic instrumentation to create traces\n'
         b'      of executions of the same program with the same input in\n '
         b'     different contexts. The traces are then compared to spot th'
         b'e\n      locations where they diverge.  Once such a divergence is'
         b' found,\n      it will be mapped back to source code and reported'
         b' as a\n      potential problem.</p>\n\n    <h3>Modifying Execution '
         b'Behaviour</h3>\n\n    <p>To observe and study the behaviour of a p'
         b'rogram, it is\n      sometimes necessary to disable the execution'
         b' of certain\n      statements or instructions.  This project will'
         b' develop an\n      approach to dynamically modify the execution i'
         b'n the described\n      way that allows the modification to be app'
         b'lied without\n      recompiling the system.</p>\n\n    <p>This proj'
         b'ect can be done for Java, in which case the bytecode\n      has t'
         b'o be rewritten, or for C, in which case the binary code has\n    '
         b'  to be rewritten.</p>\n\n    <h3>Obfuscation in Android Apps</h3>'
         b'\n\n    <p>Obfuscation is used to protect IP and to hide malicious'
         b' activities.\n      This project will analyse how Android Apps cu'
         b'rrently use\n      obfuscation:</p>\n\n    <ul>\n      <li>Which obf'
         b'uscation tools are used?\n      <li>Has the obfuscation changed o'
         b'ver time?\n      <li>Does obfuscation differ between benign and m'
         b'alicious apps?\n    </ul>\n\t\n  <!-- -*-html-*- -->\n<p>&nbsp;</'
         b'p>\n<p style="text-align: right;">\n  <SMALL CLASS=footer>\n    Las'
         b't modified: 01/18/2016  </SMALL>\n</p>\n</td>\n</tr>\n</table>\n '
         b'</body>\n</html>\n    <!-- h3>Fuzz vs System Test</h3>\n    \n    Fu'
         b'zz testing is an highly automated testing technique that tries\n '
         b'   to crash a program to reveal security vulnerabilities. It works b'
         b'y\n    sending invalid data to applications. In contrast, system '
         b'testing\n    evaluates the actual behaviour according to the spec'
         b'ified\n    behaviour. Both techniques are black box approaches, b'
         b'ut benefit\n    from white box approaches. This project will comp'
         b'are fuzz testing\n    and system testing in a case study. One or '
         b'more open source\n    systems which comes with system test will b'
         b'e studied under a set\n    of research questions. For example, ca'
         b'n the measured coverage in\n    system and fuzz testing be used t'
         b'o identify security relevant\n    components in the source code.\n'
         b'\n    <h4>Material:</h4>\n    <ul>\n      <li>http://en.wikipedia.o'
         b'rg/wiki/Fuzz_testing</li>\n      <li>http://gcc.gnu.org/onlinedoc'
         b's/gcc/Gcov.html</li>\n    </ul-->\n    \n    <!--h3>Using Static An'
         b'alysis to recommend Dynamic Monitors</h3>\n    <!-- 3091 M091 GA9'
         b'9 - ->\n\n    Previous work has shown that there is a direct corre'
         b'spondence\n    between program slicing and information flow contr'
         b'ol (e.g. taint\n    analysis). Thus the well known techniques of '
         b'program slicing can\n    be used to detect security vulnerabiliti'
         b'es in programs. Until now,\n    the approaches are all static. Ho'
         b'wever, as static analysis is not\n    precise, it can generate fa'
         b'lse positives. A human auditor can\n    decide if an identified v'
         b'ulnerability is a true or false\n    positive. If the auditor has'
         b' decided that it is a false positive\n    in error, the vulnerabi'
         b'lity still exists. Therefore this project\n    will develop an ap'
         b'proach that suggests a source code\n    instrumentation that moni'
         b'tors the execution dynamically for the\n    detected vulnerabilit'
         b'y and terminates the program if the\n    vulnerability is about t'
         b'o be exploited. -->\n\n    <!--h3>Trusting Software Components</h3'
         b'>\n    <!-- 3091 M091 GA99 - ->\n    \n    Ensuring security in mon'
         b'olithic software systems is possible,\n    however, systems are b'
         b'uilt from components today. Often these\n    components come from'
         b' an outside source and ensuring overall\n    security is often no'
         b' longer practical and one has to trust the\n    component or the '
         b'vendor of the component. This project will\n    develop a trust m'
         b'odel that computes the trust level of all parts\n    of a system '
         b'from specified trust levels for components. The model\n    has to'
         b' obey how trusted information is passed through untrusted\n    co'
         b'mponents and how untrusted components influence trusted ones. --'
         b'>\n\n    <!--h3>Delta Debugging Fuzz Tests</h3>\n    <!-- 3091 M091'
         b' GA99 - ->\n\n    Fuzz testing is an highly automated testing tech'
         b'nique that tries\n    to crash a program to reveal security vulne'
         b'rabilities. It works by\n    sending invalid data to applications'
         b'. However, as the input is\n    randomly generated, it may be unn'
         b'ecessarily large. Delta Debugging\n    on the other side can redu'
         b'ce an input that triggers a failure to a\n    minimal input that '
         b'still triggers the failure. This project will\n    develop a fuzz'
         b' testing tool that will first try to generate an\n    input that '
         b'causes a failure through fuzz testing and as soon as it\n    foun'
         b'd such an input will apply delta debugging to it. Ideally,\n    t'
         b'his is build into an available fuzz testing tool or framework to'
         b'\n    make it available to the public.\n\n    <h4>Material:</h4>\n  '
         b'  <ul>\n      <li>http://en.wikipedia.org/wiki/Fuzz_testing</li>\n'
         b'      <li>http://www.st.cs.uni-saarland.de/dd/</li>\n      <li>ht'
         b'tp://www.st.cs.uni-saarland.de/papers/tse2002/ (this paper describes'
         b' the main idea)</li>\n    </ul> -->\n    \n    <!--h3>Fuzz Testing '
         b'Web Applications</h3>\n    <!-- 3091 M091 GA99 - ->\n\n    Fuzz Tes'
         b'ting of Web Applications has to be proven very successful.\n    H'
         b'owever, most of the fuzzers in this area operates by fuzzing on\n'
         b'    the HTTP communication with the server.  More and more web\n '
         b'   applications have a substantial client side which is written '
         b'in\n    JavaScript which makes is easier to fuzz but harder to ac'
         b'tually\n    find vulnerabilities.  This project will develop and '
         b'implement a\n    web application fuzz tester that operates on the'
         b' GUI level in the\n    browser. It therefore has to use some GUI '
         b'test tool with an API\n    which allows the extraction of the GUI'
         b' elements in a browser and\n    then fuzz tests the GUI of the we'
         b'b application. -->\n    <!--h3>A Plugin and Service to Check Soci'
         b'al Network Comments for Trust</h3>\n    <!-- 3091 M091 GA99 - ->\n'
         b'\n    Social Networks and Forums tend to attract a lot of Scams. '
         b'The\n    normal user does not know if he can trust a comment or a'
         b'\n    suggestion even if the comment is posted by a friend or col'
         b'league\n    because the scammers trick people into reposting or l'
         b'iking\n    postings. Current approaches to detect malware cannot '
         b'deal with\n    this, as they are checking whole web pages.  This '
         b'project has to\n    develop a plugin and a service that checks an'
         b'y text fragment\n    whether it is known to be a scam.\n    \n    <'
         b'ul>\n      <li>The plugin will allow to select a region of text o'
         b'n a\n\tdisplayed web page and submit the selected fragment to a se'
         b'rver,\n\twhich will check the fragment. The server will reply and '
         b'the\n\tplugin will display if the fragment is a scam or similar.<l'
         b'i>\n      <li>The server will receive a fragment and compare it t'
         b'o an\n\tinternal database.  If a similar text is stored, the resul'
         b't will\n\tbe send as a reply.  If a similar text is not stored, th'
         b'e query\n\twill be stored as a new entry. Any query will decrease '
         b'the trust\n\t- the more queries a fragment had, the lower the trus'
         b't.</li>\n    </ul>\n    \n    The server will also serve as a forum'
         b' to discuss a set of similar\n    fragments and to collect eviden'
         b'ce whether it can be trusted or\n    not. -->\n\n    <!--h3>Trackin'
         b"g a user's operations to automatically track time spent\n      on"
         b' a project</h3>\n\n    Most computer users switch between differen'
         b't projects rapidly\n    which makes it hard to track the time spe'
         b'nt on the projects. This\n    project will analyse the interactio'
         b'n a user has with a system and\n    classify it to establish whic'
         b'h project the user is currently\n    working on.  The user will s'
         b'ee the automatic classification and\n    may accept it or correct'
         b' it. In addition, the system will track\n    the time spent on ev'
         b'ery project. -->\n\n    <!--h3>Framework for Malware Analysis of A'
         b'ndroid Applications</h3>\n\n    <p>Android applications often cont'
         b'ain malware and the different\n      Android markets suffer from '
         b'malware. This project will build a\n      framework that prepares'
         b' Android applications for malware\n      analyses.  The framework'
         b' has to unpack such applications and\n      extract as much infor'
         b'mation about the applications as\n      possible. Information abo'
         b'ut used methods and classes,\n      implemented code, used obfusc'
         b'ations, etc.</p>\n\n    <p>An example experiment will then compare'
         b' the information\n      gathered from malware an benign applicati'
         b'ons.</p>\n\n    <h4>Material:</h4>\n    <ul>\n      <li>http://link.'
         b'springer.com/chapter/10.1007/978-3-642-37300-8_4</li>\n    </ul--'
         b'>\n\n    <!--h3>Move Observation-Based Slicing to the Cloud</h3>\n\n'
         b'    Observation-Based Slicing deletes as much as possible from a'
         b'\n    program so that the behaviour at a specific point in the pr'
         b'ogram is\n    not changed.  At the moment, this is a sequential p'
         b'rocess.  This\n    project will first research approaches to para'
         b'llelize\n    Observation-Based Slicing and then developing a clou'
         b'd-based\n    version. The infrastructure to be used it Microsoft '
         b'Azure. -->\n\n    <!--h3>Mutation Testing of Memory-Related Operat'
         b'ions</h3>\n\n    Memory related bug are still the most complex bug'
         b's to find as\n    testing focusses on other areas. This project w'
         b"ill mutate a\n    program's memory operations with new mutation o"
         b'perators to\n    simulate memory-related bugs. The goal is to imp'
         b'rove test suites\n    to cover memory-related bugs. In addition, '
         b'it will use automatic\n    test-case generation to evaluate autom'
         b'atically generated tests. -->\n    \n    <!--h3>Unusual Metrics</h'
         b'3>\n    <!-- 3091 M091 - ->\n\n    Many tools exist that compute tr'
         b'aditional metrics like complexity\n    or methods per class. This'
         b' project will develop a tool that\n    collects unusual metrics l'
         b"ike 'words in comments per class' or\n    'average length of iden"
         b"tifiers'. The tool has to parse Java source\n    files directly, "
         b'compute the metrics and print a table of the\n    metrics. -->\n\n '
         b'   <!--h3>Change Detection in the Presence of Cut-Copy-Paste</h3'
         b'>\n    <!-- 3091 M091 - ->\n\n    Traditional change detection as i'
         b't can be found in diff for\n    example can only detect additions'
         b' and deletions. However, typical\n    operations during developme'
         b'nt also include move and copy\n    operations or the renaming of '
         b'identifiers. This project will\n    research how such operations '
         b'can automatically be identified and\n    will develop a diff tool'
         b' that identifies the operations.<p>\n\n     \n     The project will'
         b' likely use suffix arrays or trees to identify copy and move\n   '
         b'  operations. Parameterized suffix arrays or trees can be used t'
         b'o\n     allow renaming of identifiers.\n\n    <h4>Material:</h4>\n  '
         b'  <ul>\n      <li>Malpohl, G., Hunt, J. J., & Tichy, W. F. (2003)'
         b'. Renaming\n      detection. Automated Software Engineering, 10(2'
         b'), 183-202.</li>\n    </ul-->\n     \n\n    <!--h3>Propagation Analy'
         b'sis by Data State Mutation</h3>\n    <!-- 3091 M091 - ->\n    \n   '
         b' Most software systems operate under the assumption that the\n   '
         b' underlying hardware is working correctly and are not prepared t'
         b'o\n    handle unexpected events. In safety critical systems that '
         b'operate\n    under extreme conditions such events must be handled'
         b' and in the\n    ideal case, the system will operate correctly ev'
         b'en with failing\n    hardware. This project will assume a simple '
         b'source of errors:\n    radiation may cause bits in memory to chan'
         b'ge. The project has to\n    simulate this by mutation of the data'
         b' state of a system under\n    analysis and to study the differenc'
         b'es in behaviour. -->\n\n    <!--h3>Source Code Obfuscation for Jav'
         b'a</h3>\n\n    Obfuscation is one way to prevent theft of Intelectu'
         b'al Property by\n    making it impossible to understand the source'
         b' code.  Most\n    obfuscators work on bytecode (or binary) level '
         b'to also prevent\n    decompilation.  However, it is sometimes des'
         b'irable to obfuscate\n    the source code.\n\n    <ul>\n      <li>Thi'
         b's project will develop an obfuscator for Java source\n\tcode.  It '
         b'has to define a series of obfuscation and then has\n\tto implement'
         b' it.\n      <li>One way to approach the project is to use TXL, a '
         b'unique\n\tprogramming language specifically designed to support co'
         b'mputer\n\tsoftware analysis and source transformation tasks.\n    <'
         b'/ul>\n\n    <h4>Material:</h4>\n    <ul>\n      <li>http:/txl.ca/</l'
         b'i>\n    </ul-->\n\n',
 'links': [2575, 2576, 2577],
 'pid': 2588,
 'url': 'http://www0.cs.ucl.ac.uk/staff/J.Krinke/projects.html'}
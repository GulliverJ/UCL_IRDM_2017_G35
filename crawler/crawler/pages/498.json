{'html': '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">\n<HTML>\n<HEAD>\n    <META NAME="Generator" CONTENT="Cosmo Create 1.0.3">\n    <TITLE>Computer Graphics </TITLE>\n</HEAD>\n<BODY>\n<H1>\nA 3D Graphics Library</H1>\n<P>\nThese pages describe the main features of a 3D graphics library. The \nlibrary uses OpenGL as a rendering engine, but builds facilities on top \nof this supporting data structures for faces and objects, and also for \nviewing.</P>\n<P>\nThe library is implemented in C, though it may be used with C++. This \nsituation is realistic, since out in the world so far, the majority of \nsuch graphics libraries are organised in this way. </P>\n<P>\nAlthough the library is written in C, it closely follows an object \noriented methodology (though without inheritance). Each concept of \ngraphics is represented as a (set of) structures, declared in a .h \nfile, and there is a corresponding .c file with the implementation. The \nfirst parameter of every function is always the object (ie, structure) \nto which the function applies - hence the function may be thought of as \na method, to be applied to the object of the appropriate type. The only \nexception to this rule, is when a new instance of the type is created. </P>\n<P>\nFor example, there is the concept of a 3D point, represented by the \nPoint3D structure (point.h), and the function newPoint3D(double x, \ndouble y, double z) returns an instance of a Point3D representing the \npoint (x,y,z). Then there is, eg, a function transformPoint3D(Point3D \n*p, Matrix m) which applies the 4*4 Matrix M, to the point. (Obviously, \nthere is another type of object called Matrix - represented in matrix.h \nand matrix.c). </P>\n<P>\nThe library may be used to import VRML1.0 files, and also a \'native\' \nvery simplistic file format for representing an object. Each such file \n(VRML1.0 or native) represents a single object, and a scene may be \ncomposed - an object hierarchy can be built - from a collection of such \nobjects. A VRML1.0 normally encodes such an object hierarchy (although \nthe entire hierarchy may represent one object such as a model of a \nperson).</P>\n<H1>\nWhere is it?</H1>\n<P>\nThe files can be found in the directory <A\n HREF="file:///cs/research/vr/starship/home/ucacmsl/Public/CG/Lib3D1.0">~ucacmsl/Public/CG/Lib3D1.0</A></P>\n<H2>\nWhat\'s there?</H2>\n<UL>\n    <LI>\n    <B>Makefile</B> which can be used for C or C++ (or else you can \n    make your own). \n    <LI>\n    <B>mainstreetglut.c</B> - an implementation of an object hierarchy, \n    uses GLUT to set up window and animation. \n    <LI>\n    <B>mainstreetiglut.c</B> - same scene, but now interactive \n    navigation - left mouse button swivels the view plane normal, and right \n    mouse button moves the view reference point forward along the view \n    plane normal. \n    <LI>\n    <B>Data</B> - a directory containing some simple data files in the \n    native format. \n    <LI>\n    <B>vrml</B> - a program that will read in a VRML file and display \n    it, also allowing interactive navigation as above. This file is created \n    by <B>mainvrml.c</B>. \n</UL>\n<H2>\nUsing it with VRML</H2>\n<P>\nTo use the system with VRML an additional library is needed. This is \ncalled libdvrml.a which is located as referenced in the Makefile.</P>\n<P>\nYou must set the following environment variable:</P>\n<P>\nDVRML_PATH</P>\n<P>\nto point to where the VRML files are that you want to use. You will \nfind a source of VRML files in <A\n HREF="/cs/research/vr/starship/vr/vrml/">/cs/research/vr/starship/vr/vrml/.</A></P>\n<P>\nFor example, if you wanted to access the VRML files representing \n\'people\' you must do the following in the Unix shell:</P>\n<P>\nsetenv DVRML_PATH <A HREF="/cs/research/vr/starship/vr/vrml/">/cs/research/vr/starship/vr/vrml/people</A></P>\n<P>\nand then run the program by typing (eg)</P>\n<P>\n<I>vrml shrmwak2.wrl</I></P>\n<P>\nNote that the VRML files end with <I>.wrl</I></P>\n<HR>\n<H1>\nThe Library</H1>\n<P>\nThe software is described in a number of modules, each representing a \ngraphics concept.</P>\n<P>\n</P>\n<UL>\n    <LI>\n    <A HREF="lab1_point.html">Points and Vectors</A> \n    <LI>\n    <A HREF="lab2_vertex.html">Vertex Arrays and Linked Lists</A> \n    <LI>\n    <A HREF="lab3_face.html">Face Data Structure</A> \n    <LI>\n    <A HREF="lab4_gobject.html">Graphical Objects</A> \n    <LI>\n    <A HREF="lab6_camera.html">A Perspective Camera</A> \n    <LI>\n    <A HREF="cw2_hierarchy.html">Creating an Object Hierarchy</A> \n    <LI>\n    <A HREF="material_c.html">Defining Materials</A> \n    <LI>\n    <A HREF="vrml.html">Using VRML files</A>\n</UL>\n</BODY>\n</HTML>\n',
 'pid': 498,
 'url': 'http://www0.cs.ucl.ac.uk/staff/m.slater/Teaching/Lib3D/'}
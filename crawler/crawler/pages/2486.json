{'html': b'<html>\n<head>\n<title>File ExistsBCF.ML (Isabelle99-1: October 20'
         b'00)</title>\n</head>\n\n<body>\n<h1>File ExistsBCF.ML</h1>\n\n<hr>'
         b'\n<pre>(*  Title:      ExistsBCF.ML\n    Author:     James Brother'
         b'ston / Rene Vestergaard\n    Revised:    30th August, 2000\n\n- Pro'
         b'of that any term can be alpha0-reduced to a BCF\n\n*)\n\n\nGoal "'
         b'(s,ys) -&gt;&gt;iA1 t ==&gt; FV(s) = FV(t)";\nby(etac cl_ialpha1.'
         b'induct 1);\nby(Simp_tac 1);\nby(dtac ialpha1_FV_lemma 1);\nby(Asm_f'
         b'ull_simp_tac 1);\nqed "cl_ialpha1_FV_lemma";\n\n\nGoal "(s,ys) -&gt;'
         b'&gt;iA1 t ==&gt; BV(t) &lt;= BV(s) Un set(ys)";\nby(etac cl_ialph'
         b'a1.induct 1);\nby(Fast_tac 1);\nby(dtac ialpha1_BV_lemma 1);\nby(Fo'
         b'rce_tac 1);\nqed "cl_ialpha1_BV_lemma";\n\n\nGoal "(e,xs) -&gt;&gt;i'
         b"A1 e' ==&gt; x~:set(xs) --&gt; (Abs x e,xs) -&gt;&gt;iA1 Abs x e"
         b'\'";\nby(etac cl_ialpha1.induct 1);\nby(Fast_tac 1);\nby(strip_tac 1'
         b');\nby(Asm_full_simp_tac 1);\nby(etac conjE 1);\nby(datac i_alpha1.'
         b'abs 1 1);\nby(eatac cl_ialpha1.trans 1 1);\nqed "cl_ialpha1_abs";\n'
         b'\n\nGoal "(e,xs) -&gt;&gt;iA1 e\' ==&gt; y~:set(xs) --&gt; y~:BV(e)'
         b' --&gt; (e[x:=Var y],xs) -&gt;&gt;iA1 e\'[x:=Var y]";\nby(etac cl_'
         b'ialpha1.induct 1);\nby(Fast_tac 1);\nby(strip_tac 1);\nby(Asm_full_'
         b'simp_tac 1);\nby(etac conjE 1);\nby(datac (ialpha1_var_subst RS mp'
         b' RS mp) 1 1);\nby(dtac cl_ialpha1_BV_lemma 1);\nby(rtac (Capt_BV_l'
         b'emma_1 RS mp) 1);\nby(Fast_tac 1);\nby(eatac cl_ialpha1.trans 1 1)'
         b';\nqed "cl_ialpha1_var_subst";\n\n\nGoal "BV(e[x:=Var y]) = BV(e'
         b')";\nby(induct_tac "e" 1);\nby(Auto_tac);\nqed "BV_var_subst";\nAdds'
         b'imps[BV_var_subst];\n\n\nGoal "UB(e) --&gt; UB(e[x:=Var y])";\nby(in'
         b'duct_tac "e" 1);\nby(Auto_tac);\nqed "UB_var_subst";\n\n\nGoal "x'
         b'~=y ==&gt; FV(e[x:=Var y]) &lt;= FV(e) Un {y}";\nby(induct_tac "e'
         b'" 1);\nby(Auto_tac);\nqed "FV_var_subst";\n\n\nGoal "[|(ALL z. z '
         b'mem zs --&gt; z ~: FV(Abs x e1) &amp; z~:BV(Abs x e1)); zs=y#ys|] =='
         b'&gt; ALL z. z mem ys --&gt; z ~: BV e1 &amp; z ~: FV e1";\nby(str'
         b'ip_tac 1);\nby(Asm_full_simp_tac 1);\nby(eres_inst_tac [("x","z")]'
         b' allE 1);\nby(case_tac "y=z" 1);\nby(Auto_tac);\nqed "EBCF_aux_1";\n'
         b'\n\nGoal "ALL m xs. length xs = n + m --&gt; (EX ys zs. xs = ys @ '
         b'zs &amp; length(ys) = n &amp; length(zs) = m)";\nby(induct_tac "n'
         b'" 1); \nby(Asm_full_simp_tac 1);\nby(Fast_tac 1);\nby(strip_tac 1);'
         b'\nby(asm_full_simp_tac (simpset() addsimps[length_Suc_conv]) 1);\n'
         b'by(REPEAT_DETERM (etac exE 1));\nby(etac conjE 1);\nby(REPEAT_DETE'
         b'RM (etac allE 1));\nby(mp_tac 1);\nby(REPEAT_DETERM (etac exE 1));'
         b'\nby(REPEAT_DETERM (etac conjE 1));\nby(res_inst_tac [("x","y#ysa"'
         b')] exI 1);\nby(res_inst_tac [("x","zs")] exI 1);\nby(rtac conjI 1)'
         b';\nby(Asm_full_simp_tac 1);\nby(rtac conjI 1);\nby(atac 2);\nby(res_'
         b'inst_tac [("x","y")] exI 1);\nby(res_inst_tac [("x","ysa")] exI 1'
         b');\nby(Asm_simp_tac 1);\nqed "EBCF_aux_2";\n\n\nGoal "length xs ='
         b' n + m ==&gt; (EX ys zs. xs = ys @ zs &amp; length(ys) = n &amp; len'
         b'gth(zs) = m)";\nby(asm_full_simp_tac (simpset() addsimps[EBCF_aux'
         b'_2]) 1);\nqed "EBCF_aux_3";\n\n\nGoal "ALL x. x mem ys@zs --&gt; P x'
         b' ==&gt; (ALL x. x mem ys --&gt; P x) &amp; (ALL x. x mem zs --&gt; P'
         b' x)";\nby(asm_full_simp_tac (simpset() addsimps[set_mem_eq]) 1);\n'
         b'qed "EBCF_aux_4";\n\n\nGoal "uniqlist(ys@zs) --&gt; uniqlist(ys) &a'
         b'mp; uniqlist(zs)";\nby(induct_tac "ys" 1);\nby(Asm_full_simp_tac 1'
         b');\nby(strip_tac 1);\nby(asm_full_simp_tac (simpset() addsimps[set'
         b'_mem_eq]) 1);\nqed "uniqlist_property_1";\n\n\nGoal "uniqlist(ys@zs)'
         b' --&gt; set(ys) Int set(zs) = {}";\nby(induct_tac "ys" 1);\nby(Sim'
         b'p_tac 1);\nby(strip_tac 1);\nby(asm_full_simp_tac (simpset() addsi'
         b'mps[set_mem_eq]) 1);\nby(Fast_tac 1);\nqed "uniqlist_property_2";\n'
         b'\n\nGoal "(ALL x. x mem ys --&gt; x~:FV(e1) &amp; x~:FV(e2) &amp; '
         b'P x) --&gt; FV(e1) Int set(ys) = {} &amp; FV(e2) Int set(ys) = {'
         b'}";\nby(induct_tac "ys" 1);\nby(Simp_tac 1);\nby(strip_tac 1);\nby(a'
         b'sm_full_simp_tac (simpset() addsimps[set_mem_eq]) 1);\nby(Auto_ta'
         b'c);\nqed "EBCF_aux_5";\n\n\nGoal "ALL x. x mem y#ys --&gt; P x ==&gt'
         b'; (ALL x. x mem ys --&gt; P x) &amp; P y";\nby(asm_full_simp_tac '
         b'(simpset() addsimps[set_mem_eq]) 1);\nqed "all_list_induct_1";\n\n\n'
         b'Goal "(e1,xs) -&gt;&gt;iA1 e1\' ==&gt; ALL e2. (ALL x. x mem xs -'
         b"-&gt; x~:(BV(e2) Un FV(e2))) --&gt; (e1 $ e2,xs) -&gt;&gt;iA1 (e1' $"
         b' e2)";\nby(etac cl_ialpha1.induct 1);\nby(ALLGOALS strip_tac);\nby('
         b'rtac cl_ialpha1.refl 1);\nby(dtac all_list_induct_1 1);\nby(etac c'
         b'onjE 1);\nby(etac allE 1);\nby(mp_tac 1);\nby(datac i_alpha1.appL 1'
         b' 1);\nby(eatac cl_ialpha1.trans 1 1);\nqed "cl_ialpha1_appL";\n'
         b'\n\nGoal "[|(e1,xs) -&gt;&gt;iA1 e1\'; ALL x. x mem xs --&gt; x~:(B'
         b'V(e2) Un FV(e2))|] ==&gt; (e1 $ e2,xs) -&gt;&gt;iA1 (e1\' $ e2)";'
         b'\nby(asm_full_simp_tac (simpset() addsimps[cl_ialpha1_appL]) 1);\n'
         b'qed "cl_ialpha1_appL";\n\n\nGoal "(e1,xs) -&gt;&gt;iA1 e1\' ==&gt; A'
         b'LL e2. (ALL x. x mem xs --&gt; x~:(BV(e2) Un FV(e2))) --&gt; (e2 $ e'
         b'1,xs) -&gt;&gt;iA1 (e2 $ e1\')";\nby(etac cl_ialpha1.induct 1);\nby'
         b'(ALLGOALS strip_tac);\nby(rtac cl_ialpha1.refl 1);\nby(dtac all_li'
         b'st_induct_1 1);\nby(etac conjE 1);\nby(etac allE 1);\nby(mp_tac 1);'
         b'\nby(datac i_alpha1.appR 1 1);\nby(eatac cl_ialpha1.trans 1 1);\nqe'
         b'd "cl_ialpha1_appR";\n\n\nGoal "[|(e1,xs) -&gt;&gt;iA1 e1\'; ALL x. '
         b'x mem xs --&gt; x~:(BV(e2) Un FV(e2))|] ==&gt; (e2 $ e1,xs) -&gt;&gt'
         b';iA1 (e2 $ e1\')";\nby(asm_full_simp_tac (simpset() addsimps[cl_ia'
         b'lpha1_appR]) 1);\nqed "cl_ialpha1_appR";\n\n\nGoal "(e2,ys) -&gt;&gt'
         b';iA1 e3 ==&gt; ALL e1 xs. (e1,xs) -&gt;&gt;iA1 e2 --&gt; (e1,ys@xs) '
         b'-&gt;&gt;iA1 e3";\nby(etac cl_ialpha1.induct 1);\nby(ALLGOALS stri'
         b'p_tac);\nby(Simp_tac 1);\nby(REPEAT_DETERM (etac allE 1));\nby(mp_t'
         b'ac 1);\nby(Simp_tac 1);\nby(eatac cl_ialpha1.trans 1 1);\nqed "cl_i'
         b'alpha1_bigtrans";\n\n\nGoal "[|(e1,xs) -&gt;&gt;iA1 e2; (e2,ys) -&g'
         b't;&gt;iA1 e3|] ==&gt; (e1,ys@xs) -&gt;&gt;iA1 e3";\nby(asm_full_s'
         b'imp_tac (simpset() addsimps[cl_ialpha1_bigtrans]) 1);\nqed "cl_ia'
         b'lpha1_bigtrans";\n\n\nGoal "[|(e1,xs) -&gt;&gt;iA1 e1\'; ALL x. x me'
         b"m xs --&gt; x~:(BV(e2) Un FV(e2)); (e2,ys) -&gt;&gt;iA1 e2'; ALL y. "
         b"y mem ys --&gt; y~:(BV(e1') Un FV(e1'))|] ==&gt; (e1 $ e2, ys@xs) -&"
         b'gt;&gt;iA1 (e1\' $ e2\')";\nby(datac cl_ialpha1_appL 1 1);\nby(rotat'
         b'e_tac 1 1);\nby(datac cl_ialpha1_appR 1 1);\nby(eatac cl_ialpha1_b'
         b'igtrans 1 1);\nqed "cl_ialpha1_doubleApp";\n\n\n(* Key to existence '
         b'of alpha0-rewrite sequence to a BCF *)\nGoalw [BCF] "ALL xs. lamb'
         b'das(e1) = length(xs) --&gt; uniqlist(xs) --&gt; (ALL x. x mem xs --&'
         b'gt; x~:FV(e1) Un BV(e1)) --&gt; (EX e2. (e1,rev xs) -&gt;&gt;iA1 e2 '
         b'&amp; BCF(e2) &amp; BV(e2) = set(xs))";\nby(induct_tac "e1" 1);\nb'
         b'y(ALLGOALS strip_tac);\n(* Variable case *)\nby(res_inst_tac [("x"'
         b',"Var var")] exI 1);\nby(Asm_full_simp_tac 1);\nby(Fast_tac 1);\nby'
         b'(defer_tac 1);\n(* Abstraction case; first extract induction hypo'
         b'thesis *)\nby(dtac sym 1);\nby(asm_full_simp_tac (simpset() addsim'
         b'ps[length_Suc_conv] delsimps[FV_Abs,BV_Abs]) 1);\nby(REPEAT_DETER'
         b'M (etac exE 1));\nby(etac conjE 1);\nby(fatac EBCF_aux_1 1 1);\nby('
         b'rotate_tac ~2 1);\nby(dtac sym 1);\nby(rotate_tac 1 1);\nby(etac al'
         b'lE 1);\nby(mp_tac 1);\nby(ftac list_theory_4 1);\nby(etac allE 1);\n'
         b'by(mp_tac 1);\nby(Asm_full_simp_tac 1);\nby(etac exE 1);\nby(REPEAT'
         b'_DETERM (etac conjE 1));\n(* Now apply contraction rule *)\nby(res'
         b'_inst_tac [("x","Abs y (e2[var:=Var y])")] exI 1);\nby(rtac conjI'
         b' 1);\nby(dtac (list_theory_3 RS mp) 1);\nby(dres_inst_tac [("x2","'
         b'var")] (cl_ialpha1_var_subst RS mp RS mp) 1);\nby(Asm_simp_tac 1)'
         b';\nby(atac 1);\nby(dres_inst_tac [("x","y")] cl_ialpha1_abs 1);\nby'
         b'(Asm_full_simp_tac 1);\nby(rtac cl_ialpha1_trans2 1);\nby(atac 2);'
         b'\nby(rtac i_alpha1.contr 1);\nby(Asm_full_simp_tac 1);\n(* ... and '
         b'show that the resulting term is a BCF *)\nby(ftac cl_ialpha1_BV_l'
         b'emma 1);\nby(ftac cl_ialpha1_FV_lemma 1);\nby(Asm_full_simp_tac 1)'
         b';\nby(rtac conjI 1);\nby(etac (UB_var_subst RS mp) 1);\nby(rtac con'
         b'jI 1);\nby(datac (list_theory_3 RS mp) 1 1);\nby(cut_inst_tac [("x'
         b'","var"),("y","y"),("e","e2")] FV_var_subst 1);\nby(fatac not_sym'
         b' 1 1);\nby(Fast_tac 1);\n(* Application case; first extract dual i'
         b'nduction hypotheses *)\nby(Asm_full_simp_tac 1);\nby(dtac sym 1);\n'
         b'by(dtac EBCF_aux_3 1);\nby(REPEAT_DETERM (etac exE 1));\nby(REPEAT'
         b'_DETERM (etac conjE 1));\nby(rotate_tac ~2 1);\nby(dtac sym 1);\nby'
         b'(dtac sym 1);\nby(etac allE 1);\nby(mp_tac 1);\nby(etac allE 1);\nby'
         b'(mp_tac 1);\nby(Asm_full_simp_tac 1);\nby(ftac (uniqlist_property_'
         b'1 RS mp) 1);\nby(etac conjE 1);\nby(REPEAT_DETERM (mp_tac 1));\nby('
         b'dtac EBCF_aux_4 1);\nby(etac conjE 1);\nby(Auto_tac);\n(* Split int'
         b'o two subgoals *)\nby(res_inst_tac [("x","e2 $ e2a")] exI 1);\nby('
         b'rtac conjI 1);\nby(defer_tac 1);\n(* Show that the given reduct is'
         b' a BCF *)\nby(dtac (uniqlist_property_2 RS mp) 1);\nby(dtac cl_ial'
         b'pha1_FV_lemma 1);\nby(dtac cl_ialpha1_FV_lemma 1);\nby(dtac (EBCF_'
         b'aux_5 RS mp) 1);\nby(dtac (EBCF_aux_5 RS mp) 1);\nby(Asm_full_simp'
         b'_tac 1);\nby(Fast_tac 1);\n(* and finally show that the given alph'
         b'a0 transition is valid *)\nby(ftac cl_ialpha1_FV_lemma 1);\nby(eta'
         b'c cl_ialpha1_doubleApp 1);\nby(atac 2);\nby(ALLGOALS strip_tac);\nb'
         b'y(asm_full_simp_tac (simpset() addsimps[set_mem_eq]) 1);\nby(dtac'
         b' (uniqlist_property_2 RS mp) 1);\nby(asm_full_simp_tac (simpset()'
         b' addsimps[set_mem_eq]) 1);\nby(Fast_tac 1);\nqed "key_to_BCF_exist'
         b'ence";\n\n\n(* EXISTENCE OF BCF VIA ALPHA0-REWRITE SEQUENCE *)\nGoal'
         b' "EX e2. e1 -&gt;&gt;A0 e2 &amp; BCF(e2)";\nby(cut_inst_tac [("e1'
         b'.0","e1")] key_to_BCF_existence 1);\nby(cut_inst_tac [("n","lambd'
         b'as(e1)"),("e","e1"),("ys","[]")] exists_suitable_list 1);\nby(eta'
         b'c exE 1);\nby(REPEAT_DETERM (etac conjE 1));\nby(dtac sym 1);\nby(e'
         b'tac allE 1);\nby(mp_tac 1);\nby(Asm_full_simp_tac 1);\nby(etac exE '
         b'1);\nby(res_inst_tac [("x","e2")] exI 1);\nby(etac conjE 1);\nby(dt'
         b'ac rt_ialpha1_to_rt_ialpha0 1);\nby(Fast_tac 1);\nqed "ExistsBCF";'
         b'\n\n</pre>\n<hr>\n\n</body>\n</html>\n',
 'links': [],
 'pid': 2486,
 'url': 'http://www0.cs.ucl.ac.uk/staff/J.Brotherston/confluence_VB/ExistsBCF.ML.html'}
{'html': b'(*******************************************************************'
         b'****\n\n                    Mathematica-Compatible Notebook\n\nThis '
         b'notebook can be used on any computer system with Mathematica 4.0'
         b',\nMathReader 4.0, or any compatible application. The data for th'
         b'e notebook \nstarts with the line containing stars above.\n\nTo get'
         b' the notebook into a Mathematica-compatible application, do one '
         b'of \nthe following:\n\n* Save the data starting with the line of st'
         b'ars above into a file\n  with a name ending in .nb, then open the'
         b' file inside the application;\n\n* Copy the data starting with the'
         b' line of stars above to the\n  clipboard, then use the Paste menu'
         b' command inside the application.\n\nData for notebooks contains on'
         b'ly printable 7-bit ASCII and can be\nsent directly in email or th'
         b'rough ftp in text mode.  Newlines can be\nCR, LF or CRLF (Unix, M'
         b'acintosh or MS-DOS style).\n\nNOTE: If you modify the data for thi'
         b's notebook not in a Mathematica-\ncompatible application, you mus'
         b't delete the line below containing the \nword CacheID, otherwise '
         b'Mathematica-compatible applications may try to \nuse invalid cach'
         b'e data.\n\nFor more information on notebooks and Mathematica-compa'
         b'tible \napplications, contact Wolfram Research:\n  web: http://www'
         b'.wolfram.com\n  email: info@wolfram.com\n  phone: +1-217-398-0700 '
         b'(U.S.)\n\nNotebook reader applications are available free of charg'
         b'e from \nWolfram Research.\n**************************************'
         b'*********************************)\n\n(*CacheID: 232*)\n\n\n(*Not'
         b'ebookFileLineBreakTest\nNotebookFileLineBreakTest*)\n(*NotebookOpt'
         b'ionsPosition[     18558,        408]*)\n(*NotebookOutlinePosition'
         b'[     19735,        445]*)\n(*  CellTagsIndexPosition[     19691,'
         b'        441]*)\n(*WindowFrame->Normal*)\n\n\n\nNotebook[{\nCell["\\'
         b'<\\\nReadImage/: ReadImage[filename_, n_] := \n   ReadList[filename'
         b', Table[Number, {n}]]\nDispIt/: DispIt[t_] := ListPlot3D[t, Light'
         b'ing -> False, \n    Mesh -> False, AspectRatio -> 3, \n    ViewPoi'
         b'nt -> {0, 0, -1000}, Axes -> False]\nDispIt/: DispIt[t_, a_] := L'
         b'istPlot3D[t, Lighting -> False, \n    Mesh -> False, AspectRatio '
         b'-> a, \n    ViewPoint -> {0, 0, -1000}, Axes -> False]\nEpsOut/: E'
         b'psOut[which_] := Display[\\"!psfix -epsf > out.ps\\", \n    which]\n'
         b'SetOptions[ListPlot, PlotJoined -> True]; \\\n\\>", "Text",\n  Evalu'
         b'atable->True,\n  ImageRegion->{{0, 1}, {0, 1}}],\n\nCell[BoxData[{\n'
         b'    \\(\\(nptsx = 64;\\)\\), "\\n", \n    \\(\\(tmp = \n        R'
         b'eadImage["\\<C:/simon/math/teaching/3c72/arridge.aim\\>", \n       '
         b'   nptsx];\\)\\), "\\n", \n    \\(\\(nptsy = Length[tmp];\\)\\),'
         b' "\\n", \n    \\(\\(imr = tmp;\\)\\), "\\n", \n    \\(\\(For[i = 1'
         b', i \\[LessEqual] nptsy, \\(i++\\), \n        imr\\[LeftDoubleBra'
         b'cket]nptsy + 1 - i\\[RightDoubleBracket] = \n          tmp\\[LeftDo'
         b'ubleBracket]i\\[RightDoubleBracket]];\\)\\)}], "Input",\n  ImageRegi'
         b'on->{{0, 1}, {0, 1}}],\n\nCell[BoxData[{\n    \\( (*\\ synthesise'
         b'\\ a\\ simple\\ image\\ *) \\[IndentingNewLine]\\(nptsy\\  = \\ '
         b'\n        nptsx;\\)\\), "\\[IndentingNewLine]", \n    \\(\\(ims = T'
         b'able[Table[80\\ Random[], {nptsx}], {nptsy}];\\)\\), "\\n", \n   '
         b' \\(\\(ystart = Floor[nptsy\\/4];\\)\\), "\\n", \n    \\(\\(xstar'
         b't = Floor[nptsx\\/4];\\)\\), "\\n", \n    \\(\\(yw = Floor[nptsy\\/4'
         b'];\\)\\), "\\n", \n    \\(\\(xw = Floor[nptsx\\/4];\\)\\), "\\n", '
         b'\n    \\(\\(ycen = Floor[\\(3\\ nptsy\\)\\/4] - 2;\\)\\), "\\n", \n'
         b'    \\(\\(xcen = Floor[\\(3\\ nptsx\\)\\/4] - 2;\\)\\), "\\n", \n '
         b'   \\(\\(For[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n        Fo'
         b'r[n = 1, \n          n \\[LessEqual] \n            nptsx, \\(n++'
         b'\\), \\(ims\\[LeftDoubleBracket]m, \n                n\\[RightDou'
         b'bleBracket] += \n              If[\\((m - ycen)\\)\\^2 + \\((n - '
         b'xcen)\\)\\^2 < 0.8\\ xw\\^2, 200, \n                0];\\)]];\\)\\),'
         b' "\\n", \n    \\(\\(For[m = 1, m \\[LessEqual] yw, \\(m++\\), \n    '
         b'    For[n = 1, n \\[LessEqual] xw, \\(n++\\), \n          ims\\[L'
         b'eftDoubleBracket]ystart + m, xstart + n\\[RightDoubleBracket] += '
         b'\n            100]];\\)\\)}], "Input",\n  ImageRegion->{{0, 1}, {0, '
         b'1}}],\n\nCell[BoxData[\n    \\(\\(\\( (*\\ \n      Use\\ read\\ in'
         b'\\ image\\ *) \\)\\(\\[IndentingNewLine]\\)\\(im\\  = \\ \n       '
         b' ims;\\)\\)\\)], "Input"],\n\nCell[BoxData[{\n    \\({nptsx, nptsy}'
         b'\\), "\\n", \n    \\(\\(ListDensityPlot[im, Mesh \\[Rule] False];\\'
         b')\\)}], "Input",\n  ImageRegion->{{0, 1}, {0, 1}}],\n\nCell[BoxData['
         b'{\n    \\( (*\\(\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(*'
         b'*\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\\n\\(**\\)\\(**\\)\\(**\\)\\'
         b'(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\'
         b'(**\\)\\(**\\)\\\n\\(**\\)\\(**\\)\\)*\\[IndentingNewLine]Now\\ '
         b'the\\ Fourier\\ Versions\\ \\\n\\[IndentingNewLine]***************'
         b'****************************************)  \\\n(*\\ this\\ funct'
         b'ion\\ rotates\\ quadrants\\ of\\ an\\ image\\ *) \\[IndentingNewLin'
         b'e]\\\n\\(\\(RotImage[im_] := \n      Module[{nptsx, nptsy}, nptsy'
         b' = Length[im]; \n        nptsx = Length[im\\[LeftDoubleBracket]1\\['
         b'RightDoubleBracket]]; \n        RotateLeft[Transpose[RotateLeft[T'
         b'ranspose[im], Floor[nptsx\\/2 + 1]]], \n          Floor[nptsy\\/2 +'
         b' 1]]]\\)\\(\\[IndentingNewLine]\\)\\( (*\\ \n      inverse\\ of\\'
         b' the\\ above\\ *) \\)\\)\\), "\\[IndentingNewLine]", \n    \\(IRotIm'
         b'age[im_] := \n      Module[{nptsx, nptsy}, nptsy = Length[im]; \n '
         b'       nptsx = Length[im\\[LeftDoubleBracket]1\\[RightDoubleBracke'
         b't]]; \n        RotateRight[\n          Transpose[RotateRight[Trans'
         b'pose[im], Floor[nptsx\\/2 + 1]]], \n          Floor[nptsy\\/2 + 1]]'
         b']\\)}], "Input",\n  ImageRegion->{{0, 1}, {0, 1}}],\n\nCell[BoxData['
         b'{\n    \\(\\(fim = Fourier[im];\\)\\), "\\n", \n    \\(\\(fim2 = '
         b'RotImage[fim];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[Re[Log[fi'
         b'm2]], Mesh \\[Rule] False];\\)\\), "\\n", \n    \\(\\(ListDensityPl'
         b'ot[Im[Log[fim2]], Mesh \\[Rule] False];\\)\\)}], "Input",\n  ImageRe'
         b'gion->{{0, 1}, {0, 1}}],\n\nCell[BoxData[\n    \\(\\(\\(\\[Indentin'
         b'gNewLine]\\)\\( (*\\ \n      now\\ form\\ derivative\\ of\\ Gaussian'
         b'\\ edge\\ filters\\ *) \\)\\)\\)], "Input"],\n\nCell[BoxData[{\n '
         b'   \\(G[x_, \n        s_] := \\[ExponentialE]\\^\\(-\\(x\\^2\\/\\'
         b'(2\\ s\\^2\\)\\)\\)\\/\\@\\(2\\ \\[Pi]\\)\\), \\\n"\\n", \n    \\'
         b'(Gx[x_, \n        s_] := \\[PartialD]\\_xx G[xx, s] /. \\[InvisibleS'
         b'pace]xx \\[Rule] \n          x\\), "\\n", \n    \\(Gxx[x_, \n      '
         b'  s_] := \\[PartialD]\\_{xx, 2}G[xx, s] /. \\[InvisibleSpace]xx \\[R'
         b'ule] \n          x\\)}], "Input",\n  ImageRegion->{{0, 1}, {0, 1}}]'
         b',\n\nCell[BoxData[\n    \\(\\(\\( (*\\ \n      function\\ to\\ do\\'
         b' zerocrossings\\ \\\n*) \\)\\(\\[IndentingNewLine]\\)\\(ZeroCros'
         b's[\n        im_]\\  := \\[IndentingNewLine]Module[{zc, nx, \n       '
         b'   ny}, \\[IndentingNewLine]ny = Length[im]; \\ \n        nx\\  '
         b'= \\ Length[im[\\([1]\\)]]; \\[IndentingNewLine]zc\\  = \\ \n      '
         b'    Table[0, {nx}, {ny}]; \\[IndentingNewLine]For[i\\  = \\ 2, '
         b'\\ \n          i\\  \\[LessEqual] \\ ny - 1, \\ \\(i++\\), \\[Ind'
         b'entingNewLine]For[\n            j = 2, \\ j\\  \\[LessEqual] \\ \n'
         b'              nx - 1, \\ \\(j++\\), \\[IndentingNewLine]zc[\\([i,'
         b' j]\\)]\\  = \\ \n              If[\\[IndentingNewLine]\\((im[\\([i'
         b', j]\\)] im[\\([i + 1, j]\\)] > \n                      0\\ )\\) &'
         b'& \\((im[\\([i, j]\\)] im[\\([i, j + 1]\\)] > 0)\\), \n            '
         b'    0, 100]\\[IndentingNewLine]]\\[IndentingNewLine]]; \\\n\\[Ind'
         b'entingNewLine]zc]\\)\\)\\)], "Input"],\n\nCell[BoxData[{\n    \\( ('
         b'*\\ set\\ up\\ some\\ variables\\ *) \\[IndentingNewLine]\\n\\(y'
         b'cen\\  = \\ \n        nptsy/2;\\)\\), "\\n", \n    \\(\\(xcen\\  ='
         b' \\ nptsx/2;\\)\\), "\\[IndentingNewLine]", \n    \\(\\(epsimage\\  '
         b'= \\ Table[0.01, {nptsx}, {nptsy}];\\)\\)}], "Input"],\n\nCell[Bo'
         b'xData[{\n    \\(\\[IndentingNewLine] (*\\ \n      Now\\ form\\ the\\'
         b' filters\\ directly\\ in\\ the\\ Fourier\\ Domain\\ *) \\\n\\[Ind'
         b'entingNewLine]\\(sx\\  = \\ 0.8;\\)\\), "\\[IndentingNewLine]", \n '
         b'   \\(\\(sy\\  = \\ 0.8;\\)\\), "\\[IndentingNewLine]", \n    \\('
         b'\\(fGh = \\ Table[0, {nptsx}];\\)\\), "\\[IndentingNewLine]", \n  '
         b'  \\(\\(fGv = \\ Table[0, {nptsy}];\\)\\), "\\[IndentingNewLine]",'
         b' \n    \\(fGhx = fGh; \\ fGhxx\\  = \\ fGh;\\), "\\[IndentingNewLin'
         b'e]", \n    \\(fGvy = fGv; \\ fGvyy\\  = \\ fGv;\\), "\\[IndentingNe'
         b'wLine]", \n    \\(\\(For[n = 1, \n        n <= nptsx, \\(n++\\), \\'
         b'[IndentingNewLine]fGh[\\([n]\\)]\\  = \\ \n          G[\\(\\((n - x'
         b'cen)\\)\\ 2\\ \\[Pi]\\)\\/nptsx, \n            1\\/sx]; \\[Indent'
         b'ingNewLine]fGhx[\\([n]\\)]\\  = \\ \\((\\[ImaginaryI]\\ \\\n\\((n '
         b'- xcen)\\)\\ 2\\ \\[Pi]\\ /nptsx\\ )\\) \n            fGh[\\([n]\\'
         b')]; \\[IndentingNewLine]fGhxx[\\([n]\\)]\\  = \\ \\((\\\n\\[Imagi'
         b'naryI]\\ \\((n - xcen)\\)\\ 2\\ \\[Pi]\\ /nptsx\\ )\\) \n         '
         b'   fGhx[\\([n]\\)];\\[IndentingNewLine]];\\)\\), "\\[IndentingNewL'
         b'ine]", \n    \\(\\(For[m = 1, \n        m <= nptsy, \\(m++\\), \\[I'
         b'ndentingNewLine]fGv\\[LeftDoubleBracket]\n            m\\[RightDoub'
         b'leBracket] = \n          G[\\(\\((m - ycen)\\)\\ 2\\ \\[Pi]\\)\\/'
         b'nptsy, \n            1\\/sy]\\ \\ ; \\[IndentingNewLine]fGvy[\\([m'
         b']\\)]\\  = \\ \\[ImaginaryI]\\ \\\n\\((m - ycen)\\)\\ 2\\ \\[Pi]'
         b'\\ /\n              nptsy\\ fGv[\\([m]\\)]; \\[IndentingNewLine]fG'
         b'vyy[\\([m]\\)]\\  = \\ \\\n\\[ImaginaryI]\\ \\((m - ycen)\\)\\ '
         b'2\\ \\[Pi]\\ /\n              nptsy\\ fGvy[\\([m]\\)];\\[IndentingNe'
         b'wLine]];\\)\\), "\\\n\\[IndentingNewLine]", \n    \\(\\(fhmaskim'
         b'2\\  = \\ Outer[Times, fGv, fGhx];\\)\\), "\\n", \n    \\(\\(fhmaski'
         b'm = \n        IRotImage[fhmaskim2];\\)\\n (*\\(ListDensityPlot[Im[fh'
         b'maskim2], \n          Mesh -> False, PlotRange -> All];\\)*) \\n (*'
         b'\\(ListPlot3D[\n          Im[fhmaskim2], \n          PlotRange -> \n'
         b'            All];\\)*) \\[IndentingNewLine]\\), "\\[IndentingNewLine'
         b']", \n    \\(\\(fvmaskim2\\  = \\ Outer[Times, fGvy, fGh];\\)\\), "'
         b'\\n", \n    \\(\\(fvmaskim = \n        IRotImage[fvmaskim2];\\)\\n '
         b'(*\\(ListDensityPlot[Im[fvmaskim2], \n          Mesh -> False, Plo'
         b'tRange -> All];\\)*) \\n (*\\(ListPlot3D[\n          Im[fvmaskim2], '
         b'\n          PlotRange -> \n            All];\\)*) \\[IndentingNewLin'
         b'e]\\), "\\[IndentingNewLine]", \n    \\(\\(fhhmaskim2\\  = \\ \n    '
         b'    Outer[Times, fGv, fGhxx];\\)\\), "\\[IndentingNewLine]", \n '
         b'   \\(\\(fhhmaskim = \n        IRotImage[fhhmaskim2];\\)\\n (*\\(L'
         b'istDensityPlot[Re[fhhmaskim2], \n          Mesh -> False, PlotRan'
         b'ge -> All];\\)*) \\n (*\\(ListPlot3D[\n          Re[fhhmaskim2],'
         b' \n          PlotRange -> \n            All];\\)*) \\[IndentingNewLi'
         b'ne]\\), "\\[IndentingNewLine]", \n    \\(\\(fvvmaskim2\\  = \\ Oute'
         b'r[Times, fGvyy, fGh];\\)\\), "\\n", \n    \\(\\(fvvmaskim = \n     '
         b'   IRotImage[fvvmaskim2];\\)\\n (*\\(ListDensityPlot[Re[fvvmaskim2]'
         b', \n          Mesh -> False, PlotRange -> All];\\)*) \\n (*\\(ListPl'
         b'ot3D[\n          Re[fvvmaskim2], \n          PlotRange -> \n       '
         b'     All];\\)*) \\[IndentingNewLine]\\), "\\[IndentingNewLine]",'
         b' \n    \\(\\(fhvmaskim2\\  = \\ \n        Outer[Times, fGvy, fGhx]'
         b';\\)\\), "\\[IndentingNewLine]", \n    \\(\\(fhvmaskim = \n        '
         b'IRotImage[fhvmaskim2];\\)\\n (*\\(ListDensityPlot[Re[fhvmaskim2], \n'
         b'          Mesh -> False, PlotRange -> All];\\)*) \\n (*\\(ListPlot3'
         b'D[\n          Re[fhvmaskim2], \n          PlotRange -> All];\\)*) \\'
         b'[IndentingNewLine]\\)}], "Input"],\n\nCell[BoxData[{\n    \\( (*\\'
         b' check\\ rotation\\ is\\ correct\\ *) \\[IndentingNewLine]{xcen, '
         b'\\ \n      ycen}\\[IndentingNewLine]\\), "\\[IndentingNewLine]", '
         b'\n    \\(fhmaskim[\\([1, 1]\\)]\\)}], "Input"],\n\nCell[BoxData[{\n '
         b'   \\(\\(fhfiltim = fim\\ fhmaskim;\\)\\), "\\n", \n    \\(\\(hfi'
         b'ltimf = Chop[InverseFourier[N[fhfiltim]]] // Re;\\)\\), "\\n", \n   '
         b' \\(\\(hfiltimf2 = RotImage[hfiltimf];\\)\\), "\\n", \n    \\(\\(Lis'
         b'tDensityPlot[hfiltimf, Mesh \\[Rule] False, \n        PlotRange \\['
         b'Rule] All];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(fvfiltim = '
         b'fim\\ fvmaskim;\\)\\), "\\n", \n    \\(\\(vfiltimf = Chop[InverseFo'
         b'urier[N[fvfiltim]]] // Re;\\)\\), "\\n", \n    \\(\\(vfiltimf2 = R'
         b'otImage[vfiltimf];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[vfilt'
         b'imf, Mesh \\[Rule] False, \n        PlotRange \\[Rule] All];\\)\\'
         b'[IndentingNewLine] (*\\ \n      2  nd\\ derivative\\ filters\\ *)'
         b' \\), "\\[IndentingNewLine]", \n    \\(\\(fhhfiltim = fim\\ fhhmas'
         b'kim;\\)\\), "\\n", \n    \\(\\(hhfiltimf = Chop[InverseFourier[N[f'
         b'hhfiltim]]] // Re;\\)\\), "\\n", \n    \\(\\(hhfiltimf2 = RotImage'
         b'[hhfiltimf];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[hhfiltimf, '
         b'Mesh \\[Rule] False, \n        PlotRange \\[Rule] All];\\)\\), "\\'
         b'[IndentingNewLine]", \n    \\(\\(fvvfiltim = fim\\ fvvmaskim;\\)\\'
         b'), "\\n", \n    \\(\\(vvfiltimf = Chop[InverseFourier[N[fvvfiltim]]]'
         b' // Re;\\)\\), "\\n", \n    \\(\\(vvfiltimf2 = RotImage[vvfiltimf]'
         b';\\)\\), "\\n", \n    \\(\\(ListDensityPlot[vvfiltimf, Mesh \\[Rule'
         b'] False, \n        PlotRange \\[Rule] All];\\)\\), "\\[IndentingN'
         b'ewLine]", \n    \\(\\(fhvfiltim = fim\\ fhvmaskim;\\)\\), "\\n", \n '
         b'   \\(\\(hvfiltimf = Chop[InverseFourier[N[fhvfiltim]]] // Re;\\)\\)'
         b', "\\n", \n    \\(\\(hvfiltimf2 = RotImage[hvfiltimf];\\)\\), "\\n"'
         b', \n    \\(\\(ListDensityPlot[hvfiltimf, Mesh \\[Rule] False, \n '
         b'       PlotRange \\[Rule] All];\\)\\)}], "Input",\n  ImageRegion->{{'
         b'0, 1}, {0, 1}}],\n\nCell[BoxData[{\n    \\( (*\\ \n      a\\ little'
         b'\\ test\\ of\\ virtual\\ functions\\ *) \\ \\\n\\[IndentingNewLin'
         b'e]\\(maxgrad\\  = 10;\\)\\), "\\[IndentingNewLine]", \n    \\(\\'
         b'(\\((maxgrad\\  = If[# > \\ maxgrad, #, maxgrad])\\) &\\) /@ \n   '
         b'   Flatten[{{1, 12, 2}, {0, 12, 3}, {4, 25, \n            13}}]\\)'
         b', "\\[IndentingNewLine]", \n    \\(maxgrad\\[IndentingNewLine]\\)'
         b'}], "Input"],\n\nCell[BoxData[\n    \\( (*\\[IndentingNewLine]max'
         b'grad\\  = \n        10^\\((\\(-6\\))\\); \\[IndentingNewLine]\\('
         b'\\((maxgrad\\  = \n              If[# > \\ maxgrad, #, maxgrad])'
         b'\\) &\\) /@ \n        Flatten[gradim]; \\[IndentingNewLine]maxgr'
         b'ad\\[IndentingNewLine]*) \\)], \\\n"Input"],\n\nCell[BoxData[{\n   '
         b' \\(\\[IndentingNewLine] (*\\ \n      Form\\ the\\ curvature\\ imag'
         b'e\\ *) \\[IndentingNewLine]\\(gradim = \\ \\\n\\((hfiltimf^2\\  '
         b'+ \\ vfiltimf^2)\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\(maxg'
         b'rad\\  = \\ 10^\\((\\(-6\\))\\);\\)\\), "\\[IndentingNewLine]", \n'
         b'    \\(\\(\\(\\((maxgrad\\  = If[# > \\ maxgrad, #, maxgrad])\\) &\\'
         b') /@ \n        Flatten[gradim];\\)\\), "\\[IndentingNewLine]", \n'
         b'    \\(\\(Print[maxgrad];\\)\\), "\\[IndentingNewLine]", \n    \\(\\'
         b'(eps\\  = \\ \n        0.2;\\)\\[IndentingNewLine] (*\\(denom\\  = '
         b'\\ \n          gradim^\\((3/2)\\);\\)*) \\), "\\[IndentingNewLine]"'
         b', \n    \\(\\(denom\\  = \\ \n        Partition[\\(\\((If[# > \n '
         b'                   eps\\ maxgrad, #^\\((3/2)\\), \\((eps\\ maxgra'
         b'd)\\)^\\((3/\n                        2)\\)])\\) &\\) /@ Flatten[g'
         b'radim], \n          nptsx];\\)\\), "\\[IndentingNewLine]", \n    '
         b'\\(\\(maxdenom\\  = \\ 10^\\((\\(-6\\))\\);\\)\\), "\\[IndentingNew'
         b'Line]", \n    \\(\\(\\(\\((maxdenom\\  = If[# > \\ maxdenom, #, max'
         b'denom])\\) &\\) /@ \n        Flatten[denom];\\)\\), "\\[IndentingN'
         b'ewLine]", \n    \\(\\(Print[maxdenom];\\)\\), "\\[IndentingNewLine'
         b']", \n    \\(\\(kappaim\\  = \\ \\(-\\((vfiltimf^2\\ hhfiltimf\\ '
         b' - \\ \n                  2\\ hfiltimf\\ vfiltimf\\ \\ hvfiltimf\\ '
         b' + \\ \\ hfiltimf^2\\ \\\nvvfiltimf\\ )\\)\\)/\\((denom)\\) // Cho'
         b'p;\\)\\), "\\[IndentingNewLine]", \n    \\(\\(ListDensityPlot[grad'
         b'im, Mesh \\[Rule] False, PlotRange \\[Rule] All, \n        PlotLabe'
         b'l \\[Rule] "\\<Gradient Magnitude ^3\\>"];\\)\\), "\\\n\\[IndentingN'
         b'ewLine]", \n    \\(\\(ListDensityPlot[denom, Mesh \\[Rule] False, Pl'
         b'otRange \\[Rule] All, \n        PlotLabel \\[Rule] "\\<Gradient Magn'
         b'itude ^3\\>"];\\)\\), "\\\n\\[IndentingNewLine]", \n    \\(\\(Lis'
         b'tDensityPlot[kappaim\\ denom, Mesh \\[Rule] False, \n        PlotRa'
         b'nge \\[Rule] All, \n        PlotLabel \\[Rule] "\\<Unnormalised curv'
         b'ature\\>"];\\)\\), "\\\n\\[IndentingNewLine]", \n    \\(\\(ListDe'
         b'nsityPlot[kappaim, Mesh \\[Rule] False, PlotRange \\[Rule] All, \n '
         b'       PlotLabel \\[Rule] "\\<Curvature\\>"];\\)\\)}], "Input"],\n'
         b'\nCell[CellGroupData[{\n\nCell[BoxData[{\n    \\(\\[IndentingNewLi'
         b'ne] (*\\ \n      Repeat\\ at\\ larger\\ scale\\ *) \\[IndentingNewL'
         b'ine]\\(sx\\  = \\ \n        2.5;\\)\\), "\\[IndentingNewLine]", \n  '
         b'  \\(\\(sy\\  = \\ 2.5;\\)\\), "\\[IndentingNewLine]", \n    \\(\\'
         b'(fGh = \\ Table[0, {nptsx}];\\)\\), "\\[IndentingNewLine]", \n   '
         b' \\(\\(fGv = \\ Table[0, {nptsy}];\\)\\), "\\[IndentingNewLine]", '
         b'\n    \\(fGhx = fGh; \\ fGhxx\\  = \\ fGh;\\), "\\[IndentingNewLine'
         b']", \n    \\(fGvy = fGv; \\ fGvyy\\  = \\ fGv;\\), "\\[IndentingNew'
         b'Line]", \n    \\(\\(For[n = 1, \n        n <= nptsx, \\(n++\\), \\['
         b'IndentingNewLine]fGh[\\([n]\\)]\\  = \\ \n          G[\\(\\((n - xc'
         b'en)\\)\\ 2\\ \\[Pi]\\)\\/nptsx, \n            1\\/sx]; \\[Indenti'
         b'ngNewLine]fGhx[\\([n]\\)]\\  = \\ \\((\\[ImaginaryI]\\ \\\n\\((n -'
         b' xcen)\\)\\ 2\\ \\[Pi]\\ /nptsx\\ )\\) \n            fGh[\\([n]\\)'
         b']; \\[IndentingNewLine]fGhxx[\\([n]\\)]\\  = \\ \\((\\\n\\[Imagin'
         b'aryI]\\ \\((n - xcen)\\)\\ 2\\ \\[Pi]\\ /nptsx\\ )\\) \n          '
         b'  fGhx[\\([n]\\)];\\[IndentingNewLine]];\\)\\), "\\[IndentingNewLi'
         b'ne]", \n    \\(\\(For[m = 1, \n        m <= nptsy, \\(m++\\), \\[In'
         b'dentingNewLine]fGv\\[LeftDoubleBracket]\n            m\\[RightDoubl'
         b'eBracket] = \n          G[\\(\\((m - ycen)\\)\\ 2\\ \\[Pi]\\)\\/n'
         b'ptsy, \n            1\\/sy]\\ \\ ; \\[IndentingNewLine]fGvy[\\([m]'
         b'\\)]\\  = \\ \\[ImaginaryI]\\ \\\n\\((m - ycen)\\)\\ 2\\ \\[Pi]\\'
         b' /\n              nptsy\\ fGv[\\([m]\\)]; \\[IndentingNewLine]fGv'
         b'yy[\\([m]\\)]\\  = \\ \\\n\\[ImaginaryI]\\ \\((m - ycen)\\)\\ 2'
         b'\\ \\[Pi]\\ /\n              nptsy\\ fGvy[\\([m]\\)];\\[IndentingNew'
         b'Line]];\\)\\[IndentingNewLine]\\\n\\), "\\n", \n    \\(\\(fhmaski'
         b'm = IRotImage[Outer[Times, fGv, fGhx]];\\)\\), "\\n", \n    \\(\\('
         b'fvmaskim = \n        IRotImage[Outer[Times, fGvy, fGh]];\\)\\), "\\['
         b'IndentingNewLine]", \n    \\(\\(fhhmaskim = IRotImage[Outer[Times, '
         b'fGv, fGhxx]];\\)\\), "\\n", \n    \\(\\(fvvmaskim = \n        IRotI'
         b'mage[Outer[Times, fGvyy, fGh]];\\)\\), "\\[IndentingNewLine]", \n   '
         b' \\(\\(fhvmaskim = IRotImage[Outer[Times, fGvy, fGhx]];\\)\\n\\),'
         b' "\\n", \n    \\(\\(hfiltimf2 = Chop[InverseFourier[N[fim\\ fhmas'
         b'kim]]];\\)\\), "\\n", \n    \\(\\(vfiltimf2 = \n        Chop[Invers'
         b'eFourier[N[fim\\ fvmaskim]]];\\)\\), "\\[IndentingNewLine]", \n  '
         b'  \\(\\(hhfiltimf2 = Chop[InverseFourier[N[fim\\ fhhmaskim]]];\\'
         b')\\), "\\n", \n    \\(\\(vvfiltimf2 = \n        Chop[InverseFourie'
         b'r[N[fim\\ fvvmaskim]]];\\)\\), "\\[IndentingNewLine]", \n    \\(\\('
         b'hvfiltimf2 = \n        Chop[InverseFourier[\n            N[fim\\ fh'
         b'vmaskim]]];\\)\\[IndentingNewLine]\\)}], "Input"],\n\nCell[BoxDat'
         b'a[{\n    \\( (*\\ \n      Form\\ the\\ curvature\\ image\\ *) \\['
         b'IndentingNewLine]\\(gradim2 = \\ \\\n\\((hfiltimf2^2\\  + \\ vfilti'
         b'mf2^2)\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\(maxgrad\\ '
         b' = \\ 10^\\((\\(-6\\))\\);\\)\\), "\\[IndentingNewLine]", \n    \\'
         b'(\\(\\(\\((maxgrad\\  = If[# > \\ maxgrad, #, maxgrad])\\) &\\) /@ '
         b'\n        Flatten[gradim2];\\)\\), "\\[IndentingNewLine]", \n    '
         b'\\(\\(Print[\n        maxgrad];\\)\\[IndentingNewLine] (*\\(denom\\'
         b'  = \\ \n          gradim^\\((3/2)\\);\\)*) \\), "\\[IndentingNewLi'
         b'ne]", \n    \\(\\(eps\\  = \\ 0.2;\\)\\), "\\[IndentingNewLine]"'
         b', \n    \\(\\(denom2\\  = \\ \n        Partition[\\(\\((If[# > \n'
         b'                    eps\\ maxgrad, #^\\((3/2)\\), \\((eps\\ maxgr'
         b'ad)\\)^\\((3/\n                        2)\\)])\\) &\\) /@ Flatten['
         b'gradim2], \n          nptsx];\\)\\), "\\[IndentingNewLine]", \n  '
         b'  \\(\\(maxdenom\\  = \\ 10^\\((\\(-6\\))\\);\\)\\), "\\[IndentingN'
         b'ewLine]", \n    \\(\\(\\(\\((maxdenom\\  = If[# > \\ maxdenom, #, m'
         b'axdenom])\\) &\\) /@ \n        Flatten[denom2];\\)\\), "\\[Indenti'
         b'ngNewLine]", \n    \\(\\(Print[maxdenom];\\)\\), "\\[IndentingNewL'
         b'ine]", \n    \\(\\(kappaim2\\  = \\ \\(-\\((vfiltimf2^2\\ hhfiltimf2'
         b'\\  - \\ \n                  2\\ hfiltimf2\\ vfiltimf2\\ \\ hvfilti'
         b'mf2\\  + \\ \\ hfiltimf2^2\\ \\\nvvfiltimf2\\ )\\)\\)/denom2 // C'
         b'hop;\\)\\), "\\[IndentingNewLine]", \n    \\(\\(ListDensityPlot[gr'
         b'adim2, Mesh \\[Rule] False, PlotRange \\[Rule] All, \n        PlotL'
         b'abel \\[Rule] "\\<Gradient Magnitude\\>"];\\)\\), \\\n"\\[IndentingN'
         b'ewLine]", \n    \\(\\(ListDensityPlot[denom2, Mesh \\[Rule] False, P'
         b'lotRange \\[Rule] All, \n        PlotLabel \\[Rule] "\\<Gradient Mag'
         b'nitude ^3\\>"];\\)\\), "\\\n\\[IndentingNewLine]", \n    \\(\\(Li'
         b'stDensityPlot[kappaim2\\ denom2, Mesh \\[Rule] False, \n        Plo'
         b'tRange \\[Rule] All, \n        PlotLabel \\[Rule] "\\<Unnormalised c'
         b'urvature\\>"];\\)\\), "\\\n\\[IndentingNewLine]", \n    \\(\\(Lis'
         b'tDensityPlot[kappaim2, Mesh \\[Rule] False, PlotRange \\[Rule] All'
         b', \n        PlotLabel \\[Rule] "\\<curvature\\>"];\\)\\)}], "Input'
         b'"]\n}, Open  ]]\n},\nFrontEndVersion->"4.0 for X",\nScreenRectangle-'
         b'>{{0, 1152}, {0, 900}},\nWindowToolbars->{},\nCellGrouping->Manual'
         b',\nWindowSize->{1012, 668},\nWindowMargins->{{0, Automatic}, {Auto'
         b'matic, 0}},\nPrintingPageRange->{Automatic, Automatic},\nPrintingO'
         b'ptions->{"PaperSize"->{612, 792},\n"PaperOrientation"->"Portrait"'
         b',\n"PostScriptOutputFile":>FrontEnd`FileName[{"cs", "research", "'
         b'medim", \\\n"images3", "starship", "ucacarr", "teaching", "3c72", '
         b'"math"}, "edge2.nb.ps", \\\nCharacterEncoding -> "ISO8859-1"],\n"Ma'
         b'gnification"->1},\nPrivateNotebookOptions->{"ColorPalette"->{RGBC'
         b'olor, -1}},\nShowCellLabel->True,\nShowCellTags->False,\nRenderingO'
         b'ptions->{"ObjectDithering"->True,\n"RasterDithering"->False}\n'
         b']\n\n\n(***********************************************************'
         b'************\nCached data follows.  If you edit this Notebook fil'
         b'e directly, not using\nMathematica, you must remove the line cont'
         b'aining CacheID at the top of \nthe file.  The cache data will the'
         b'n be recreated when you save this file \nfrom within Mathematica.'
         b'\n***************************************************************'
         b'********)\n\n(*CellTagsOutline\nCellTagsIndex->{}\n*)\n\n(*CellTag'
         b'sIndex\nCellTagsIndex->{}\n*)\n\n(*NotebookFileOutline\nNotebook['
         b'{\nCell[1717, 49, 565, 14, 212, "Text",\n  Evaluatable->True],\nCel'
         b'l[2285, 65, 456, 10, 91, "Input"],\nCell[2744, 77, 1048, 21, 309,'
         b' "Input"],\nCell[3795, 100, 127, 3, 50, "Input"],\nCell[3925, 105,'
         b' 143, 3, 50, "Input"],\nCell[4071, 110, 1065, 18, 183, "Input"],\n'
         b'Cell[5139, 130, 276, 5, 75, "Input"],\nCell[5418, 137, 131, 2, 43'
         b', "Input"],\nCell[5552, 141, 372, 10, 101, "Input"],\nCell[5927, 1'
         b'53, 803, 14, 203, "Input"],\nCell[6733, 169, 245, 4, 91, "Input"]'
         b',\nCell[6981, 175, 3171, 62, 906, "Input"],\nCell[10155, 239, 186,'
         b' 3, 90, "Input"],\nCell[10344, 244, 1547, 27, 347, "Input"],\nCell'
         b'[11894, 273, 350, 7, 91, "Input"],\nCell[12247, 282, 260, 5, 91, '
         b'"Input"],\nCell[12510, 289, 1868, 34, 283, "Input"],\n\nCell[CellGr'
         b'oupData[{\nCell[14403, 327, 2275, 42, 666, "Input"],\nCell[16681, '
         b'371, 1861, 34, 267, "Input"]\n}, Open  ]]\n}\n]\n*)\n\n\n\n\n(***'
         b'********************************************************************'
         b'\nEnd of Mathematica Notebook file.\n*****************************'
         b'******************************************)\n\n',
 'links': [],
 'pid': 3725,
 'url': 'http://www0.cs.ucl.ac.uk/staff/S.Arridge/teaching/ndsp/imcurvature.nb'}
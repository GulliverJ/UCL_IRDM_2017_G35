{'html': '/*\r\n * MainAntiAlias - demonstration of full-screen anti-aliasing. Derived from \r\n * accpersp.c example from the Red Book, but simplified to only deal with\r\n * anti-aliasing. Silicon Graphics original copyright statement below.\r\n * \r\n * (c) Copyright 1993, Silicon Graphics, Inc.\r\n * ALL RIGHTS RESERVED \r\n * Permission to use, copy, modify, and distribute this software for \r\n * any purpose and without fee is hereby granted, provided that the above\r\n * copyright notice appear in all copies and that both the copyright notice\r\n * and this permission notice appear in supporting documentation, and that \r\n * the name of Silicon Graphics, Inc. not be used in advertising\r\n * or publicity pertaining to distribution of the software without specific,\r\n * written prior permission. \r\n *\r\n * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS"\r\n * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE,\r\n * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR\r\n * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON\r\n * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT,\r\n * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY\r\n * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION,\r\n * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF\r\n * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN\r\n * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON\r\n * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE\r\n * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE.\r\n * \r\n * US Government Users Restricted Rights \r\n * Use, duplication, or disclosure by the Government is subject to\r\n * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph\r\n * (c)(1)(ii) of the Rights in Technical Data and Computer Software\r\n * clause at DFARS 252.227-7013 and/or in similar or successor\r\n * clauses in the FAR or the DOD or NASA FAR Supplement.\r\n * Unpublished-- rights reserved under the copyright laws of the\r\n * United States.  Contractor/manufacturer is Silicon Graphics,\r\n * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311.\r\n *\r\n * OpenGL(TM) is a trademark of Silicon Graphics, Inc.\r\n */\r\n\n#include <GL/glut.h>\n#include <stdlib.h>\n#include <math.h>\n#include "jitter.h"\n\n#ifdef WIN32\n#define near zNear\n#define far zFar\n#endif\n\n#define PI_ 3.14159265358979323846\n\r\nint doAntialias=1;\r\n\n/* jitteredFrustum()\n * The first 6 arguments are identical to the glFrustum() call. \n * pixdx and pixdy are anti-alias jitter in pixels. \r\n */\n\r\nvoid jitteredFrustum(GLdouble left, GLdouble right, GLdouble bottom, \n   GLdouble top, GLdouble near, GLdouble far, GLdouble pixdx, \n   GLdouble pixdy) {\r\n\n   GLdouble xwsize, ywsize; \n   GLdouble dx, dy;\n   GLint viewport[4];\n\n   glGetIntegerv (GL_VIEWPORT, viewport);\n\t\n   xwsize = right - left;\n   ywsize = top - bottom;\n\t\n   dx = -(pixdx*xwsize/(GLdouble) viewport[2]);\n   dy = -(pixdy*ywsize/(GLdouble) viewport[3]);\n\t\n   glMatrixMode(GL_PROJECTION);\n   glLoadIdentity();\n   glFrustum (left + dx, right + dx, bottom + dy, top + dy, near, far);\n   glMatrixMode(GL_MODELVIEW);\n   glLoadIdentity();\n}\n\n/* jitteredPerspective()\n * \n * The first 4 arguments are identical to the gluPerspective() call.\n * pixdx and pixdy are anti-alias jitter in pixels. \n */\n\r\nvoid jitteredPerspective(GLdouble fovy, GLdouble aspect, \n   GLdouble near, GLdouble far, GLdouble pixdx, GLdouble pixdy) {\n\r\n\tGLdouble fov2,left,right,bottom,top;\n\n   fov2 = ((fovy*PI_) / 180.0) / 2.0;\n\n   top = near / (cos(fov2) / sin(fov2));\n   bottom = -top;\n\n   right = top * aspect;\n   left = -right;\n\n   jitteredFrustum (left, right, bottom, top, near, far,\n               pixdx, pixdy);\n}\n\n/*  Initialize lighting and other values.\n */\nvoid init(void)\n{\n   GLfloat mat_ambient[] = { 1.0, 1.0, 1.0, 1.0 };\n   GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 };\n   GLfloat light_position[] = { 0.0, 0.0, 10.0, 1.0 };\n   GLfloat lm_ambient[] = { 0.2, 0.2, 0.2, 1.0 };\n\n   glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);\n   glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);\n   glMaterialf(GL_FRONT, GL_SHININESS, 50.0);\n   glLightfv(GL_LIGHT0, GL_POSITION, light_position);\n   glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lm_ambient);\n    \n   glEnable(GL_LIGHTING);\n   glEnable(GL_LIGHT0);\n   glEnable(GL_DEPTH_TEST);\n   glShadeModel (GL_FLAT);\n\n   glClearColor(0.0, 0.0, 0.0, 0.0);\n   glClearAccum(0.0, 0.0, 0.0, 0.0);\n}\n\nvoid displayObjects(void) \n{\n   GLfloat teapot1_diffuse[] = { 0.7, 0.7, 0.0, 1.0 };\n   GLfloat teapot2_diffuse[] = { 0.0, 0.7, 0.7, 1.0 };\n   GLfloat teapot3_diffuse[] = { 0.7, 0.0, 0.7, 1.0 };\n    \n   glPushMatrix ();\n   glTranslatef (0.0, 0.0, -5.0); \n\n   glPushMatrix ();\n   glTranslatef (-0.80, 0.35, 0.0); \n   glRotatef (90.0, 1.0, 0.0, 0.0);\n   glMaterialfv(GL_FRONT, GL_DIFFUSE, teapot1_diffuse);\n   glutSolidTeapot(1.0);\n   glPopMatrix ();\n\n   glPushMatrix ();\n   glTranslatef (0.0, -0.50, 0.0); \n   glRotatef (270.0, 0.0, 0.0, 1.0);\r\n   glMaterialfv(GL_FRONT, GL_DIFFUSE, teapot2_diffuse);\n   glutSolidTeapot(1.0);\r\n   glPopMatrix ();\n\n   glPushMatrix ();\n   glTranslatef (0.75, 0.60, 0.0); \n   glMaterialfv(GL_FRONT, GL_DIFFUSE, teapot3_diffuse);\n   glutSolidTeapot(1.0);\r\n   glPopMatrix ();\n\n   glPopMatrix ();\n}\n\n#define ACSIZE\t8\n\nvoid display(void)\n{\n\tGLint viewport[4];\n\tint jitter;\n\t\n\tglGetIntegerv (GL_VIEWPORT, viewport);\n\t\r\n\tif (doAntialias) {\t\n\t\tglClear(GL_ACCUM_BUFFER_BIT);\n\t\tfor (jitter = 0; jitter < ACSIZE; jitter++) {\n\t\t\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\t\t\tjitteredPerspective (50.0, \n\t\t\t\t(GLdouble) viewport[2]/(GLdouble) viewport[3], \n\t\t\t\t1.0, 15.0, j8[jitter].x, j8[jitter].y);\n\t\t\tdisplayObjects ();\n\t\t\tglAccum(GL_ACCUM, 1.0/ACSIZE);\n\t\t}\n\t\tglAccum (GL_RETURN, 1.0);\r\n\t}\r\n\telse {\r\n\t\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\r\n\t\tglMatrixMode(GL_PROJECTION);\r\n\t\tglLoadIdentity();\r\n\t\tgluPerspective(50.0, \r\n\t\t\t(GLdouble) viewport[2]/(GLdouble) viewport[3], \r\n\t\t\t1.0, 15.0);\r\n\t\tglMatrixMode(GL_MODELVIEW);\r\n\t\tglLoadIdentity();\r\n\t\tdisplayObjects ();\r\n\t}\n\tglFlush();\r\n\tglutSwapBuffers();\n}\n\nvoid reshape(int w, int h)\n{\n\tglViewport(0, 0, (GLsizei) w, (GLsizei) h);\n}\n\nvoid keyboard(unsigned char key, int x, int y)\n{\n   switch (key) {\n      case 27:\n         exit(0);\n         break;\r\n\t  case \'a\':\r\n\t\t  doAntialias = 1 - doAntialias;\r\n\t\t  break;\n   }\n  glutPostRedisplay();\r\n}\n\r\nvoid menu(int item)\r\n{\r\n\r\n  switch (item) {\r\n\r\n  case 1:\r\n\t\t  doAntialias = 1 - doAntialias;\r\n\t\t  break;\r\n  }\r\n  glutPostRedisplay();\r\n}\r\n\r\n\n/*  \r\n *  Main Loop\n *  Be certain you request an accumulation buffer.\n */\n\r\nint main(int argc, char** argv)\n{\n   glutInit(&argc, argv);\n   glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB\n                        | GLUT_ACCUM | GLUT_DEPTH);\n   glutInitWindowSize (200, 200);\n   glutInitWindowPosition (100, 100);\n   glutCreateWindow (argv[0]);\n   init();\n   glutReshapeFunc(reshape);\n   glutDisplayFunc(display);\n   glutKeyboardFunc(keyboard);\r\n   glutCreateMenu(menu);\r\n   glutAddMenuEntry("Toggle full screen anti-aliasing", 1);\r\n   glutAttachMenu(GLUT_RIGHT_BUTTON);\n   glutMainLoop();\n   return 0;\n}\n',
 'pid': 374,
 'url': 'http://www0.cs.ucl.ac.uk/staff/A.Steed/book_tmp/CGVE/code/Lib3D1.0/mainantialias.c'}
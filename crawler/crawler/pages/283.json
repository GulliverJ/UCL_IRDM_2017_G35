{'html': '\n<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">\n<html>\n  <head>\n    <title>COMP M074/GV14 &ndash; Coursework</title>\n    <meta http-equiv="content-type" content="text/html;charset=iso-8859-1" />\n    <meta name="robots" content="noindex,nofollow,noarchive">\n    <link rel="stylesheet" href="style.css" type="text/css" />\n    <script type="text/javascript" src="hiddenemail.js"></script>\n  </head>\n\n  <body>\n    <!-- <h1>COMP M074/GV14 &ndash; Coursework</h1> -->\n    <h1>Advanced Modelling, Rendering and Animation</h1>\n    <h2>Coursework</h2>\n\n      <a href="index.php">Home</a> | <a href="syllabus.php">Syllabus</a> | <a href="coursework.php">Course Work</a> | <a href="assessment.php">Assessment</a>      <p/>\n\n<table width="100%" cellpadding=6 cellspacing=1 bgcolor="#a0a0b0" >\n<tr bgcolor="#e8e8f0">\n<th align=left><font size=\\"+2\\">coursework 1:&nbsp; GPU Rendering with Shaders in OpenGL</font></th>\n</tr>\n<tr bgcolor="#ffffff"> <td> \n\n<p>\nCoursework 1 will be assigned on January 23rd. Submissions are due on <font color="#CC0000">February 6th at 23:55</font>.\n</p>\n            <p align="justify">The first AMRA coursework will allow you to explore GPU rendering with programmable shaders in OpenGL. You should have met OpenGL in COMP3080/GV10, and you will be working with code shown in the AMRA lecture slides from weeks 2 and 3. However, feel free to refer to your COMP3080/GV10 notes. This coursework will require you to use resources we have not given you. You will need to explore the OpenGL API to find what you need! You are free to complete the tasks using any OpenGL/GLSL functions that you wish, and any comments are only a guide. There are also many resources online to help you. Each task is worth 20 marks towards a total of 100. Good luck!</p>\n            \n\t\t\t<p align="justify">If you have any questions, please email:\n\t\t\t<address><script type="text/javascript">hiddenemail(\'cs.ucl.ac.uk\',\'f.pece\')</script>\n\t\t\t<noscript>enable java script to see my email address</noscript></address>\n\t\t\t\n\t\t\t<br /><br />\n            <p align="justify"><u>Code</u></p>\n            <p align="justify">First, download the code framework from <a href="archive/2012/cw2/amracw0112_v2.zip">here</a>, and extract the zip file to a convenient location. You should see some c source files (with amracw1.c and amracw1.h), some shader source files (.vert and .frag), and some project files. If you\'re in the Windows labs, please open \'vs2008/amracw1/amracw1.sln\'; otherwise, there is an included Makefile. Feel free to edit all files as you wish; amracw1.c contains most of the code that you will change. Note that this coursework will not execute in MPEB 4.06, as the graphics cards are not capable of running programmable shaders.</p>\n            \n            <br />\n\t\t\t<p align="justify"><u>Task 1:</u></p>\n            <p align="justify">Compile and run the code. <b>NOTE:</b> Change the <i>Working Directory</i> to \'../../..\'. You can find this in Project -> Properties -> Configuration Properties -> Debugging (in the tree to the left). Once running, you should see an extruded square bathed in yellow light.</p>\n\t\t\t<img src="archive/2012/cw2/initial.png" />\n\t\t\t<p align="justify">Read the instructions in the console window and interact with the application. Notice that when pressing \'t\', the model disappears. We would like \'t\' to switch between different models so that we may better observe lighting effects.</p>\n\t\t\t\n\t\t\t<p align="justify">Find the display call in the code, and fill in the case/switch command so that the \'t\' key switches between the extruded square, a teapot, a sphere and a torus. Use the <a href="http://www.opengl.org/documentation/specs/glut/spec3/spec3.html">GLUT API</a>  with suitable parameters - it is already linked.</p>\n            \n\t\t\t<p align="justify">We would also like to add another light source to the scene, to observe more complicated lighting interaction. Find where the first light is setup in the code, and create another light of your choice to illuminate the model. You may need to refer to the OpenGL API documentation here. Once completed, you should have something that looks like this:</p>\n\t\t\t\n\t\t\t<img src="archive/2012/cw2/task1.png" /><img src="archive/2012/cw2/task1pp.png" />\n\t\t\t\n\t\t\t<p align="justify">Pressing \'s\' will switch from using a per-vertex lighting shader (above left) to using a per-pixel lighting shader (above right). Notice the difference this causes by rotating the object with the mouse. <b>Why are they different? Under which circumstances will these two different lighting techniques look the same?</b> It may help to experiment with the parameters you use to create the objects.\n            \n\t\t\t<br />\n            <p align="justify"><u>Task 2:</u></p>\n            \n            <p align="justify">We would now like to texture our object. Modify the per-vertex and per-pixel shaders to apply a texture to the object and light the object. Find the code that loads, links, and compiles the shader for the graphics card. Replicate this for your new shader. Note that any errors in your shader will be written to the console window for easier debugging.</p>\n\t\t\t\n\t\t\t<p align="justify">ShaderGen is a tool from 3DLabs (now defunct) that converts fixed-function OpenGL into GLSL vertex and fragment shaders. It is included in the code package under the folder \'ShaderGen/bin\'. Spend some time exploring ShaderGen to see how texturing can be added to objects and combined with lighting in shader code.</p>\n\t\t\t\n\t\t\t<p align="justify">The function \'LoadDIBitmap\' is provided to load 24bit RGB bitmap textures (like those included in the \'ShaderGen/textures\' folder - note that some of these textures are RGB padded to 32bits - use the \'RGB\' variants of the files if you do not see what you expect). Once loaded, use OpenGL calls to upload the texture to the graphics card, set any texture parameters correctly, and bind it for use. <b>Note:</b> Pay special attention to specular highlights!</p>\n            \n\t\t\t<p align="justify">Once complete, your code should produce something like below. <b>Why do these examples not look realistic?</b></p>\n\t\t\t<img src="archive/2012/cw2/task2.png" /><img src="archive/2012/cw2/task2pp.png" />\n          \n\t\t\t<br />\n\t\t\t<p align="justify"><u>Task 3:</u></p>\n\t\t   \n            <p align="justify">We would now like to make our object very shiny, like chrome, so that it reflects the world around it. Currently, by changing material and light properties, we can generate a shiny highlight, but materials such as chrome are not accurately represented using these approaches. In COMP3080/GV10, coursework 1 showed how ray tracing could be used to generate such reflections of the world; however, this approach is expensive for real-time graphics. Instead, we will use environment mapping.</p>\n\t\t\t\n\t\t\t<p align="justify">Environment mapping approximates the world outside the object using a texture. We use a specially formed texture, called a cube-map, which has six-sides. The texture is drawn as if we are inside the object, looking out at the world. Then, when we apply it to the object, it looks as if it is very shiny, reflecting the world around it.</p>\n\t\t\t\n\t\t\t<p align="justify">A cube-map texture is provided in the folder \'cubemap\'. You should start by drawing these textures to each side of a cube, and then drawing this cube around the object and the camera. This provides our outside world. Approach this part of the task by first correctly creating a GL_TEXTURE_CUBE_MAP texture out of the six-sided cube-map provided. \'draw.c\' includes a function to draw a cube - make a new function using this example that now draws the cube textured with the cube-map.</p>\n            \n\t\t\t<p align="justify">Once that is complete, we now need to generate texture coordinates to make our cube map appear as if it is the reflection of the world. In Task 2, the texture is fixed to the object during rotation. With environment mapping for reflection, we want the texture to stay fixed while the object rotates - after all, the world is not rotating. Start by exploring ShaderGen\'s TEXTURE COORDINATE SET tab. This tab contains options for OpenGL\'s inbuilt texture coordinate generation. One of these is just what we\'re looking for - once you\'ve found it, it may help to read up on texture coordinate generation. Integrate cube-map environment mapping into your shaders.</p>\n\t\t\t\n\t\t\t<p align="justify">Once complete, your code should produce something like the following images:</p>\n\t\t\t<img src="archive/2012/cw2/task3.png" /><img src="archive/2012/cw2/task3pp.png" />\n\t\t\t\n\t\t\t<p align="justify">The left image still includes per-pixel lighting, but the scene does not look realistic. <b>When using real-world sourced cube maps, why should we generally not use lighting with environment mapping?</b></p>\n\t\t\t\n\t\t\t<br />\n            <p align="justify"><u>Task 4:</u></p>\n            \n            <p align="justify">We would now like to turn our object to glass. When light passes through a transparent material such as glass, some of the light is reflected and some of the light is refracted. The Fresnel equations describe this ratio, and Snell\'s Law defines the angle of the refracted ray. You will need to define a refractive index for your object. Air has a refractive index very close to 1, and most glasses have a refractive index around 1.5. Modify your shaders to implement refraction and make the object look like glass.</p>\n\t\t\t\n\t\t\t<p align="justify">Importantly, here we are not concerned with physically accurate refraction. Given a ray incoming to the surface of our object, generate the refracted ray and assume it then goes off into the world and is not refracted again (as if the ray stays in glass until it reaches \'the world\'). To be correct, we would again need to reflect/refract the ray when it exits the object, but you are not required to do this. We can produce something that looks convincing by performing just one refraction.</p>\n\t\t\t\n\t\t\t<p align="justify">Once complete, your code should produce something like the following images:</p>\n\t\t\t<img src="archive/2012/cw2/task4.png" /><img src="archive/2012/cw2/task4pp.png" />\n\t\t\t\n\t\t\t<p align="justify"><b>As this effect is only an approximation, which of the objects do you think produces the most convincing glass material? Which do you think produces the least convincing glass material? Why?</b></p>\n\t\t\t\n\t\t\t<br />\n\t\t\t<p align="justify"><u>Task 5:</u></p>\n\t\t\t\n\t\t\t<p align="justify">What if the refractive index of your object was not consistent? Have you ever peered through an old pane of glass and seen the world distort as you move your head? Implement \'bumpy\' refraction to recreate this effect (left image). Use an appropriate example to show off this effect.</p>\n\t\t\t\n\t\t\t<p align="justify">Different wavelengths of light are refracted by different amounts, producing dispersion (or chromatic aberrations - right image). <b>How could this effect be implemented in a shader?</b></p>\n\t\t\t\t\t\t\n\t\t\t<img src="archive/2012/cw2/task5br.png" /><img src="archive/2012/cw2/task5cd.png" />\n\t\t\t\n\t\t\t<p align="justify">Looking at the Venus De Milo inspiration video in the references, we can see differences between the video and our result. <b>What differences still remain, and how could these effects be achieved?</b></p>\n\t\t\t\n\t\t\t<br />\n\t\t\t<p align="justify"><u>Write-up:</u></p>\n\t\t\t<p align="justify">Please write a short report on your work, detailing how you solved each part of the coursework. Be sure to answer the questions that are in bold within this document. Include all relevant code along with screenshots to demonstrate your solution. Make sure that your report shows examples of all the required simulation effects - this may require side-by-side comparison shots with highlighting. Assignment on January 23rd. Submissions are due on <font color="#CC0000">Wednesday 6th February at 23:55</font>. Electronic submission through Moodle. The report has to be in PDF format. Do <b>not</b> upload other document formats, such as Microsoft Word or Open Office.\n\n\t\t\t<br />\n\t\t\t<p align="justify"><u>References</u></p>\n\t\t\t<a href="http://www.opengl.org/sdk/docs/man/">OpenGL 2.1 Reference Documentation</a><br>\n\t\t\t<a href="http://mew.cx/glsl_quickref.pdf">GLSL Quick Reference Card</a><br>\n\t\t\t<a href="http://web4.cs.ucl.ac.uk/teaching/4074/archive/2011/cw1/hdr_video.wmv">Venus De Milo inspiration!</a><br>\n\t\t\t<a href="http://www.humus.name/index.php?page=Textures&&start=0">Many cubemaps!</a>\n\t\t\t<br>\n\t\t\t<p align="justify">Arch cubemap courtesy of Paul Bourke.</p>\n</p>\n</tr>\n</table>\n\n<br>\n\n<table width="100%" cellpadding=6 cellspacing=1 bgcolor="#a0a0b0" >\n<tr bgcolor="#e8e8f0">\n<th align=left><font size=\\"+2\\">Coursework 2:&nbsp; Monte-Carlo Path Tracing</font></th>\n</tr>\n<tr bgcolor="#ffffff"> <td> \n\n<p>\nCoursework 2 will be assigned on February 6th. Submissions are due on <font color="#CC0000">February 25th at 23:55</font>.\n</p>\n<p align="justify">The aim of this coursework is for you to obtain a working understanding of advanced global illumination, Monte-Carlo methods and the rendering equation. You will take a working ray tracer and modify it to produce a working path integral solution to the rendering equation: a path tracer.</p>\n\n<p align="justify">This website, along with these <a href="./archive/2012/cw3/notes.ppt">notes</a>, describes your task and attempts to provide the information and references you will need to complete the coursework. You will find it difficult to complete this coursework without delving into the literature. Fortunately, there\'s a lot of good material around. See what <a href="http://pharr.org/matt/">Matt Pharr</a> would recommend as <a href="./archive/2012/cw3/readinglist/readinglist.php">suggested reading</a>. The notes cover the essential aspects of the coursework and collect the equations you will need in a single place. They cannot replace the papers entirely but we recommend you start with them.</p>\n            \n<p align="justify">If you have any questions, please email:\n<address><script type="text/javascript">hiddenemail(\'cs.ucl.ac.uk\',\'f.pece\')</script>\n<noscript>enable java script to see my email address</noscript></address>\n\n<hr>\n<H3>Tasks</H3>\n\n<OL start="1" type="1">\n <LI>A crucial difference between a path tracer and a ray tracer is that a path tracer must shoot\n     many rays per pixel, since it is potentially sampling difficult integrals\n     over the area of the pixel. Extend the ray tracer to shoot N rays through\n     each pixel using jittering and stratification. <b>Why does the one ray version have salt-and-pepper noise? How could you make the sampling adaptive?</b><BR>\n     <I>Function:</I>&nbsp;&nbsp;<SPAN style="font-size:10.0pt;font-family:Courier">LitScene::renderPixel</SPAN><BR>\n     <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10%\n </LI><br>\n <LI>Traditional ray tracing\n     typically only supports point light sources; however, these are physically\n     implausible and cause images to exhibit hard shadows. One of the hallmarks\n     of path tracing is that it correctly accounts for umbras and penumbras due\n     to area light sources. Modify the direct lighting calculations to add\n     support for area light sources. As an example, sphere sampling is given in <SPAN style="font-size:10.0pt;font-family:Courier">Sphere::sample</SPAN>. You need to add\n     polygon sampling to <SPAN style="font-size:10.0pt;font-family:Courier">Polygon::sample</SPAN>, i.e.,\n     you will need to add sampling for triangular and rectangular polygons. Use <a href="./archive/2012/cw3/readinglist/shirley__MC_techniques_for_direct_lighting__tog96.pdf">this paper</a> as a reading reference. <b>Note:</b> \nThe Shirley paper has a typo for the PDF expressions for \n\t rectangular and triangular luminaries. Refer to the notes for the correct formulation. <b> How could you add support for general polygon luminaries?</b><br>\n     <I>Function:</I>&nbsp;&nbsp;<SPAN style="font-size:10.0pt;font-family:Courier">Polygon::sample</SPAN><BR>\n     <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15% for triangle and quadrilateral sampling\n </LI><br>\n <LI>Add support for sampling a\n     BRDF. When a surface is struck by a path a reflected ray along with the\n     probability of that ray must be generated in order to continue the path.\n     Lambertian (diffuse) BRDF sampling is given in <SPAN style="font-size:\n     10.0pt;font-family:Courier">lambertianBRDF::reflection</SPAN>, you need to add modified\n     Phong BRDF sampling to <SPAN style="font-size:10.0pt;font-family:Courier">phongBRDF::reflection</SPAN>\n     (see this <a href="./archive/2012/cw3/readinglist/lafortune__modified_phong__1994.pdf">paper</a>).\n     Modified Phong sampling has both diffuse and specular parts. A sample\n     is randomly taken (weighted by the diffuse and specular coefficients) from\n     either the diffuse part (as in <SPAN style="font-size:10.0pt;font-family:Courier">lambertianBRDF::reflection</SPAN>)\n     or from within the specular lobe. <b>Note:</b> y and z are flipped between the notes and the code. Pay attention to the local/world normal transformation, and where the normal is for specular rays.<br>\n     <I>Function:</I>&nbsp;&nbsp;<SPAN style="font-size:10.0pt;font-family:Courier">phongBRDF::reflection</span><BR>\n     <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20% for modified Phong reflection\n </LI><br>\n <LI>Add support for evaluating\n     the BRDFs at a surface point. When the path has terminated, the amount of\n     radiance reflected back towards the viewer at each surface interaction\n     must be evaluated. BRDF evaluation for a Lambertian (diffuse) material is\n     given in <SPAN style="font-size:10.0pt;font-family:Courier">lambertianBRDF::brdf</SPAN>\n     and you need to add BRDF evaluation for a modified Phong BRDF in <SPAN style="font-size:10.0pt;font-family:Courier">phongBRDF::brdf</SPAN>. <b>Note:</b> \'n\' in the notes is the \'m_k\' material coefficient in the code. Take care with &#961<sub>d</sub>,&#961<sub>s</sub> and \'m_kd/m_ks\' also.<BR>\n     <I>Function:</I>&nbsp;&nbsp;<SPAN style="font-size:10.0pt;font-family:Courier">phongBRDF::brdf</SPAN><BR>\n     <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20% for modified Phong BRDF\n </LI><br>\n <LI>Put it all together to form\n     paths that sample all the integrals; pixels, direct lighting and BRDFs.<BR>\n     <I>Function:</I>&nbsp;&nbsp;<SPAN style="font-size:10.0pt;font-family:Courier">LitScene::tracePath</SPAN><BR>\n     <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20%\n </LI><br>\n <LI>Add unbiased path termination (Russian roulette) (see this <a href="./archive/2012/cw3/readinglist/Arvo_J__Particle_Transport_and_Image_Synthesis_1990.pdf">paper</a>) OR apply importance sampling to another integral beyond \nthe Phong BRDF (explore this <a href="http://sites.google.com/site/isrendering/">SIGGRAPH course</a> for inspiration). <b>For whichever option you choose to implement, describe how the other could be implemented.</b><br>\n     <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5%\n </LI><br>\n <LI>Make your own\n     scene. Marks will be given for scenes which demonstrate the advantages/disadvantages of path tracing.<br>\n\t <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10%\n <br><br>\n     \n </LI><br>\n <LI>The report: Create a zip file containing a short PDF report that details exactly what you have done and how you have done it. Please include result images for each part that you have completed. Please also comment your code changes and include the code in the zip file. Be sure to answer any questions that are in bold. Submit to Moodle by <b>25th February at 23:55</b>.\n</OL>\n<hr>\n<H3>Code</H3>\n\n<P>The ray tracing framework code is available <A href="./archive/2012/cw3/amraPathTracer.zip">here</A> ( <a href="./archive/2012/cw3/GMmatlibd.lib"><b>DOWNLOAD UPDATED DEBUG LIBRARY HERE</b></a>\nand <a href="./archive/2012/cw3/GMmatlib.lib"><b>DOWNLOAD UPDATED RELEASE LIBRARY HERE</b></a>).\nIt is set up to work correctly in Visual Studio, and we strongly recommend that you complete the coursework using this setup.\nDownload and extract the zip, and open \'net2005/cw2.sln\'. If you are using Visual Studio 2008/2010, it may ask to convert \nthe solution file - let it do this. \nThe code can be compiled by pressing \'F7\', or using the \'Build\' menu. \nDepending on which mode you compiled, you will now have a \'pathtracer.exe\' in either \'net2005/Release\' or\n\'net2005/Debug\'. If you don\'t know about Release/Debug modes and what they do,\nyou can choose either one (the Release mode one will run significantly faster).\nThe application takes one argument: the filename of the scene you wish to\nrender. You can call this from the command line, or by changing the \'Command Arguments\' field in the Debugging section of the project Properties page. \nThe different scene files are stored in the \'scenes\' directory, and should be passed in as relative paths (e.g., ../scenes/touchingSpheres.dat). To test the framework, run the app with <SPAN style="font-size:10.0pt;font-family:Courier">touchingSpheres.dat</SPAN>\nand you should see something like this:</P>\n\n<P><IMG src="./archive/2012/cw3/direct_touchingspheres_1_ray.bmp"></P>\n\n<P>In the code, there is one file (solution.cpp) containing a collection of empty functions that you need to fill in. Pressing \'s\' will capture a screenshot (to the working directory).</P>\n\n<P>There are 2 variables in <SPAN style="font-size:10.0pt;font-family:Courier">mainray.cpp</SPAN>\nthat you will need to adjust: <SPAN style="font-size:10.0pt;font-family:Courier">N_RAYS_PER_PIXEL</SPAN> and\n<SPAN style="font-size:10.0pt;font-family:Courier">DISPLAY_SCALE</SPAN>. Use the first to adjust\nthe number of rays per pixel, and the second to adjust the radiance scaling (to globally modify the brightness).</P>\n\n<P>HTML documentation of the code is available <A href="./archive/2012/cw3/html">here</A>.</P>\n\n<H4>Algorithm flow:</H4>\n\n<P>The main function uses the GLUT idle loop to perform the path tracing. The\nidle loop will call <SPAN style="font-size:10.0pt;font-family:Courier">LitScene::renderPixel</SPAN> once\nfor each pixel on the camera image plane. <SPAN style="font-size:10.0pt;font-family:Courier">LitScene::renderPixel</SPAN> \nshould in turn generate a number of rays (your job!) and call <SPAN style="font-size:10.0pt;font-family:Courier">LitScene::tracePath</SPAN> \nfor each ray. In the <SPAN style="font-size:10.0pt;font-family:Courier">LitScene::tracePath</SPAN> you can use the BRDF\nreflection functions you\'ve implemented to sample the radiance over the\nhemisphere for surface points. Direct lighting evaluations should be performed\nwith your polygon and sphere sampling functions, and BRDFs evaluated with the\nBRDF functions you\'ll also write. All the surface properties you need are already\nloaded into the BRDF object attached to each sphere or polygon. In order to\naccess the BRDF for a given object call this: <SPAN style="font-size:10.0pt;font-family:Courier">Object-&gt;brdf()</SPAN>\nThis will give you a pointer to a BRDF object (see brdf.h). Pointers to area\nlight sources are stored in an array in the LitScene class: <SPAN style="font-size:10.0pt;font-family:Courier">areaLightAt(i)</SPAN> will give you a pointer to an\narea light object (see litscene.h). Area light objects are really just\nordinary sphere or polygon objects.</P>\n\n<P>We have supplied a <SPAN style="font-size:10.0pt;font-family:Courier">LitScene::tracePath</SPAN>\nfunction which performs direct lighting only. This can be used to test that\nyour pixel sampling and area light source sampling works correctly.</P>\n\n<P>The provided framework loads scene files for you, and initialises and stores material properties. We \nalso provide a set of scenes for you upon which to test your path tracer as you progress towards the final solution.</P>\n\n<hr>\n<H3>Our results - stratified and jittered sampling</H3>\n\n<TABLE class="MsoNormalTable" border="0" cellspacing="4" cellpadding="0" width="100%" style="width:100.0%;mso-cellspacing:3.0pt;mso-padding-alt:0cm 0cm 0cm 0cm">\n <TBODY>\n <TR style="mso-yfti-irow:1">\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" id="_x0000_i1027" src="./archive/2012/cw3/direct_touchingspheres_stratjit_1_ray.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" id="_x0000_i1028" src="./archive/2012/cw3/direct_touchingspheres_stratjit_64_rays.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:2;mso-yfti-lastrow:yes">\n  <TD width="25%" valign="top" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  touchingSpheres.dat (1 ray per pixel)\n  </TD>\n  <TD width="25%" valign="top" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  touchingSpheres.dat (64 rays per pixel)\n  </TD>\n </TR>\n</TBODY></TABLE>\n\n<H3>Our results - direct illumination</H3>\n\n<TABLE class="MsoNormalTable" border="0" cellspacing="4" cellpadding="0" width="100%" style="width:100.0%;mso-cellspacing:3.0pt;mso-padding-alt:0cm 0cm 0cm 0cm">\n <TBODY><TR style="mso-yfti-irow:0">\n  <TD width="100%" colspan="5" style="width:100.0%;padding:0cm 0cm 0cm 0cm">\n  Direct lighting examples, no indirect lighting sampled, good for testing (<SPAN style="font-size:10.0pt;font-family:Courier">#define MAX_PATH_BOUNCES 1</SPAN>). 64 rays per pixel, stratified and jittered.</P>\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:1;mso-row-margin-right:83.5pt">\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1029" src="./archive/2012/cw3/direct_touchingspheres_stratjit_64_rays.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1030" src="./archive/2012/cw3/Cornell_RectLight.jpg">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1031" src="./archive/2012/cw3/Cornell_TriLight.jpg">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1032" src="./archive/2012/cw3/Cornell_SphereLight.jpg">\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:2;mso-yfti-lastrow:yes;mso-row-margin-right:83.5pt">\n  <TD width="25%" valign="top" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  touchingSpheres.dat\n  </TD>\n  <TD width="25%" valign="top" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  Cornell_RectLight.dat\n  </TD>\n  <TD width="25%" valign="top" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  Cornell_TriLight.dat\n  </TD>\n  <TD width="25%" valign="top" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  Cornell_SphereLight.dat\n  </TD>\n </TR>\n</TBODY></TABLE>\n\n<H3>Our results - diffuse</H3>\n\n<TABLE class="MsoNormalTable" border="0" cellspacing="4" cellpadding="0" width="100%" style="width:100.0%;mso-cellspacing:3.0pt;mso-padding-alt:0cm 0cm 0cm 0cm">\n <TBODY><TR style="mso-yfti-irow:0">\n  <TD width="100%" colspan="4" style="width:100.0%;padding:0cm 0cm 0cm 0cm">\n  Diffuse scene with square area light source (rectLightCornell.dat).</P>\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:1">\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1033" src="./archive/2012/cw3/diffuse_1ray.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1034" src="./archive/2012/cw3/diffuse_4ray.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1035" src="./archive/2012/cw3/diffuse_64ray.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1036" src="./archive/2012/cw3/diffuse_1024ray.bmp">\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:2;mso-yfti-lastrow:yes">\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  1 ray per pixel </P>\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  4 rays per pixel </P>\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  64 rays per pixel </P>\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  1024 rays per pixel</P>\n  </TD>\n </TR>\n</TBODY></TABLE>\n\n<P>Notice the soft shadows and colour bleeding onto the sphere and box.</P>\n\n<TABLE class="MsoNormalTable" border="0" cellspacing="4" cellpadding="0" width="100%" style="width:100.0%;mso-cellspacing:3.0pt;mso-padding-alt:0cm 0cm 0cm 0cm">\n <TBODY><TR style="mso-yfti-irow:0">\n  <TD width="100%" colspan="4" style="width:100.0%;padding:0cm 0cm 0cm 0cm">\n  Diffuse scene with spherical area light source (sphereLightCornell.dat).</P>\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:1">\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1037" src="./archive/2012/cw3/diffuse_1ray_sphere.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1038" src="./archive/2012/cw3/diffuse_4ray_sphere.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1039" src="./archive/2012/cw3/diffuse_64ray_sphere.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1040" src="./archive/2012/cw3/diffuse_1024ray_sphere.bmp">\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:2;mso-yfti-lastrow:yes">\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  1 ray per pixel\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  4 rays per pixel\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  64 rays per pixel\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  1024 rays per pixel\n  </TD>\n </TR>\n</TBODY></TABLE>\n\n<P>The noise is worse sampling the spherical emitter, probably because the dot\nproduct of the incident ray (sampling the emitter) with the surface normal of\nthe sphere varies more than is the case with the flat polygonal emitter.</P>\n\n<H3>Our results - modified Phong</H3>\n\n<TABLE class="MsoNormalTable" border="0" cellspacing="4" cellpadding="0" width="100%" style="width:100.0%;mso-cellspacing:3.0pt;mso-padding-alt:0cm 0cm 0cm 0cm">\n <TBODY><TR style="mso-yfti-irow:0">\n  <TD width="100%" colspan="4" style="width:100.0%;padding:0cm 0cm 0cm 0cm">\n  Specular/Diffuse scene with rectangular area light source (phong.dat).\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:1">\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1041" src="./archive/2012/cw3/phong_1_paths.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1042" src="./archive/2012/cw3/phong_4_paths.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1043" src="./archive/2012/cw3/phong_64_paths.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1044" src="./archive/2012/cw3/phong_1024_paths.bmp">\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:2;mso-yfti-lastrow:yes">\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  1 ray per pixel\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  4 rays per pixel\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  64 rays per pixel\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  1024 rays per pixel\n  </TD>\n </TR>\n</TBODY></TABLE>\n\n<P>&nbsp;</P>\n\n<TABLE class="MsoNormalTable" border="0" cellspacing="4" cellpadding="0" width="100%" style="width:100.0%;mso-cellspacing:3.0pt;mso-padding-alt:0cm 0cm 0cm 0cm">\n <TBODY><TR style="mso-yfti-irow:0">\n  <TD width="100%" colspan="4" style="width:100.0%;padding:0cm 0cm 0cm 0cm">\n  Specular/Diffuse scene with rectangular area light source (phonggloss.dat)\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:1">\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1045" src="./archive/2012/cw3/phonggloss_1_paths.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1046" src="./archive/2012/cw3/phonggloss_4_paths.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1047" src="./archive/2012/cw3/phonggloss_64_paths.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i1048" src="./archive/2012/cw3/phonggloss_1024_paths.bmp">\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:2;mso-yfti-lastrow:yes">\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  1 ray per pixel\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  4 rays per pixel\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  64 rays per pixel\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  1024 rays per pixel\n  </TD>\n </TR>\n</TBODY></TABLE>\n\n</p>\n\n</tr>\n</table>\n\n<p>\n\n<table width="100%" cellpadding=6 cellspacing=1 bgcolor="#a0a0b0" >\n<tr bgcolor="#e8e8f0">\n      <th align=left><font size=\\"+2\\">Coursework 3:&nbsp; Particle Simulation and Boids </font></th>\n</tr>\n<tr bgcolor="#ffffff"> <td> \n<p>\nAssignment on March 11th. Submissions are due on <font color="#CC0000">March 25th at 23:55</font>. Electronic submission through Moodle. The report has to be in PDF format. Do <b>not</b> upload other document formats, such as Microsoft Word or Open Office. \n</p>\n<p>Please refer to the <a href="./2013/cw3/coursework3.pdf">coursework description as PDF</a> and download the corresponding <a href="./2013/cw3/cw3-src.zip">code framework</a>.</p> \n<p>\n<font color="#CC0000">UPDATES:</font><br>\nYou can find more informations about Boids and Flocks at the following links:\n<ul>\n<li><a href="http://www.red3d.com/cwr/boids/"> Boids - Background and Update (Craig W. Reynolds)</a></li>\n<li><a href="http://www.cs.toronto.edu/~dt/siggraph97-course/cwr87/">Flocks, Herds, and Schools: A Distributed Behavioral Model (Craig W. Reynolds)</a></li>\n<li><a href="http://www.red3d.com/cwr/nobump/nobump.html">Not Bumping Into Things - Notes on "obstacle avoidance" for the course on Physically Based Modeling at SIGGRAPH 88 (Craig W. Reynolds)</a></li>\n</ul>\n</p>\n</td></tr>\n</table>\n\n    <p/>\n    <address><script type="text/javascript">hiddenemail(\'cs.ucl.ac.uk\',\'t.weyrich\')</script>\n      <noscript>enable java script to see my email address</noscript></address>\n  </body>\n</html>\n',
 'pid': 283,
 'url': 'http://web4.cs.ucl.ac.uk/teaching/4074/coursework.php'}
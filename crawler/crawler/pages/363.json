{'html': '#include "camera_gl.h"\n\n#include "fileobject.h"\n\n\n\n\n#include <GL/glut.h>\n\n/*number of houses in street*/\n#define MAXHOUSE 20\n\n/*number of streets*/\n#define MAXSTREET 2\n\nstatic FILE *fp;\n\nstatic GLint Height;\t\t/*height of window*/\n\nstatic Camera_GL *TheCamera;\nstatic GObject *groundObj;\t/*root of the entire hierarchy*/\n\nstatic GLint XC, YC;\t\t/*current mouse position*/\nshort Move = 0;\nshort Rotate = 0;\n\n\nenum {\n\n\tM_PLANAR,\n\n\t\tM_FASTER,\n\n\t\tM_SLOWER,\n\n\t\tM_RFASTER,\n\n\t\tM_RSLOWER\n\n};\n\n\nint usePlanarConstraint = 1;\n\ndouble velocity = 0.05;\n\ndouble angularVel = 0.005;\n\n\n\n\nstatic void moveVRP(void)\n/*move the VRP along the VPN*/\n{\n\tVector3D n;\n\tPoint3D vrp;\n\t\n\t\n\tvrp = TheCamera->vrp;\n\t\n\t/*normalise the vpn - pity this happens also in camera code*/\n\tnormaliseVector3D(&TheCamera->vpn,&n);\n\t\n\tvrp.x += (velocity*n.x)*Move;\n\tvrp.y += (velocity*n.y)*Move;\n\n\tif (!usePlanarConstraint) {\n\n\t\tvrp.z += (velocity*n.z)*Move;\n\n\t}\n\n\t\n\tsetVRP_GL(TheCamera,vrp.x,vrp.y,vrp.z);\n}\n\n\nstatic void rotateVPN(int x, int y)\n\n{\n\n\tdouble dx, dy; /*change in mouse position*/\n\n\tdouble nx,ny,nz; /*new vpn*/\n\n\tRotationMatrix r;\n\n\t/*trial and error value affecting angular velocity*/\n\n\t\n\n\t/*difference between old and new coordinates*/\n\n\tdx = angularVel*(x - XC);\n\n\tdy = angularVel*((Height-y)- YC);\n\n\t\n\n\tXC = x;\n\n\tYC = Height-y;\n\n\t\n\n\t/*treat (dx,dy,1) as the new offset VPN, expressed in VC*/\n\n\t/*transform back to WC, using transpose of RotationMatrix*/\n\n\tr = TheCamera->R;\n\n\tnx = r.m[0][0]*dx + r.m[0][1]*dy + r.m[0][2];\n\n\tny = r.m[1][0]*dx + r.m[1][1]*dy + r.m[1][2];\n\n\tnz = r.m[2][0]*dx + r.m[2][1]*dy + r.m[2][2];\n\n\t\n\n\tsetVPN_GL(TheCamera,nx,ny,nz);\n\n}\n\n\n\nstatic void idle(void)\n\n/*if nothing else happening*/\n\n{\n\n\tif(Move!=0) {\n\n\t\tmoveVRP();\n\n\t\tclickView_GL(TheCamera);\n\n\t\t\n\n\t\t/*force a call to display*/\n\n\t\tglutPostRedisplay();\n\n\t}\n\n}\n\n\n\nstatic void mouseButton(int button, int state, int x, int y)\n{\n\tif(button==GLUT_LEFT_BUTTON){\n\t\tXC = x;\n\t\tYC = Height - y;\n\t\tif(state==GLUT_DOWN) Rotate = 1;\n\t\telse Rotate = 0;\n\t}\t\n\n\t\n\tif(button==GLUT_RIGHT_BUTTON){\n\t\tif(state==GLUT_DOWN) Move = 1;\n\t\telse Move = 0;\n\t}\n}\n\n\nstatic void mouseMotion(int x, int y)\n{\n\n\t\n\tif(Rotate){/*for left button*/\n\t\trotateVPN(x,y);\n\t}\n\t\n\tif(Move!=0){/*for right button*/\n\t\tmoveVRP();\n\t}\n\t\n\tclickView_GL(TheCamera);\n\t\n\t/*force a call to display*/\n\tglutPostRedisplay();\n}\n\n\n\nstatic void createMainStreet(void)\n{\n\tFaceArray *facearray;\n\tGObject *cubeObj,*roofObj, *houseObj[MAXHOUSE],*streetObj[MAXSTREET];\n\tMatrix m;\n\tint i;\n\t\n\t/*create a FaceArray large enough to hold all polygons in the scene*/\n\tfacearray = newFaceArray(1024);\n\t\n\t/*read a ground plane - has max two children*/\n\tgroundObj = readObjectFromFile("../Data/plane.dat",facearray,2);\n\t\n\t/*cube has max two children child*/\n\tcubeObj = readObjectFromFile("../Data/house.dat",facearray,2);\t\n\t\n\t/*has no children*/\n\troofObj = readObjectFromFile("../Data/roof.dat",facearray,0);\n\t\n\t/*add the cube as a child to the ground*/\n\taddChildToObject(groundObj,cubeObj);\n\t\n\t/*add the roof as a child to the cube*/\n\taddChildToObject(cubeObj,roofObj);\n\t\n\t/*set local matrix of roof to be on top of cube*/\n\tsetTranslationMatrix(m,0.0,0.0,1.0);\n\tsetLTMOfObject(roofObj,m);\n\t/*now the cube and roof define a house*/\n\t\n\t/*make a hierarchy where each house has a child which is \n\tthe next house further down the street*/\n\thouseObj[0] = cubeObj;\n\tsetTranslationMatrix(m,0.0,3.0,0.0);\n\t\n\tfor(i=1;i<MAXHOUSE;++i){\n\t\thouseObj[i] = deepCloneObject(houseObj[i-1]);\n\t\taddChildToObject(houseObj[i-1],houseObj[i]);\n\t\tputLTMOfObject(houseObj[i],m);\n\t}\n\t\n\t/*now recurse through whole structure to set the LTMs properly*/\n\t\n\t/*set the local matrix of the cube to be shifted to the right*/\n\tsetTranslationMatrix(m,2.0,0.0,0.0);\n\tsetLTMOfObject(houseObj[0],m);\n\t\n\t/*make the streets*/\n\tstreetObj[0] = houseObj[0];\n\tstreetObj[1] = deepCloneObject(houseObj[0]);\n\t\n\taddChildToObject(groundObj,streetObj[1]);\n\tsetTranslationMatrix(m,-2.0,0.0,0.0);\n\tsetLTMOfObject(streetObj[1],m);\n}\n\nstatic void display ()\n{\n    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);\n    displayObjectTree_GL(groundObj);\n    glutSwapBuffers();\n}\n\n\nstatic void reshape(int width, int height)\n{ \t\n\t\n\tsetCOP_GL(TheCamera,0.0,0.0,-1.0);\n\tsetVPDistance_GL(TheCamera,0.0);\n\tsetClipPlanes_GL(TheCamera,-0.9,100.0);\n\tsetVPWindow_GL(TheCamera,-0.5,0.5,-0.5,0.5);\n\t\n\tclickProject_GL(TheCamera);\n\t\n\tglViewport (0, 0, width, height); /*define the viewport*/\n}\n\nstatic void initialise(void) \n{\n\t\n\tGLfloat light_diffuse[] = {1.0,1.0,1.0,1.0};\n\tGLfloat light_specular[] = {1.0,1.0,1.0,1.0};\n\tGLfloat light_position[] = {0.5,1.0,1.0,0.0};\n\t\n\t\n\t/*GL_FLAT or GL_SMOOTH*/\t\n\tglShadeModel (GL_FLAT);\n    \n\t/*set the background (clear) Color to white*/\n\tglClearColor(1.0,1.0,1.0,0.0);\n\t\n\t/*enable normalisation*/\n\tglEnable(GL_NORMALIZE);\n\tglEnable(GL_DEPTH_TEST);\n\t\n    \n\t/*set the depth buffer for clearing*/\n\tglClearDepth(1.0);\n\t\n\t/*enable lighting*/\n\tglEnable(GL_LIGHTING);\n\tglEnable(GL_LIGHT0);\n\tglLightfv(GL_LIGHT0,GL_DIFFUSE,light_diffuse);\n\tglLightfv(GL_LIGHT0,GL_SPECULAR,light_specular);\n\t\n\t/*initialise the camera*/\n\tTheCamera = newCamera_GL();\n\tsetVRP_GL(TheCamera,0.0,-5.0,1.0);\n\tsetVPN_GL(TheCamera,0.0,1.0,-0.2);\n\tsetVUV_GL(TheCamera,0.0,0.0,1.0);\n\n\tsetCOP_GL(TheCamera,0.0,0.0,-1.0);\n\n\tsetVPDistance_GL(TheCamera,0.0);\n\n\tsetClipPlanes_GL(TheCamera,-0.9,100.0);\n\n\tsetVPWindow_GL(TheCamera,-0.5,0.5,-0.5,0.5);\n\n\n\tclick_GL(TheCamera);\n\t\n\tglPushMatrix();\n\tglLoadIdentity();\n\tglLightfv(GL_LIGHT0,GL_POSITION,light_position);\n\tglPopMatrix();\n\t\n\t/*create the scene*/\n\tcreateMainStreet();\n}\n\n\n\n\n\n\nstatic void keyboard(unsigned char c, int x, int y)\n\n\n\n{\n\n\tswitch (c) {\n\n\tcase 27:\n\n\t\texit(0);\n\n\t\treturn;\n\n\t}\n\n}\n\n\n\nstatic void specialDown(int key, int x, int y)\n\n{\n\n\tswitch (key){\n\n\tcase GLUT_KEY_UP:\n\n\t\tMove = 1;\n\n\t\tbreak;\n\n\tcase GLUT_KEY_DOWN:\n\n\t\tMove = -1;\n\n\t\tbreak;\n\n\t\t\n\n\t}\n\n}\n\n\n\n\n\nstatic void specialUp(int key, int x, int y)\n\n{\n\n\tswitch (key) {\n\n\tcase GLUT_KEY_UP:\n\n\t\tMove = 0;\n\n\t\tbreak;\n\n\tcase GLUT_KEY_DOWN:\n\n\t\tMove = 0;\n\n\t\tbreak;\n\n\t\t\n\n\t}\n\n}\n\nvoid menu(int item)\n\n{\n\n\tswitch (item) {\n\n\t\t\n\n\tcase M_PLANAR:\n\n\t\tusePlanarConstraint = 1 - usePlanarConstraint;\n\n\t\tbreak;\n\n    case M_FASTER:\n\n\t\tvelocity*=1.5;\n\n\t\tbreak;\n\n\tcase M_SLOWER:\n\n\t\tvelocity*=0.5;\n\n\t\tbreak;\n\n    case M_RFASTER:\n\n\t\tangularVel*=1.5;\n\n\t\tbreak;\n\n\tcase M_RSLOWER:\n\n\t\tangularVel*=0.5;\n\n\t\tbreak;\n\n\t}\n\n\tglutPostRedisplay();\n\n}\n\n\n\nint main(int argc, char** argv)\n{\t\n\tint window;\n\t\n\tglutInit(&argc,argv);\n\t\n\tglutInitWindowSize(500,500);\n\t\n\t\n\t/*record the window height*/\n\tHeight = 500;\n\t\n\tglutInitDisplayMode(GLUT_RGBA|GLUT_DOUBLE|GLUT_DEPTH);\n\t\n\twindow = glutCreateWindow("Mainstreet");\n\tglutSetWindow(window);\n\t\n\tinitialise();\n\t\n\t/*register callbacks*/\n\tglutIdleFunc(idle);\n\n\tglutDisplayFunc(display); /*display function*/\n\tglutReshapeFunc(reshape);\n\tglutMouseFunc(mouseButton);\n\tglutMotionFunc(mouseMotion);\n\tglutKeyboardFunc(keyboard);\n\n\tglutSpecialFunc(specialDown);\n\n\tglutSpecialUpFunc(specialUp);\n\n\tglutIdleFunc(idle);\n\tglutCreateMenu(menu);\n\n\tglutAddMenuEntry("Toggle planar constraint", M_PLANAR);\n\n\tglutAddMenuEntry("Move Faster", M_FASTER);\n\n\tglutAddMenuEntry("Move Slower", M_SLOWER);\n\n\tglutAddMenuEntry("Rotate Faster", M_RFASTER);\n\n\tglutAddMenuEntry("Rotate Slower", M_RSLOWER);\n\n\tglutAttachMenu(GLUT_RIGHT_BUTTON);\n\n\t\n\tglutMainLoop();\n}\n',
 'pid': 363,
 'url': 'http://www0.cs.ucl.ac.uk/staff/A.Steed/book_tmp/CGVE/code/Lib3D1.0/mainstreetiglut.c'}
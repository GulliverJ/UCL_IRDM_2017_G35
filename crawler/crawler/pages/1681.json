{'html': b'<html>\n<head>\n<title>File Lambda.ML (Isabelle99-1: October 2000)'
         b'</title>\n</head>\n\n<body>\n<h1>File Lambda.ML</h1>\n\n<hr>\n<pre>'
         b'(*  Title:      Lambda.ML\n    Author:     James Brotherston / Re'
         b'ne Vestergaard\n    Revised:\t24th July, 2000\n\n- Proposition of Re'
         b'naming Sanity (plus auxiliary lemma)\n- Proof of _[_:=_] = _&lt;_'
         b':=_&gt; when substitution is enabled\n- plus a host of useful lem'
         b'mas linking the notions of capturing and free \n  variables in a '
         b'term under substitution\n\n*)\n\n\n(* Proposition of Renaming San'
         b'ity and lemmas *)\n\nGoal "y:(Capt x e) --&gt; x:FV(e)"; \nby(induc'
         b't_tac "e" 1);\nby(Auto_tac);\nqed "aux_renaming_lemma_1";\nAddsimps'
         b' [aux_renaming_lemma_1];\n\n\nGoal "e[x:=Var x] = e";\nby(induct_tac'
         b' "e" 1);\nby(Auto_tac);\nqed "renaming_sanity_1";\n\n\nGoal "x~:F'
         b'V(e) --&gt; (e[x:=e\'] = e)";\nby(induct_tac "e" 1);\nby(Auto_tac);'
         b'\nqed "renaming_sanity_2";\n\n\nGoal "((x~:FV(e\')) &amp; ((Capt '
         b'x e) Int FV(e\')) = {}) --&gt; (x~:FV(e[x:=e\']))";\nby(induct_tac '
         b'"e" 1);\nby(Auto_tac);\nqed "renaming_sanity_3";\n\n\n(* the more'
         b' user-friendly version of the above *)\nGoal "[|x~:FV(e\'); ((Capt'
         b' x e) Int FV(e\')) = {}|] ==&gt; x~:FV(e[x:=e\'])";\nby(rtac (renam'
         b'ing_sanity_3 RS mp) 1);\nby(Fast_tac 1);\nqed "renaming_sanity_3";'
         b'\n\n\nGoal "(y~:FV(e)) --&gt; (e[x:=Var y][y:=Var x] = e)";\nby(indu'
         b'ct_tac "e" 1);\nby(Auto_tac);\nqed "renaming_sanity_4";\n\n\nAdds'
         b'imps[renaming_sanity_1, renaming_sanity_2];\n\n\n(* Some useful Cap'
         b't / FV / substitution - type lemmas *)\n\nGoal "[|A&lt;=B; x~:B|] '
         b'==&gt; x~:A";\nby(Blast_tac 1);\nqed "subset_lemma_1";\n\n\nGoal '
         b'"[|A-{x} &lt;= B-{x}; y:A; x~=y|] ==&gt; y:B";\nby(Blast_tac 1);\n'
         b'qed "subset_lemma_2";\n\n\nGoal "y~:FV(e) --&gt; Capt y e = {}";\nby'
         b'(induct_tac "e" 1);\nby(ALLGOALS Full_simp_tac);\nby(Fast_tac 1);\n'
         b'qed "Capt_FV_lemma_1";\n\n\nGoal "y~:BV(e) --&gt; y~:Capt x e";\nby('
         b'induct_tac "e" 1);\nby(Auto_tac);\nqed "Capt_BV_lemma_1";\n\n\nGo'
         b'al "[|(Capt y (Abs z e)) Int FV(e\') = {}; y~=z|] ==&gt; z~:FV(e\''
         b') | y~:FV(e)";\nby(Auto_tac);\nqed "Capt_Int_FV_lemma_1";\n\n\nGo'
         b'al "x:FV(e[y:=e\']) ==&gt; x:FV(e\') | x:FV(e)";\nby(rtac mp 1);\nby'
         b'(atac 2);\nby(induct_tac "e" 1);\nby(Auto_tac);\nqed "FV_subst_lemm'
         b'a_1";\n\n\nGoal "x:FV(e) --&gt; x~=y --&gt; x:FV(e[y:=e\'])";\nby'
         b'(induct_tac "e" 1);\nby(Auto_tac);\nqed "FV_subst_lemma_2";\n\n\n'
         b'Goal "x:FV(e\') ==&gt; x:FV(e) --&gt; x:FV(e[y:=e\'])";\nby(induct_'
         b'tac "e" 1);\nby(ALLGOALS strip_tac);\nby(Auto_tac);\nqed "FV_subst_'
         b'lemma_3";\n\n\nGoal "x:FV(e1) --&gt; y:FV(e2) --&gt; y:FV(e1[x:=e2]'
         b') | e1[x:=e2] = e1";\nby(induct_tac "e1" 1);\nby(ALLGOALS strip_ta'
         b'c);\nby(Asm_full_simp_tac 1);\nby(Asm_full_simp_tac 1);\nby(Auto_ta'
         b'c);\nqed "FV_subst_lemma_4";\n\n\nGoal "A --&gt; B --&gt; C ==&gt; ~'
         b'C --&gt; ~A | ~B";\nby(Blast_tac 1);\nqed "special_contrapositive"'
         b';\n\n\nGoal "x~:FV(e[y:=e\']) ==&gt; x~:FV(e) | x=y";\nby(cut_fac'
         b'ts_tac [(FV_subst_lemma_2 RS special_contrapositive)] 1);\nby(Fas'
         b't_tac 1);\nqed "FV_subst_lemma_5";\n\n\nGoal "x:FV(e\') ==&gt; (C'
         b'apt y e) Int FV(e\') = {} --&gt; y:FV(e) --&gt; x:FV(e[y:=e\'])";\n'
         b'by(induct_tac "e" 1);\nby(ALLGOALS strip_tac);\nby(Auto_tac);\nqed '
         b'"FV_subst_lemma_6";\n\n\nGoal "(Capt x e) &lt;= BV(e)";\nby(induct_t'
         b'ac "e" 1);\nby(Auto_tac);\nqed "capt_in_bound_var";\n\n\nGoal "x:'
         b'BV(e[y:=e\']) ==&gt; x:BV(e) | x:BV(e\')";\nby(rtac mp 1);\nby(atac '
         b'2);\nby(thin_tac "x:BV(e[y:=e\'])" 1);\nby(induct_tac "e" 1);\nby(Au'
         b'to_tac);\nqed "BV_subst_lemma_1";\n\n\nGoal "x~:FV(e) &amp; x~:F'
         b'V(e\') --&gt; x~:FV(e[y:=e\'])";\nby(induct_tac "e" 1);\nby(Asm_simp'
         b'_tac 1);\nby(Asm_simp_tac 1);\nby(strip_tac 1);\nby(Simp_tac 1);\nby'
         b'(resolve_tac [conjI] 1);\nby(resolve_tac [conjI] 2);\nby(ALLGOALS '
         b'strip_tac);\nby(Auto_tac);\nqed "FV_lemma_1";\n\n\nGoal "[|y~:FV('
         b'e); y~=z|] ==&gt; y~:FV(e[x:=Var z])";\nby(rtac (FV_lemma_1 RS mp'
         b') 1);\nby(Asm_simp_tac 1);\nqed "FV_var_subst_lemma_1";\n\n\nGoal'
         b' "y~:BV(e) ==&gt; y~:BV(e[x:=Var z])";\nby(rtac mp 1);\nby(atac 2)'
         b';\nby(thin_tac "y~:BV(e)" 1);\nby(induct_tac "e" 1);\nby(Auto_tac);'
         b'\nqed "BV_var_subst_lemma_1";\n\n\n(* Induction principles for the ('
         b'parallel-) beta side condition *)\n\n\nGoal "Capt y (e1 $ e2) Int A'
         b' = {} ==&gt; Capt y e1 Int A = {} &amp; Capt y e2 Int A = {}";\nb'
         b'y(Auto_tac);\nqed "Capt_induct_1";\n\n\nGoal "(Capt x (e1 $ e2) Un A'
         b') Int B = {} ==&gt; (Capt x e1 Un A) Int B = {} &amp; (Capt x e2 Un '
         b'A) Int B = {}";\nby(Auto_tac);\nqed "Capt_induct_2";\n\n\nGoal "['
         b'|x~=y; Capt y (Abs x e) Int A = {}|] ==&gt; Capt y e Int A = {}"'
         b';\nby(dtac not_sym 1);\nby(Asm_full_simp_tac 1);\nby(case_tac "y:FV'
         b'(e)" 1);\nby(ALLGOALS Asm_full_simp_tac);\nby(Fast_tac 1);\nby(asm_'
         b'simp_tac (simpset() addsimps[Capt_FV_lemma_1]) 1);\nqed "Capt_ind'
         b'uct_3";\n\n\nGoal "[|y~=x; (Capt x (Abs y e) Un A) Int B = {} |] =='
         b'&gt; (Capt x e Un A) Int B = {}";\nby(dtac not_sym 1);\nby(Asm_ful'
         b'l_simp_tac 1);\nby(case_tac "x:FV(e)" 1);\nby(ALLGOALS Asm_full_si'
         b'mp_tac);\nby(Fast_tac 1);\nby(asm_simp_tac (simpset() addsimps[Cap'
         b't_FV_lemma_1]) 1);\nqed "Capt_induct_4";\n\n\nGoal "[|Capt x (Abs y '
         b'(e1 $ e2)) Int A = {}; y~=x|] ==&gt; Capt x (Abs y e1) Int A = {} &a'
         b'mp; Capt x (Abs y e2) Int A = {}";\nby(Auto_tac);\nqed "Capt_induc'
         b't_5";\n\n\nGoal "[|Capt x (Abs y (Abs z e)) Int A = {}; y~=x; z~=x '
         b'|] ==&gt; Capt x (Abs y e) Int A = {}";\nby(Auto_tac);\nqed "Capt_'
         b'induct_6";\n\n\n(* Proof of "sharp" = "normal" substitution under s'
         b'uitable conditions *)\n\n\nGoal "(Capt x e1) Int FV(e2) = {} ==&gt;'
         b' e1[x:=e2] = e1&lt;x:=e2&gt;";\nby(rtac mp 1);\nby(atac 2);\nby(ind'
         b'uct_tac "e1" 1);\nby(ALLGOALS strip_tac);\nby(ALLGOALS Simp_tac);\n'
         b'by(dtac Capt_induct_1 1);\nby(Fast_tac 1);\nby(rtac conjI 1);\nby(A'
         b'LLGOALS strip_tac);\nby(ALLGOALS (fatac Capt_induct_3 1));\nby(ALL'
         b'GOALS (mp_tac));\nby(atac 1);\nby(dtac not_sym 1);\nby(case_tac "x:'
         b'FV(lterm)" 1);\nby(Auto_tac);\nqed "subst_equivalence";\n\n\n\n</p'
         b're>\n<hr>\n\n</body>\n</html>\n',
 'links': [],
 'pid': 1681,
 'url': 'http://www0.cs.ucl.ac.uk/staff/J.Brotherston/confluence_VB/Lambda.ML.html'}
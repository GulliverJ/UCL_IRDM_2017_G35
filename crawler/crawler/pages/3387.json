{'html': b'\n<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">'
         b'\n<html>\n  <head>\n    <title>COMP M074/GV14 &ndash; Coursework</t'
         b'itle>\n    <meta http-equiv="content-type" content="text/html;cha'
         b'rset=iso-8859-1" />\n    <meta name="robots" content="noindex,nof'
         b'ollow,noarchive">\n    <link rel="stylesheet" href="style.css" ty'
         b'pe="text/css" />\n    <script type="text/javascript" src="hiddene'
         b'mail.js"></script>\n  </head>\n\n  <body>\n    <!-- <h1>COMP M074/GV'
         b'14 &ndash; Coursework</h1> -->\n    <h1>Advanced Modelling, Rende'
         b'ring and Animation</h1>\n    <h2>Coursework</h2>\n\n      <a href="'
         b'index.php">Home</a> | <a href="syllabus.php">Syllabus</a> | <a href='
         b'"coursework.php">Course Work</a> | <a href="assessment.php">Assessme'
         b'nt</a>      <p/>\n\n<table width="100%" cellpadding=6 cellspacing='
         b'1 bgcolor="#a0a0b0" >\n<tr bgcolor="#e8e8f0">\n<th align=left><fon'
         b't size=\\"+2\\">coursework 1:&nbsp; GPU Rendering with Shaders in '
         b'OpenGL</font></th>\n</tr>\n<tr bgcolor="#ffffff"> <td> \n\n<p>\nC'
         b'oursework 1 will be assigned on January 23rd. Submissions are due on'
         b' <font color="#CC0000">February 6th at 23:55</font>.\n</p>\n      '
         b'      <p align="justify">The first AMRA coursework will allow you to'
         b' explore GPU rendering with programmable shaders in OpenGL. You shou'
         b'ld have met OpenGL in COMP3080/GV10, and you will be working with co'
         b'de shown in the AMRA lecture slides from weeks 2 and 3. However, fee'
         b'l free to refer to your COMP3080/GV10 notes. This coursework will re'
         b'quire you to use resources we have not given you. You will need to e'
         b'xplore the OpenGL API to find what you need! You are free to complet'
         b'e the tasks using any OpenGL/GLSL functions that you wish, and any c'
         b'omments are only a guide. There are also many resources online to he'
         b'lp you. Each task is worth 20 marks towards a total of 100. Good luc'
         b'k!</p>\n            \n\t\t\t<p align="justify">If you have any qu'
         b'estions, please email:\n\t\t\t<address><script type="text/javascript'
         b'">hiddenemail(\'cs.ucl.ac.uk\',\'f.pece\')</script>\n\t\t\t<noscript'
         b'>enable java script to see my email address</noscript></address>'
         b'\n\t\t\t\n\t\t\t<br /><br />\n            <p align="justify"><u>C'
         b'ode</u></p>\n            <p align="justify">First, download the c'
         b'ode framework from <a href="archive/2012/cw2/amracw0112_v2.zip">here'
         b'</a>, and extract the zip file to a convenient location. You should '
         b'see some c source files (with amracw1.c and amracw1.h), some shader '
         b"source files (.vert and .frag), and some project files. If you're in"
         b" the Windows labs, please open 'vs2008/amracw1/amracw1.sln'; otherwi"
         b'se, there is an included Makefile. Feel free to edit all files as yo'
         b'u wish; amracw1.c contains most of the code that you will change. No'
         b'te that this coursework will not execute in MPEB 4.06, as the graphi'
         b'cs cards are not capable of running programmable shaders.</p>\n  '
         b'          \n            <br />\n\t\t\t<p align="justify"><u>Task '
         b'1:</u></p>\n            <p align="justify">Compile and run the co'
         b"de. <b>NOTE:</b> Change the <i>Working Directory</i> to '../../..'. "
         b'You can find this in Project -> Properties -> Configuration Properti'
         b'es -> Debugging (in the tree to the left). Once running, you should '
         b'see an extruded square bathed in yellow light.</p>\n\t\t\t<img src="'
         b'archive/2012/cw2/initial.png" />\n\t\t\t<p align="justify">Read the '
         b'instructions in the console window and interact with the application'
         b". Notice that when pressing 't', the model disappears. We would like"
         b" 't' to switch between different models so that we may better observ"
         b'e lighting effects.</p>\n\t\t\t\n\t\t\t<p align="justify">Find the d'
         b'isplay call in the code, and fill in the case/switch command so that'
         b" the 't' key switches between the extruded square, a teapot, a spher"
         b'e and a torus. Use the <a href="http://www.opengl.org/documentation/'
         b'specs/glut/spec3/spec3.html">GLUT API</a>  with suitable parameters '
         b'- it is already linked.</p>\n            \n\t\t\t<p align="justif'
         b'y">We would also like to add another light source to the scene, to o'
         b'bserve more complicated lighting interaction. Find where the first l'
         b'ight is setup in the code, and create another light of your choice t'
         b'o illuminate the model. You may need to refer to the OpenGL API docu'
         b'mentation here. Once completed, you should have something that looks'
         b' like this:</p>\n\t\t\t\n\t\t\t<img src="archive/2012/cw2/task1.png"'
         b' /><img src="archive/2012/cw2/task1pp.png" />\n\t\t\t\n\t\t\t<p alig'
         b'n="justify">Pressing \'s\' will switch from using a per-vertex lig'
         b'hting shader (above left) to using a per-pixel lighting shader (abov'
         b'e right). Notice the difference this causes by rotating the object w'
         b'ith the mouse. <b>Why are they different? Under which circumstances '
         b'will these two different lighting techniques look the same?</b> It m'
         b'ay help to experiment with the parameters you use to create the obje'
         b'cts.\n            \n\t\t\t<br />\n            <p align="justify"><'
         b'u>Task 2:</u></p>\n            \n            <p align="justify">We'
         b' would now like to texture our object. Modify the per-vertex and per'
         b'-pixel shaders to apply a texture to the object and light the object'
         b'. Find the code that loads, links, and compiles the shader for the g'
         b'raphics card. Replicate this for your new shader. Note that any erro'
         b'rs in your shader will be written to the console window for easier d'
         b'ebugging.</p>\n\t\t\t\n\t\t\t<p align="justify">ShaderGen is a tool '
         b'from 3DLabs (now defunct) that converts fixed-function OpenGL into G'
         b'LSL vertex and fragment shaders. It is included in the code package '
         b"under the folder 'ShaderGen/bin'. Spend some time exploring ShaderGe"
         b'n to see how texturing can be added to objects and combined with lig'
         b'hting in shader code.</p>\n\t\t\t\n\t\t\t<p align="justify">The func'
         b"tion 'LoadDIBitmap' is provided to load 24bit RGB bitmap textures (l"
         b"ike those included in the 'ShaderGen/textures' folder - note that so"
         b"me of these textures are RGB padded to 32bits - use the 'RGB' varian"
         b'ts of the files if you do not see what you expect). Once loaded, use'
         b' OpenGL calls to upload the texture to the graphics card, set any te'
         b'xture parameters correctly, and bind it for use. <b>Note:</b> Pay sp'
         b'ecial attention to specular highlights!</p>\n            \n\t\t\t'
         b'<p align="justify">Once complete, your code should produce something'
         b' like below. <b>Why do these examples not look realistic?</b></p'
         b'>\n\t\t\t<img src="archive/2012/cw2/task2.png" /><img src="archive/2'
         b'012/cw2/task2pp.png" />\n          \n\t\t\t<br />\n\t\t\t<p align'
         b'="justify"><u>Task 3:</u></p>\n\t\t   \n            <p align="justif'
         b'y">We would now like to make our object very shiny, like chrome, so '
         b'that it reflects the world around it. Currently, by changing materia'
         b'l and light properties, we can generate a shiny highlight, but mater'
         b'ials such as chrome are not accurately represented using these appro'
         b'aches. In COMP3080/GV10, coursework 1 showed how ray tracing could b'
         b'e used to generate such reflections of the world; however, this appr'
         b'oach is expensive for real-time graphics. Instead, we will use envir'
         b'onment mapping.</p>\n\t\t\t\n\t\t\t<p align="justify">Environment ma'
         b'pping approximates the world outside the object using a texture. We '
         b'use a specially formed texture, called a cube-map, which has six-sid'
         b'es. The texture is drawn as if we are inside the object, looking out'
         b' at the world. Then, when we apply it to the object, it looks as if '
         b'it is very shiny, reflecting the world around it.</p>\n\t\t\t\n\t\t'
         b'\t<p align="justify">A cube-map texture is provided in the folder'
         b" 'cubemap'. You should start by drawing these textures to each side "
         b'of a cube, and then drawing this cube around the object and the came'
         b'ra. This provides our outside world. Approach this part of the task '
         b'by first correctly creating a GL_TEXTURE_CUBE_MAP texture out of the'
         b" six-sided cube-map provided. 'draw.c' includes a function to draw a"
         b' cube - make a new function using this example that now draws the cu'
         b'be textured with the cube-map.</p>\n            \n\t\t\t<p align='
         b'"justify">Once that is complete, we now need to generate texture coo'
         b'rdinates to make our cube map appear as if it is the reflection of t'
         b'he world. In Task 2, the texture is fixed to the object during rotat'
         b'ion. With environment mapping for reflection, we want the texture to'
         b' stay fixed while the object rotates - after all, the world is not r'
         b"otating. Start by exploring ShaderGen's TEXTURE COORDINATE SET tab. "
         b"This tab contains options for OpenGL's inbuilt texture coordinate ge"
         b"neration. One of these is just what we're looking for - once you've "
         b'found it, it may help to read up on texture coordinate generation. I'
         b'ntegrate cube-map environment mapping into your shaders.</p>\n\t\t\t'
         b'\n\t\t\t<p align="justify">Once complete, your code should produce s'
         b'omething like the following images:</p>\n\t\t\t<img src="archive/201'
         b'2/cw2/task3.png" /><img src="archive/2012/cw2/task3pp.png" />\n\t\t'
         b'\t\n\t\t\t<p align="justify">The left image still includes per-pi'
         b'xel lighting, but the scene does not look realistic. <b>When using r'
         b'eal-world sourced cube maps, why should we generally not use lightin'
         b'g with environment mapping?</b></p>\n\t\t\t\n\t\t\t<br />\n      '
         b'      <p align="justify"><u>Task 4:</u></p>\n            \n       '
         b'     <p align="justify">We would now like to turn our object to glas'
         b's. When light passes through a transparent material such as glass, s'
         b'ome of the light is reflected and some of the light is refracted. Th'
         b"e Fresnel equations describe this ratio, and Snell's Law defines the"
         b' angle of the refracted ray. You will need to define a refractive in'
         b'dex for your object. Air has a refractive index very close to 1, and'
         b' most glasses have a refractive index around 1.5. Modify your shader'
         b's to implement refraction and make the object look like glass.</'
         b'p>\n\t\t\t\n\t\t\t<p align="justify">Importantly, here we are not co'
         b'ncerned with physically accurate refraction. Given a ray incoming to'
         b' the surface of our object, generate the refracted ray and assume it'
         b' then goes off into the world and is not refracted again (as if the '
         b"ray stays in glass until it reaches 'the world'). To be correct, we "
         b'would again need to reflect/refract the ray when it exits the object'
         b', but you are not required to do this. We can produce something that'
         b' looks convincing by performing just one refraction.</p>\n\t\t\t'
         b'\n\t\t\t<p align="justify">Once complete, your code should produce s'
         b'omething like the following images:</p>\n\t\t\t<img src="archive/201'
         b'2/cw2/task4.png" /><img src="archive/2012/cw2/task4pp.png" />\n\t\t'
         b'\t\n\t\t\t<p align="justify"><b>As this effect is only an approxi'
         b'mation, which of the objects do you think produces the most convinci'
         b'ng glass material? Which do you think produces the least convincing '
         b'glass material? Why?</b></p>\n\t\t\t\n\t\t\t<br />\n\t\t\t<p align="'
         b'justify"><u>Task 5:</u></p>\n\t\t\t\n\t\t\t<p align="justify">What i'
         b'f the refractive index of your object was not consistent? Have you e'
         b'ver peered through an old pane of glass and seen the world distort a'
         b"s you move your head? Implement 'bumpy' refraction to recreate this "
         b'effect (left image). Use an appropriate example to show off this eff'
         b'ect.</p>\n\t\t\t\n\t\t\t<p align="justify">Different wavelengths of '
         b'light are refracted by different amounts, producing dispersion (or c'
         b'hromatic aberrations - right image). <b>How could this effect be imp'
         b'lemented in a shader?</b></p>\n\t\t\t\t\t\t\n\t\t\t<img src="archiv'
         b'e/2012/cw2/task5br.png" /><img src="archive/2012/cw2/task5cd.png" />'
         b'\n\t\t\t\n\t\t\t<p align="justify">Looking at the Venus De Milo insp'
         b'iration video in the references, we can see differences between the '
         b'video and our result. <b>What differences still remain, and how coul'
         b'd these effects be achieved?</b></p>\n\t\t\t\n\t\t\t<br />\n\t\t\t<p'
         b' align="justify"><u>Write-up:</u></p>\n\t\t\t<p align="justify">Plea'
         b'se write a short report on your work, detailing how you solved each '
         b'part of the coursework. Be sure to answer the questions that are in '
         b'bold within this document. Include all relevant code along with scre'
         b'enshots to demonstrate your solution. Make sure that your report sho'
         b'ws examples of all the required simulation effects - this may requir'
         b'e side-by-side comparison shots with highlighting. Assignment on Jan'
         b'uary 23rd. Submissions are due on <font color="#CC0000">Wednesday 6t'
         b'h February at 23:55</font>. Electronic submission through Moodle. Th'
         b'e report has to be in PDF format. Do <b>not</b> upload other documen'
         b't formats, such as Microsoft Word or Open Office.\n\n\t\t\t<br />'
         b'\n\t\t\t<p align="justify"><u>References</u></p>\n\t\t\t<a href="htt'
         b'p://www.opengl.org/sdk/docs/man/">OpenGL 2.1 Reference Documentation'
         b'</a><br>\n\t\t\t<a href="http://mew.cx/glsl_quickref.pdf">GLSL Quick'
         b' Reference Card</a><br>\n\t\t\t<a href="http://web4.cs.ucl.ac.uk/tea'
         b'ching/4074/archive/2011/cw1/hdr_video.wmv">Venus De Milo inspiration'
         b'!</a><br>\n\t\t\t<a href="http://www.humus.name/index.php?page=Textu'
         b'res&&start=0">Many cubemaps!</a>\n\t\t\t<br>\n\t\t\t<p align="justif'
         b'y">Arch cubemap courtesy of Paul Bourke.</p>\n</p>\n</tr>\n</table>'
         b'\n\n<br>\n\n<table width="100%" cellpadding=6 cellspacing=1 bgcolor='
         b'"#a0a0b0" >\n<tr bgcolor="#e8e8f0">\n<th align=left><font size=\\"+'
         b'2\\">Coursework 2:&nbsp; Monte-Carlo Path Tracing</font></th>\n</t'
         b'r>\n<tr bgcolor="#ffffff"> <td> \n\n<p>\nCoursework 2 will be assign'
         b'ed on February 6th. Submissions are due on <font color="#CC0000">Feb'
         b'ruary 25th at 23:55</font>.\n</p>\n<p align="justify">The aim of t'
         b'his coursework is for you to obtain a working understanding of advan'
         b'ced global illumination, Monte-Carlo methods and the rendering equat'
         b'ion. You will take a working ray tracer and modify it to produce a w'
         b'orking path integral solution to the rendering equation: a path trac'
         b'er.</p>\n\n<p align="justify">This website, along with these <a hr'
         b'ef="./archive/2012/cw3/notes.ppt">notes</a>, describes your task and'
         b' attempts to provide the information and references you will need to'
         b' complete the coursework. You will find it difficult to complete thi'
         b's coursework without delving into the literature. Fortunately, there'
         b'\'s a lot of good material around. See what <a href="http://pharr'
         b'.org/matt/">Matt Pharr</a> would recommend as <a href="./archive/201'
         b'2/cw3/readinglist/readinglist.php">suggested reading</a>. The notes '
         b'cover the essential aspects of the coursework and collect the equati'
         b'ons you will need in a single place. They cannot replace the papers '
         b'entirely but we recommend you start with them.</p>\n            \n'
         b'<p align="justify">If you have any questions, please email:\n<add'
         b'ress><script type="text/javascript">hiddenemail(\'cs.ucl.ac.uk\',\''
         b"f.pece')</script>\n<noscript>enable java script to see my email a"
         b'ddress</noscript></address>\n\n<hr>\n<H3>Tasks</H3>\n\n<OL start='
         b'"1" type="1">\n <LI>A crucial difference between a path tracer an'
         b'd a ray tracer is that a path tracer must shoot\n     many rays p'
         b'er pixel, since it is potentially sampling difficult integrals\n '
         b'    over the area of the pixel. Extend the ray tracer to shoot N ray'
         b's through\n     each pixel using jittering and stratification. <b'
         b'>Why does the one ray version have salt-and-pepper noise? How could '
         b'you make the sampling adaptive?</b><BR>\n     <I>Function:</I>&nb'
         b'sp;&nbsp;<SPAN style="font-size:10.0pt;font-family:Courier">LitScene'
         b'::renderPixel</SPAN><BR>\n     <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nb'
         b'sp;&nbsp;&nbsp;10%\n </LI><br>\n <LI>Traditional ray tracing\n     '
         b'typically only supports point light sources; however, these are phys'
         b'ically\n     implausible and cause images to exhibit hard shadows'
         b'. One of the hallmarks\n     of path tracing is that it correctly'
         b' accounts for umbras and penumbras due\n     to area light source'
         b's. Modify the direct lighting calculations to add\n     support f'
         b'or area light sources. As an example, sphere sampling is given in <S'
         b'PAN style="font-size:10.0pt;font-family:Courier">Sphere::sample</SPA'
         b'N>. You need to add\n     polygon sampling to <SPAN style="font-s'
         b'ize:10.0pt;font-family:Courier">Polygon::sample</SPAN>, i.e.,\n  '
         b'   you will need to add sampling for triangular and rectangular poly'
         b'gons. Use <a href="./archive/2012/cw3/readinglist/shirley__MC_techni'
         b'ques_for_direct_lighting__tog96.pdf">this paper</a> as a reading ref'
         b'erence. <b>Note:</b> \nThe Shirley paper has a typo for the PDF e'
         b'xpressions for \n\t rectangular and triangular luminaries. Refer t'
         b'o the notes for the correct formulation. <b> How could you add suppo'
         b'rt for general polygon luminaries?</b><br>\n     <I>Function:</I>'
         b'&nbsp;&nbsp;<SPAN style="font-size:10.0pt;font-family:Courier">Polyg'
         b'on::sample</SPAN><BR>\n     <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;'
         b'&nbsp;&nbsp;15% for triangle and quadrilateral sampling\n </LI><b'
         b'r>\n <LI>Add support for sampling a\n     BRDF. When a surface is '
         b'struck by a path a reflected ray along with the\n     probability'
         b' of that ray must be generated in order to continue the path.\n  '
         b'   Lambertian (diffuse) BRDF sampling is given in <SPAN style="font-'
         b'size:\n     10.0pt;font-family:Courier">lambertianBRDF::reflectio'
         b'n</SPAN>, you need to add modified\n     Phong BRDF sampling to <'
         b'SPAN style="font-size:10.0pt;font-family:Courier">phongBRDF::reflect'
         b'ion</SPAN>\n     (see this <a href="./archive/2012/cw3/readinglis'
         b't/lafortune__modified_phong__1994.pdf">paper</a>).\n     Modified'
         b' Phong sampling has both diffuse and specular parts. A sample\n  '
         b'   is randomly taken (weighted by the diffuse and specular coefficie'
         b'nts) from\n     either the diffuse part (as in <SPAN style="font-'
         b'size:10.0pt;font-family:Courier">lambertianBRDF::reflection</SPA'
         b'N>)\n     or from within the specular lobe. <b>Note:</b> y and z '
         b'are flipped between the notes and the code. Pay attention to the loc'
         b'al/world normal transformation, and where the normal is for specular'
         b' rays.<br>\n     <I>Function:</I>&nbsp;&nbsp;<SPAN style="font-si'
         b'ze:10.0pt;font-family:Courier">phongBRDF::reflection</span><BR>\n'
         b'     <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20% for modifi'
         b'ed Phong reflection\n </LI><br>\n <LI>Add support for evaluating\n '
         b'    the BRDFs at a surface point. When the path has terminated, the '
         b'amount of\n     radiance reflected back towards the viewer at eac'
         b'h surface interaction\n     must be evaluated. BRDF evaluation fo'
         b'r a Lambertian (diffuse) material is\n     given in <SPAN style="'
         b'font-size:10.0pt;font-family:Courier">lambertianBRDF::brdf</SPAN'
         b'>\n     and you need to add BRDF evaluation for a modified Phong '
         b'BRDF in <SPAN style="font-size:10.0pt;font-family:Courier">phongBRDF'
         b"::brdf</SPAN>. <b>Note:</b> 'n' in the notes is the 'm_k' material c"
         b'oefficient in the code. Take care with &#961<sub>d</sub>,&#961<sub>s'
         b"</sub> and 'm_kd/m_ks' also.<BR>\n     <I>Function:</I>&nbsp;&nbs"
         b'p;<SPAN style="font-size:10.0pt;font-family:Courier">phongBRDF::brdf'
         b'</SPAN><BR>\n     <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs'
         b'p;20% for modified Phong BRDF\n </LI><br>\n <LI>Put it all togethe'
         b'r to form\n     paths that sample all the integrals; pixels, dire'
         b'ct lighting and BRDFs.<BR>\n     <I>Function:</I>&nbsp;&nbsp;<SPA'
         b'N style="font-size:10.0pt;font-family:Courier">LitScene::tracePath</'
         b'SPAN><BR>\n     <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
         b'20%\n </LI><br>\n <LI>Add unbiased path termination (Russian roule'
         b'tte) (see this <a href="./archive/2012/cw3/readinglist/Arvo_J__Parti'
         b'cle_Transport_and_Image_Synthesis_1990.pdf">paper</a>) OR apply impo'
         b'rtance sampling to another integral beyond \nthe Phong BRDF (expl'
         b'ore this <a href="http://sites.google.com/site/isrendering/">SIGGRAP'
         b'H course</a> for inspiration). <b>For whichever option you choose to'
         b' implement, describe how the other could be implemented.</b><br>'
         b'\n     <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5%\n </LI>'
         b'<br>\n <LI>Make your own\n     scene. Marks will be given for scen'
         b'es which demonstrate the advantages/disadvantages of path tracing.<b'
         b'r>\n\t <I>Marks:</I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10%\n <br><'
         b'br>\n     \n </LI><br>\n <LI>The report: Create a zip file containi'
         b'ng a short PDF report that details exactly what you have done and ho'
         b'w you have done it. Please include result images for each part that '
         b'you have completed. Please also comment your code changes and includ'
         b'e the code in the zip file. Be sure to answer any questions that are'
         b' in bold. Submit to Moodle by <b>25th February at 23:55</b>.\n</O'
         b'L>\n<hr>\n<H3>Code</H3>\n\n<P>The ray tracing framework code is avai'
         b'lable <A href="./archive/2012/cw3/amraPathTracer.zip">here</A> ( <a '
         b'href="./archive/2012/cw3/GMmatlibd.lib"><b>DOWNLOAD UPDATED DEBUG LI'
         b'BRARY HERE</b></a>\nand <a href="./archive/2012/cw3/GMmatlib.lib"'
         b'><b>DOWNLOAD UPDATED RELEASE LIBRARY HERE</b></a>).\nIt is set up'
         b' to work correctly in Visual Studio, and we strongly recommend that '
         b'you complete the coursework using this setup.\nDownload and extra'
         b"ct the zip, and open 'net2005/cw2.sln'. If you are using Visual Stud"
         b'io 2008/2010, it may ask to convert \nthe solution file - let it '
         b"do this. \nThe code can be compiled by pressing 'F7', or using th"
         b"e 'Build' menu. \nDepending on which mode you compiled, you will "
         b"now have a 'pathtracer.exe' in either 'net2005/Release' or\n'net2"
         b"005/Debug'. If you don't know about Release/Debug modes and what the"
         b'y do,\nyou can choose either one (the Release mode one will run s'
         b'ignificantly faster).\nThe application takes one argument: the fi'
         b'lename of the scene you wish to\nrender. You can call this from t'
         b"he command line, or by changing the 'Command Arguments' field in the"
         b' Debugging section of the project Properties page. \nThe differen'
         b"t scene files are stored in the 'scenes' directory, and should be pa"
         b'ssed in as relative paths (e.g., ../scenes/touchingSpheres.dat). To '
         b'test the framework, run the app with <SPAN style="font-size:10.0pt;f'
         b'ont-family:Courier">touchingSpheres.dat</SPAN>\nand you should se'
         b'e something like this:</P>\n\n<P><IMG src="./archive/2012/cw3/dire'
         b'ct_touchingspheres_1_ray.bmp"></P>\n\n<P>In the code, there is one'
         b' file (solution.cpp) containing a collection of empty functions that'
         b" you need to fill in. Pressing 's' will capture a screenshot (to the"
         b' working directory).</P>\n\n<P>There are 2 variables in <SPAN styl'
         b'e="font-size:10.0pt;font-family:Courier">mainray.cpp</SPAN>\nthat'
         b' you will need to adjust: <SPAN style="font-size:10.0pt;font-family:'
         b'Courier">N_RAYS_PER_PIXEL</SPAN> and\n<SPAN style="font-size:10.0'
         b'pt;font-family:Courier">DISPLAY_SCALE</SPAN>. Use the first to adjus'
         b't\nthe number of rays per pixel, and the second to adjust the rad'
         b'iance scaling (to globally modify the brightness).</P>\n\n<P>HTML '
         b'documentation of the code is available <A href="./archive/2012/cw3/h'
         b'tml">here</A>.</P>\n\n<H4>Algorithm flow:</H4>\n\n<P>The main functi'
         b'on uses the GLUT idle loop to perform the path tracing. The\nidle'
         b' loop will call <SPAN style="font-size:10.0pt;font-family:Courier">L'
         b'itScene::renderPixel</SPAN> once\nfor each pixel on the camera im'
         b'age plane. <SPAN style="font-size:10.0pt;font-family:Courier">LitSce'
         b'ne::renderPixel</SPAN> \nshould in turn generate a number of rays'
         b' (your job!) and call <SPAN style="font-size:10.0pt;font-family:Cour'
         b'ier">LitScene::tracePath</SPAN> \nfor each ray. In the <SPAN styl'
         b'e="font-size:10.0pt;font-family:Courier">LitScene::tracePath</SPAN> '
         b"you can use the BRDF\nreflection functions you've implemented to "
         b'sample the radiance over the\nhemisphere for surface points. Dire'
         b'ct lighting evaluations should be performed\nwith your polygon an'
         b'd sphere sampling functions, and BRDFs evaluated with the\nBRDF f'
         b"unctions you'll also write. All the surface properties you need are "
         b'already\nloaded into the BRDF object attached to each sphere or p'
         b'olygon. In order to\naccess the BRDF for a given object call this'
         b': <SPAN style="font-size:10.0pt;font-family:Courier">Object-&gt;brdf'
         b'()</SPAN>\nThis will give you a pointer to a BRDF object (see brd'
         b'f.h). Pointers to area\nlight sources are stored in an array in t'
         b'he LitScene class: <SPAN style="font-size:10.0pt;font-family:Courier'
         b'">areaLightAt(i)</SPAN> will give you a pointer to an\narea light'
         b' object (see litscene.h). Area light objects are really just\nord'
         b'inary sphere or polygon objects.</P>\n\n<P>We have supplied a <SPA'
         b'N style="font-size:10.0pt;font-family:Courier">LitScene::tracePath</'
         b'SPAN>\nfunction which performs direct lighting only. This can be '
         b'used to test that\nyour pixel sampling and area light source samp'
         b'ling works correctly.</P>\n\n<P>The provided framework loads scene'
         b' files for you, and initialises and stores material properties. '
         b'We \nalso provide a set of scenes for you upon which to test your'
         b' path tracer as you progress towards the final solution.</P>\n\n<h'
         b'r>\n<H3>Our results - stratified and jittered sampling</H3>\n\n<TAB'
         b'LE class="MsoNormalTable" border="0" cellspacing="4" cellpadding="0"'
         b' width="100%" style="width:100.0%;mso-cellspacing:3.0pt;mso-padding-'
         b'alt:0cm 0cm 0cm 0cm">\n <TBODY>\n <TR style="mso-yfti-irow:1">\n  <'
         b'TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <I'
         b'MG border="0" id="_x0000_i1027" src="./archive/2012/cw3/direct_touch'
         b'ingspheres_stratjit_1_ray.bmp">\n  </TD>\n  <TD width="25%" style='
         b'"width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" id="_x0'
         b'000_i1028" src="./archive/2012/cw3/direct_touchingspheres_stratjit_6'
         b'4_rays.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;paddin'
         b'g:0cm 0cm 0cm 0cm">\n  </TD>\n  <TD width="25%" style="width:25.0%'
         b';padding:0cm 0cm 0cm 0cm">\n  </TD>\n </TR>\n <TR style="mso-yfti-i'
         b'row:2;mso-yfti-lastrow:yes">\n  <TD width="25%" valign="top" styl'
         b'e="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  touchingSpheres.dat ('
         b'1 ray per pixel)\n  </TD>\n  <TD width="25%" valign="top" style="w'
         b'idth:25.0%;padding:0cm 0cm 0cm 0cm">\n  touchingSpheres.dat (64 r'
         b'ays per pixel)\n  </TD>\n </TR>\n</TBODY></TABLE>\n\n<H3>Our resu'
         b'lts - direct illumination</H3>\n\n<TABLE class="MsoNormalTable" bo'
         b'rder="0" cellspacing="4" cellpadding="0" width="100%" style="width:1'
         b'00.0%;mso-cellspacing:3.0pt;mso-padding-alt:0cm 0cm 0cm 0cm">\n <'
         b'TBODY><TR style="mso-yfti-irow:0">\n  <TD width="100%" colspan="5'
         b'" style="width:100.0%;padding:0cm 0cm 0cm 0cm">\n  Direct lightin'
         b'g examples, no indirect lighting sampled, good for testing (<SPAN st'
         b'yle="font-size:10.0pt;font-family:Courier">#define MAX_PATH_BOUNCES '
         b'1</SPAN>). 64 rays per pixel, stratified and jittered.</P>\n  </T'
         b'D>\n </TR>\n <TR style="mso-yfti-irow:1;mso-row-margin-right:83.5p'
         b't">\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm'
         b'">\n  <IMG border="0" width="250" height="250" id="_x0000_i1029" '
         b'src="./archive/2012/cw3/direct_touchingspheres_stratjit_64_rays.bmp"'
         b'>\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0'
         b'cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000_i'
         b'1030" src="./archive/2012/cw3/Cornell_RectLight.jpg">\n  </TD>\n  '
         b'<TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <'
         b'IMG border="0" width="250" height="250" id="_x0000_i1031" src="./arc'
         b'hive/2012/cw3/Cornell_TriLight.jpg">\n  </TD>\n  <TD width="25%" s'
         b'tyle="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" wi'
         b'dth="250" height="250" id="_x0000_i1032" src="./archive/2012/cw3/Cor'
         b'nell_SphereLight.jpg">\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:'
         b'2;mso-yfti-lastrow:yes;mso-row-margin-right:83.5pt">\n  <TD width'
         b'="25%" valign="top" style="width:25.0%;padding:0cm 0cm 0cm 0cm">'
         b'\n  touchingSpheres.dat\n  </TD>\n  <TD width="25%" valign="top" st'
         b'yle="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  Cornell_RectLight.d'
         b'at\n  </TD>\n  <TD width="25%" valign="top" style="width:25.0%;pad'
         b'ding:0cm 0cm 0cm 0cm">\n  Cornell_TriLight.dat\n  </TD>\n  <TD widt'
         b'h="25%" valign="top" style="width:25.0%;padding:0cm 0cm 0cm 0cm"'
         b'>\n  Cornell_SphereLight.dat\n  </TD>\n </TR>\n</TBODY></TABLE>\n'
         b'\n<H3>Our results - diffuse</H3>\n\n<TABLE class="MsoNormalTable" b'
         b'order="0" cellspacing="4" cellpadding="0" width="100%" style="width:'
         b'100.0%;mso-cellspacing:3.0pt;mso-padding-alt:0cm 0cm 0cm 0cm">\n '
         b'<TBODY><TR style="mso-yfti-irow:0">\n  <TD width="100%" colspan="'
         b'4" style="width:100.0%;padding:0cm 0cm 0cm 0cm">\n  Diffuse scene'
         b' with square area light source (rectLightCornell.dat).</P>\n  </T'
         b'D>\n </TR>\n <TR style="mso-yfti-irow:1">\n  <TD width="25%" style='
         b'"width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="'
         b'250" height="250" id="_x0000_i1033" src="./archive/2012/cw3/diffuse_'
         b'1ray.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:'
         b'0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id='
         b'"_x0000_i1034" src="./archive/2012/cw3/diffuse_4ray.bmp">\n  </TD'
         b'>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">'
         b'\n  <IMG border="0" width="250" height="250" id="_x0000_i1035" sr'
         b'c="./archive/2012/cw3/diffuse_64ray.bmp">\n  </TD>\n  <TD width="2'
         b'5%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="'
         b'0" width="250" height="250" id="_x0000_i1036" src="./archive/2012/cw'
         b'3/diffuse_1024ray.bmp">\n  </TD>\n </TR>\n <TR style="mso-yfti-irow'
         b':2;mso-yfti-lastrow:yes">\n  <TD width="25%" style="width:25.0%;p'
         b'adding:0cm 0cm 0cm 0cm">\n  1 ray per pixel </P>\n  </TD>\n  <TD wi'
         b'dth="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  4 rays '
         b'per pixel </P>\n  </TD>\n  <TD width="25%" style="width:25.0%;padd'
         b'ing:0cm 0cm 0cm 0cm">\n  64 rays per pixel </P>\n  </TD>\n  <TD wid'
         b'th="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  1024 ray'
         b's per pixel</P>\n  </TD>\n </TR>\n</TBODY></TABLE>\n\n<P>Notice t'
         b'he soft shadows and colour bleeding onto the sphere and box.</P>'
         b'\n\n<TABLE class="MsoNormalTable" border="0" cellspacing="4" cellp'
         b'adding="0" width="100%" style="width:100.0%;mso-cellspacing:3.0pt;ms'
         b'o-padding-alt:0cm 0cm 0cm 0cm">\n <TBODY><TR style="mso-yfti-irow'
         b':0">\n  <TD width="100%" colspan="4" style="width:100.0%;padding:'
         b'0cm 0cm 0cm 0cm">\n  Diffuse scene with spherical area light sour'
         b'ce (sphereLightCornell.dat).</P>\n  </TD>\n </TR>\n <TR style="mso-'
         b'yfti-irow:1">\n  <TD width="25%" style="width:25.0%;padding:0cm 0'
         b'cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x00'
         b'00_i1037" src="./archive/2012/cw3/diffuse_1ray_sphere.bmp">\n  </'
         b'TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm'
         b'">\n  <IMG border="0" width="250" height="250" id="_x0000_i1038" '
         b'src="./archive/2012/cw3/diffuse_4ray_sphere.bmp">\n  </TD>\n  <TD '
         b'width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG '
         b'border="0" width="250" height="250" id="_x0000_i1039" src="./archive'
         b'/2012/cw3/diffuse_64ray_sphere.bmp">\n  </TD>\n  <TD width="25%" s'
         b'tyle="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" wi'
         b'dth="250" height="250" id="_x0000_i1040" src="./archive/2012/cw3/dif'
         b'fuse_1024ray_sphere.bmp">\n  </TD>\n </TR>\n <TR style="mso-yfti-ir'
         b'ow:2;mso-yfti-lastrow:yes">\n  <TD width="25%" style="width:25.0%'
         b';padding:0cm 0cm 0cm 0cm">\n  1 ray per pixel\n  </TD>\n  <TD width'
         b'="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  4 rays per'
         b' pixel\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm '
         b'0cm 0cm 0cm">\n  64 rays per pixel\n  </TD>\n  <TD width="25%" styl'
         b'e="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  1024 rays per pixel\n '
         b' </TD>\n </TR>\n</TBODY></TABLE>\n\n<P>The noise is worse sampling t'
         b'he spherical emitter, probably because the dot\nproduct of the in'
         b'cident ray (sampling the emitter) with the surface normal of\nthe'
         b' sphere varies more than is the case with the flat polygonal emitter'
         b'.</P>\n\n<H3>Our results - modified Phong</H3>\n\n<TABLE class="MsoN'
         b'ormalTable" border="0" cellspacing="4" cellpadding="0" width="100%" '
         b'style="width:100.0%;mso-cellspacing:3.0pt;mso-padding-alt:0cm 0cm 0c'
         b'm 0cm">\n <TBODY><TR style="mso-yfti-irow:0">\n  <TD width="100%" '
         b'colspan="4" style="width:100.0%;padding:0cm 0cm 0cm 0cm">\n  Spec'
         b'ular/Diffuse scene with rectangular area light source (phong.dat'
         b').\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:1">\n  <TD width="25%'
         b'" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0"'
         b' width="250" height="250" id="_x0000_i1041" src="./archive/2012/cw3/'
         b'phong_1_paths.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%'
         b';padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height='
         b'"250" id="_x0000_i1042" src="./archive/2012/cw3/phong_4_paths.bm'
         b'p">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm'
         b' 0cm 0cm">\n  <IMG border="0" width="250" height="250" id="_x0000'
         b'_i1043" src="./archive/2012/cw3/phong_64_paths.bmp">\n  </TD>\n  <'
         b'TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <I'
         b'MG border="0" width="250" height="250" id="_x0000_i1044" src="./arch'
         b'ive/2012/cw3/phong_1024_paths.bmp">\n  </TD>\n </TR>\n <TR style="m'
         b'so-yfti-irow:2;mso-yfti-lastrow:yes">\n  <TD width="25%" style="w'
         b'idth:25.0%;padding:0cm 0cm 0cm 0cm">\n  1 ray per pixel\n  </TD>\n '
         b' <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  '
         b'4 rays per pixel\n  </TD>\n  <TD width="25%" style="width:25.0%;pa'
         b'dding:0cm 0cm 0cm 0cm">\n  64 rays per pixel\n  </TD>\n  <TD width='
         b'"25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  1024 rays p'
         b'er pixel\n  </TD>\n </TR>\n</TBODY></TABLE>\n\n<P>&nbsp;</P>\n\n<TA'
         b'BLE class="MsoNormalTable" border="0" cellspacing="4" cellpadding="0'
         b'" width="100%" style="width:100.0%;mso-cellspacing:3.0pt;mso-padding'
         b'-alt:0cm 0cm 0cm 0cm">\n <TBODY><TR style="mso-yfti-irow:0">\n  <T'
         b'D width="100%" colspan="4" style="width:100.0%;padding:0cm 0cm 0cm 0'
         b'cm">\n  Specular/Diffuse scene with rectangular area light source'
         b' (phonggloss.dat)\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:1">\n '
         b' <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  '
         b'<IMG border="0" width="250" height="250" id="_x0000_i1045" src="./ar'
         b'chive/2012/cw3/phonggloss_1_paths.bmp">\n  </TD>\n  <TD width="25%'
         b'" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0"'
         b' width="250" height="250" id="_x0000_i1046" src="./archive/2012/cw3/'
         b'phonggloss_4_paths.bmp">\n  </TD>\n  <TD width="25%" style="width:'
         b'25.0%;padding:0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" he'
         b'ight="250" id="_x0000_i1047" src="./archive/2012/cw3/phonggloss_64_p'
         b'aths.bmp">\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:'
         b'0cm 0cm 0cm 0cm">\n  <IMG border="0" width="250" height="250" id='
         b'"_x0000_i1048" src="./archive/2012/cw3/phonggloss_1024_paths.bmp'
         b'">\n  </TD>\n </TR>\n <TR style="mso-yfti-irow:2;mso-yfti-lastrow:y'
         b'es">\n  <TD width="25%" style="width:25.0%;padding:0cm 0cm 0cm 0c'
         b'm">\n  1 ray per pixel\n  </TD>\n  <TD width="25%" style="width:25.'
         b'0%;padding:0cm 0cm 0cm 0cm">\n  4 rays per pixel\n  </TD>\n  <TD wi'
         b'dth="25%" style="width:25.0%;padding:0cm 0cm 0cm 0cm">\n  64 rays'
         b' per pixel\n  </TD>\n  <TD width="25%" style="width:25.0%;padding:'
         b'0cm 0cm 0cm 0cm">\n  1024 rays per pixel\n  </TD>\n </TR>\n</TBODY><'
         b'/TABLE>\n\n</p>\n\n</tr>\n</table>\n\n<p>\n\n<table width="100%" '
         b'cellpadding=6 cellspacing=1 bgcolor="#a0a0b0" >\n<tr bgcolor="#e8'
         b'e8f0">\n      <th align=left><font size=\\"+2\\">Coursework 3:&nbsp'
         b'; Particle Simulation and Boids </font></th>\n</tr>\n<tr bgcolor="'
         b'#ffffff"> <td> \n<p>\nAssignment on March 11th. Submissions are du'
         b'e on <font color="#CC0000">March 25th at 23:55</font>. Electronic su'
         b'bmission through Moodle. The report has to be in PDF format. Do <b>n'
         b'ot</b> upload other document formats, such as Microsoft Word or Open'
         b' Office. \n</p>\n<p>Please refer to the <a href="./2013/cw3/course'
         b'work3.pdf">coursework description as PDF</a> and download the corres'
         b'ponding <a href="./2013/cw3/cw3-src.zip">code framework</a>.</p>'
         b' \n<p>\n<font color="#CC0000">UPDATES:</font><br>\nYou can find mor'
         b'e informations about Boids and Flocks at the following links:\n<u'
         b'l>\n<li><a href="http://www.red3d.com/cwr/boids/"> Boids - Backgr'
         b'ound and Update (Craig W. Reynolds)</a></li>\n<li><a href="http:/'
         b'/www.cs.toronto.edu/~dt/siggraph97-course/cwr87/">Flocks, Herds, and'
         b' Schools: A Distributed Behavioral Model (Craig W. Reynolds)</a></li'
         b'>\n<li><a href="http://www.red3d.com/cwr/nobump/nobump.html">Not '
         b'Bumping Into Things - Notes on "obstacle avoidance" for the course o'
         b'n Physically Based Modeling at SIGGRAPH 88 (Craig W. Reynolds)</a></'
         b'li>\n</ul>\n</p>\n</td></tr>\n</table>\n\n    <p/>\n    <address><s'
         b'cript type="text/javascript">hiddenemail(\'cs.ucl.ac.uk\',\'t.weyri'
         b"ch')</script>\n      <noscript>enable java script to see my email"
         b' address</noscript></address>\n  </body>\n</html>\n',
 'links': [3391, 3386, 3387, 3388, 3394, 3395, 3396, 3397],
 'pid': 3387,
 'url': 'http://web4.cs.ucl.ac.uk/teaching/4074/coursework.php'}
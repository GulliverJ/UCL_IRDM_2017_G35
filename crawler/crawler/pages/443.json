{'html': '#include <stdlib.h>\n\n#include "camera_gl.h"\n\n\n\n#include <GL/glut.h>\n\nstatic GLint Height;\t\t/*height of window*/\n\nstatic Camera_GL *TheCamera;\n\n\nstatic Point3D Pyramid[] = {{0.0,0.0,0.0},{10.0,0.0,0.0},\n                            {10.0,10.0,0.0},{0.0,10.0,0.0},\n                            {5.0,5.0,40.0}};\n                            \n/*read in command line argument*/\nint Eye;\t\t/*- for L, + for R*/\nfloat VPDistance;\t/*view plane distance*/\n\n/*preset half inter-pupilary distance*/\n#define HIPD  1.5\n\nstatic void displayPyramid(void)\n{\n\t/*base*/\n\tglBegin(GL_POLYGON);\n\t\tglColor3f(0.0,0.0,0.0);\n\t\tglVertex3f(Pyramid[0].x,Pyramid[0].y,Pyramid[0].z);\n\t\tglVertex3f(Pyramid[3].x,Pyramid[3].y,Pyramid[3].z);\n\t\tglVertex3f(Pyramid[2].x,Pyramid[2].y,Pyramid[2].z);\n\t\tglVertex3f(Pyramid[1].x,Pyramid[1].y,Pyramid[1].z);\n\tglEnd();\n\t\n\t/*front*/\n\tglBegin(GL_POLYGON);\n\t\tglColor3f(1.0,0.0,0.0);\n\t\tglVertex3f(Pyramid[0].x,Pyramid[0].y,Pyramid[0].z);\n\t\tglVertex3f(Pyramid[1].x,Pyramid[1].y,Pyramid[1].z);\n\t\tglVertex3f(Pyramid[4].x,Pyramid[4].y,Pyramid[4].z);\n\tglEnd();\n\t\n\t/*right*/\n\tglBegin(GL_POLYGON);\n\t\tglColor3f(0.0,1.0,0.0);\n\t\tglVertex3f(Pyramid[1].x,Pyramid[1].y,Pyramid[1].z);\n\t\tglVertex3f(Pyramid[2].x,Pyramid[2].y,Pyramid[2].z);\n\t\tglVertex3f(Pyramid[4].x,Pyramid[4].y,Pyramid[4].z);\n\tglEnd();\n\t\n\t\n\t/*back*/\n\tglBegin(GL_POLYGON);\n\t\tglColor3f(0.0,0.0,1.0);\n\t\tglVertex3f(Pyramid[4].x,Pyramid[4].y,Pyramid[4].z);\n\t\tglVertex3f(Pyramid[2].x,Pyramid[2].y,Pyramid[2].z);\n\t\tglVertex3f(Pyramid[3].x,Pyramid[3].y,Pyramid[3].z);\n\tglEnd();\n\t\n\t/*left*/\n\tglBegin(GL_POLYGON);\n\t\tglColor3f(1.0,1.0,0.0);\n\t\tglVertex3f(Pyramid[0].x,Pyramid[0].y,Pyramid[0].z);\n\t\tglVertex3f(Pyramid[4].x,Pyramid[4].y,Pyramid[4].z);\n\t\tglVertex3f(Pyramid[3].x,Pyramid[3].y,Pyramid[3].z);\n\tglEnd();\n}\n\nstatic void display ()\n{\n    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);\n    displayPyramid();\n    glFlush();\n}\n \n \nstatic void reshape(int width, int height)\n{ \t\n\tsetCOP_GL(TheCamera,(float)(HIPD*Eye),0.0,0.0);\n\tsetVPDistance_GL(TheCamera,VPDistance);\n\tsetClipPlanes_GL(TheCamera,0.1,200.0);\n\tsetVPWindow_GL(TheCamera,-10.0,10.0,-10.0,10.0);\n\n\tclickProject_GL(TheCamera);\n\t\n    \tglViewport (0, 0, width, height); /*define the viewport*/\n}\n\t\nstatic void initialise(void) \n{\n\n\t/*GL_FLAT or GL_SMOOTH*/\t\n    \tglShadeModel(GL_FLAT);\n    \n    \t/*set the background (clear) Color to white*/\n    \tglClearColor(1.0,1.0,1.0,0.0);\n\t\n\tglEnable(GL_DEPTH_TEST);\n\t\n    \t/*set the depth buffer for clearing*/\n    \tglClearDepth(1.0);\n \t\n\t/*initialise the camera*/\n\tTheCamera = newCamera_GL();\n\tsetVRP_GL(TheCamera,5.0,5.0,100.0);\n\tsetVPN_GL(TheCamera,0.0,0.0,-1.0);\n\tsetVUV_GL(TheCamera,0.0,1.0,0.0);\n\t\n\tclickView_GL(TheCamera);\n}\n\nint main(int argc, char** argv)\n{\t\n\tint window;\n\n\tglutInit(&argc,argv);\n\t\n\tif(argc != 3){\n\t\tprintf("stereo eye(-1 or 1) vpdistance\\n");\n\t\texit(0);\n\t}\n\t\n\tEye = atoi(argv[1]);\n\tVPDistance = (float)atof(argv[2]);\n\n\t/*record the window height*/\n\tHeight = 200;\n\t\n\tglutInitWindowSize(Height,Height);\n\n\tglutInitDisplayMode(GLUT_RGBA|GLUT_DEPTH);\n\n\tif(Eye < 0)  window = glutCreateWindow("Left");\n\telse\n\tif(Eye == 0) window = glutCreateWindow("Mono");\n\telse         window = glutCreateWindow("Right");\n\t\n\tglutSetWindow(window);\n\n    \tinitialise();\n\n\t/*register callbacks*/\n\tglutDisplayFunc(display); /*display function*/\n\tglutReshapeFunc(reshape);\n\n\tglutMainLoop();\n}\n',
 'pid': 443,
 'url': 'http://www0.cs.ucl.ac.uk/staff/A.Steed/book_tmp/CGVE/code/Lib3D1.0/mainstereo.c'}
{'html': b'(*******************************************************************'
         b'****\n\n                    Mathematica-Compatible Notebook\n\nThis '
         b'notebook can be used on any computer system with Mathematica 4.0'
         b',\nMathReader 4.0, or any compatible application. The data for th'
         b'e notebook \nstarts with the line containing stars above.\n\nTo get'
         b' the notebook into a Mathematica-compatible application, do one '
         b'of \nthe following:\n\n* Save the data starting with the line of st'
         b'ars above into a file\n  with a name ending in .nb, then open the'
         b' file inside the application;\n\n* Copy the data starting with the'
         b' line of stars above to the\n  clipboard, then use the Paste menu'
         b' command inside the application.\n\nData for notebooks contains on'
         b'ly printable 7-bit ASCII and can be\nsent directly in email or th'
         b'rough ftp in text mode.  Newlines can be\nCR, LF or CRLF (Unix, M'
         b'acintosh or MS-DOS style).\n\nNOTE: If you modify the data for thi'
         b's notebook not in a Mathematica-\ncompatible application, you mus'
         b't delete the line below containing the \nword CacheID, otherwise '
         b'Mathematica-compatible applications may try to \nuse invalid cach'
         b'e data.\n\nFor more information on notebooks and Mathematica-compa'
         b'tible \napplications, contact Wolfram Research:\n  web: http://www'
         b'.wolfram.com\n  email: info@wolfram.com\n  phone: +1-217-398-0700 '
         b'(U.S.)\n\nNotebook reader applications are available free of charg'
         b'e from \nWolfram Research.\n**************************************'
         b'*********************************)\n\n(*CacheID: 232*)\n\n\n(*Not'
         b'ebookFileLineBreakTest\nNotebookFileLineBreakTest*)\n(*NotebookOpt'
         b'ionsPosition[     18341,        414]*)\n(*NotebookOutlinePosition'
         b'[     19518,        451]*)\n(*  CellTagsIndexPosition[     19474,'
         b'        447]*)\n(*WindowFrame->Normal*)\n\n\n\nNotebook[{\nCell["\\'
         b'<\\\nReadImage/: ReadImage[filename_, n_] := \n   ReadList[filename'
         b', Table[Number, {n}]]\nDispIt/: DispIt[t_] := ListPlot3D[t, Light'
         b'ing -> False, \n    Mesh -> False, AspectRatio -> 3, \n    ViewPoi'
         b'nt -> {0, 0, -1000}, Axes -> False]\nDispIt/: DispIt[t_, a_] := L'
         b'istPlot3D[t, Lighting -> False, \n    Mesh -> False, AspectRatio '
         b'-> a, \n    ViewPoint -> {0, 0, -1000}, Axes -> False]\nEpsOut/: E'
         b'psOut[which_] := Display[\\"!psfix -epsf > out.ps\\", \n    which]\n'
         b'SetOptions[ListPlot, PlotJoined -> True]; \\\n\\>", "Text",\n  Evalu'
         b'atable->True,\n  ImageRegion->{{0, 1}, {0, 1}}],\n\nCell[BoxData[{\n'
         b'    \\( (*\\ synthesise\\ a\\ simple\\ 3  \n        D\\ image\\ '
         b'*) \\[IndentingNewLine]\\(nptsz\\  = \\ \\(nptsy\\  = \\ \\(npts'
         b'x\\  \\\n= \\ 32\\)\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\(i'
         b'ms = \n        Table[Table[\n            Table[50\\ Random[], {npts'
         b'x}], {nptsy}], {nptsz}];\\)\\), "\\n", \n    \\(\\(zstart = Floor['
         b'nptsz\\/4];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(ystart = Flo'
         b'or[nptsy\\/4];\\)\\), "\\n", \n    \\(\\(xstart = Floor[nptsx\\/'
         b'4];\\)\\), "\\n", \n    \\(\\(zw = Floor[nptsz\\/4];\\)\\), "\\[In'
         b'dentingNewLine]", \n    \\(\\(yw = Floor[nptsy\\/4];\\)\\), "\\n", '
         b'\n    \\(\\(xw = Floor[nptsx\\/4];\\)\\), "\\n", \n    \\(\\(zcen '
         b'= Floor[\\(3\\ nptsz\\)\\/4];\\)\\), "\\[IndentingNewLine]", \n '
         b'   \\(\\(ycen = Floor[\\(3\\ nptsy\\)\\/4];\\)\\), "\\n", \n    \\('
         b'\\(xcen = Floor[\\(3\\ nptsx\\)\\/4];\\)\\), "\\n", \n    \\(\\(For'
         b'[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n        For[m = 1, m'
         b' \\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1, \n       '
         b'     n \\[LessEqual] \n              nptsx, \\(n++\\), \\(ims\\[Le'
         b'ftDoubleBracket]m, n, \n                  p\\[RightDoubleBracket] '
         b'+= \n                If[\\((m - ycen)\\)\\^2 + \\((n - xcen)\\)\\^2'
         b' + \\((p - zcen)\\)\\^2 \\\n< 0.8\\ xw\\^2, 200, 0];\\)]]];\\)\\),'
         b' "\\n", \n    \\(\\(For[p = 1, p \\[LessEqual] zw, \\(p++\\), \n    '
         b'    For[m = 1, m \\[LessEqual] yw, \\(m++\\), \n          For[n = 1,'
         b' n \\[LessEqual] xw, \\(n++\\), \n            ims\\[LeftDoubleBra'
         b'cket]ystart + m, xstart + n, \n                zstart + p\\[RightD'
         b'oubleBracket] += 100]]];\\)\\)}], "Input",\n  ImageRegion->{{0, 1},'
         b' {0, 1}}],\n\nCell[BoxData[\n    \\(\\(\\( (*\\ \n      Use\\ syn'
         b'thetic\\ image\\ *) \\)\\(\\[IndentingNewLine]\\)\\(im\\  = \\ \n '
         b'       ims;\\)\\)\\)], "Input"],\n\nCell[BoxData[{\n    \\({nptsx, '
         b'nptsy, nptsz}\\), "\\[IndentingNewLine]", \n    \\(For[p = 1, \n '
         b'     p \\[LessEqual] \n        nptsz, \\(p++\\), \\n\\(ListDensity'
         b'Plot[im[\\([p]\\)], Mesh \\[Rule] False, \n          PlotRange -> {0'
         b', 350}];\\)\\[IndentingNewLine]]\\)}], "Input",\n  ImageRegion->{{0,'
         b' 1}, {0, 1}}],\n\nCell[BoxData[{\n    \\( (*\\(\\(**\\)\\(**\\)\\('
         b'**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\('
         b'**\\)\\\n\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)'
         b'\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\(**\\)\\\n\\(**\\)\\(**'
         b'\\)\\)*\\[IndentingNewLine]Now\\ the\\ Fourier\\ Versions\\ \\\n\\'
         b'[IndentingNewLine]**************************************************'
         b'*****)  \\\n(*\\ this\\ function\\ rotates\\ quadrants\\ of\\ a\\'
         b' 2  \n        D\\ image\\ *) \\[IndentingNewLine]RotImage2D[im_] := '
         b'\n      Module[{nptsx, nptsy}, nptsy = Length[im]; \n        nptsx'
         b' = Length[im\\[LeftDoubleBracket]1\\[RightDoubleBracket]]; \n      '
         b'  RotateLeft[Transpose[RotateLeft[Transpose[im], Floor[nptsx\\/2 '
         b'+ 1]]], \n          Floor[nptsy\\/2 + 1]]]\\[IndentingNewLine] (*\\ '
         b'\n      inverse\\ of\\ the\\ above\\ *) \\), "\\[IndentingNewLine]"'
         b', \n    \\(IRotImage2D[im_] := \n      Module[{nptsx, nptsy}, nptsy'
         b' = Length[im]; \n        nptsx = Length[im\\[LeftDoubleBracket]1\\['
         b'RightDoubleBracket]]; \n        RotateRight[\n          Transpose['
         b'RotateRight[Transpose[im], Floor[nptsx\\/2 + 1]]], \n          Flo'
         b'or[nptsy\\/2 + 1]]]\\)}], "Input",\n  ImageRegion->{{0, 1}, {0, 1}}'
         b'],\n\nCell[BoxData[\n    \\(Table[Mod[j + Floor[nptsz/2\\ ], npts'
         b'z] + 1, {j, nptsz}]\\)], "Input"],\n\nCell[BoxData[\n    \\(\\(\\(\\'
         b'[IndentingNewLine]\\)\\(RotImage3D[im_]\\  := \\ \n      Table[Ro'
         b'tImage2D[im[\\([Mod[j + Floor[nptsz/2\\ ], nptsz] + 1]\\)]], {j, \n '
         b'         nptsz}]\\)\\)\\)], "Input"],\n\nCell[BoxData[\n    \\('
         b'\\(\\(fim = \n        Fourier[im];\\)\\(\\[IndentingNewLine]\\)\\( ('
         b'*\\[IndentingNewLine]fim2 = \n        RotImage[fim]; \\n\n      List'
         b'DensityPlot[Re[Log[fim2]], Mesh \\[Rule] False]; \\n\n      ListDen'
         b'sityPlot[Im[Log[fim2]], \n        Mesh \\[Rule] False];\\[Indenting'
         b'NewLine]*) \\)\\)\\)], "Input",\n  ImageRegion->{{0, 1}, {0, 1}}'
         b'],\n\nCell[BoxData[\n    \\(\\(\\(\\[IndentingNewLine]\\)\\( (*\\ '
         b'\n      now\\ form\\ derivative\\ of\\ Gaussian\\ edge\\ filters\\ *'
         b') \\)\\)\\)], "Input"],\n\nCell[BoxData[{\n    \\(G[x_, \n        s_'
         b'] := \\[ExponentialE]\\^\\(-\\(x\\^2\\/\\(2\\ s\\^2\\)\\)\\)\\/\\@'
         b'\\(2\\ \\[Pi]\\)\\), \\\n"\\n", \n    \\(Gx[x_, \n        s_] := \\['
         b'PartialD]\\_xx G[xx, s] /. \\[InvisibleSpace]xx \\[Rule] \n         '
         b' x\\), "\\n", \n    \\(Gxx[x_, \n        s_] := \\[PartialD]\\_{xx,'
         b' 2}G[xx, s] /. \\[InvisibleSpace]xx \\[Rule] \n          x\\)}], "In'
         b'put",\n  ImageRegion->{{0, 1}, {0, 1}}],\n\nCell[BoxData[{\n    '
         b'\\(\\(xmaskim = \n        Table[Table[\n            Table[0, {nptsx}'
         b'], {nptsy}, {nptsz}]];\\)\\), \\\n"\\[IndentingNewLine]", \n    \\('
         b'\\(zmaskim\\  = \\ \\(ymaskim\\  = \\ xmaskim\\);\\)\\), "\\[Inden'
         b'tingNewLine]", \n    \\(\\(zzmaskim\\  = \\ \\(yymaskim\\  = \\(xxma'
         b'skim\\  = \\ \n            xmaskim\\)\\);\\)\\), "\\[IndentingNewLin'
         b'e]", \n    \\(\\(zxmaskim\\  = \\ \\(zymaskim\\  = \\ \\(xymaskim'
         b'\\  = \\ \n            xmaskim\\)\\);\\)\\), "\\n", \n    \\(\\(yce'
         b'n = nptsy\\/2;\\)\\), "\\n", \n    \\(\\(xcen = nptsx\\/2;\\)\\), '
         b'"\\[IndentingNewLine]", \n    \\(\\(zcen = nptsz\\/2;\\)\\), "\\n", '
         b'\n    \\(\\(sx = 1.5;\\)\\), "\\n", \n    \\(\\(sy = 1.5;\\)\\), "\\'
         b'[IndentingNewLine]", \n    \\(\\(sz\\  = 1.5;\\)\\), "\\n", \n  '
         b'  \\(\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n        For'
         b'[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1,'
         b' n \\[LessEqual] nptsx, \\(n++\\), \n            xmaskim\\[LeftDo'
         b'ubleBracket]p, m, n\\[RightDoubleBracket] = \n              G[p - '
         b'zcen, sz]\\ G[m - ycen, sy]\\ Gx[n - xcen, \n                  sx]]'
         b']];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[xmaskim[\\([xcen // F'
         b'loor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] \n  '
         b'        All];\\)\\[IndentingNewLine]\\), "\\[IndentingNewLine]",'
         b' \n    \\(\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n       '
         b' For[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1,'
         b' n \\[LessEqual] nptsx, \\(n++\\), \n            ymaskim\\[LeftDo'
         b'ubleBracket]p, m, n\\[RightDoubleBracket] = \n              G[p - '
         b'zcen, sz]\\ Gx[m - ycen, sy]\\ G[n - xcen, \n                  sx]]'
         b']];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[ymaskim[\\([ycen // F'
         b'loor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] \n  '
         b'        All];\\)\\[IndentingNewLine]\\), "\\[IndentingNewLine]",'
         b' \n    \\(\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n       '
         b' For[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1,'
         b' n \\[LessEqual] nptsx, \\(n++\\), \n            zmaskim\\[LeftDo'
         b'ubleBracket]p, m, n\\[RightDoubleBracket] = \n              Gx[p -'
         b' zcen, sz]\\ G[m - ycen, sy]\\ G[n - xcen, \n                  sx]]'
         b']];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[zmaskim[\\([zcen // F'
         b'loor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] All'
         b'];\\)\\n\\[IndentingNewLine]\\[IndentingNewLine] (*\\ \n      2  n'
         b'd\\ derivative\\ images\\ *) \\), "\\[IndentingNewLine]", \n    \\('
         b'\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n        For[m ='
         b' 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1, n \\'
         b'[LessEqual] nptsx, \\(n++\\), \n            xxmaskim\\[LeftDoubleBra'
         b'cket]p, m, n\\[RightDoubleBracket] = \n              G[p - zcen, s'
         b'z]\\ G[m - ycen, sy]\\ Gxx[n - xcen, \n                  sx]]]]'
         b';\\)\\), "\\n", \n    \\(\\(ListDensityPlot[xxmaskim[\\([xcen // Fl'
         b'oor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] \n   '
         b'       All];\\)\\[IndentingNewLine]\\), "\\[IndentingNewLine]", '
         b'\n    \\(\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n        '
         b'For[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For[n = 1, '
         b'n \\[LessEqual] nptsx, \\(n++\\), \n            yymaskim\\[LeftDo'
         b'ubleBracket]p, m, n\\[RightDoubleBracket] = \n              G[p - '
         b'zcen, sz]\\ Gxx[m - ycen, sy]\\ G[n - xcen, \n                  sx]'
         b']]];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[yymaskim[\\([ycen //'
         b' Floor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule] \n'
         b'          All];\\)\\[IndentingNewLine]\\), "\\[IndentingNewLine]'
         b'", \n    \\(\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n     '
         b'   For[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For[n = '
         b'1, n \\[LessEqual] nptsx, \\(n++\\), \n            zzmaskim\\[Lef'
         b'tDoubleBracket]p, m, n\\[RightDoubleBracket] = \n              Gxx'
         b'[p - zcen, sz]\\ G[m - ycen, sy]\\ G[n - xcen, \n                  '
         b'sx]]]];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[zzmaskim[\\([zcen'
         b' // Floor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule'
         b'] \n          All];\\)\\[IndentingNewLine]\\), "\\[IndentingNewLi'
         b'ne]", \n    \\(\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n  '
         b'      For[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For[n'
         b' = 1, n \\[LessEqual] nptsx, \\(n++\\), \n            xymaskim\\['
         b'LeftDoubleBracket]p, m, n\\[RightDoubleBracket] = \n              '
         b'G[p - zcen, sz]\\ Gx[m - ycen, sy]\\ Gx[n - xcen, \n               '
         b'   sx]]]];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[xymaskim[\\([z'
         b'cen // Floor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rule]'
         b' All];\\)\\n\\), "\\[IndentingNewLine]", \n    \\(\\(For[p = 1, p \\'
         b'[LessEqual] nptsz, \\(p++\\), \n        For[m = 1, m \\[LessEqual] n'
         b'ptsy, \\(m++\\), \n          For[n = 1, n \\[LessEqual] nptsx, \\'
         b'(n++\\), \n            zxmaskim\\[LeftDoubleBracket]p, m, n\\[RightD'
         b'oubleBracket] = \n              Gx[p - zcen, sz]\\ G[m - ycen, sy]'
         b'\\ Gx[n - xcen, \n                  sx]]]];\\)\\), "\\n", \n    \\('
         b'\\(ListDensityPlot[zxmaskim[\\([zcen // Floor]\\)], Mesh \\[Rule] Fa'
         b'lse, \n        PlotRange \\[Rule] All];\\)\\n\\), "\\[IndentingNew'
         b'Line]", \n    \\(\\(For[p = 1, p \\[LessEqual] nptsz, \\(p++\\), \n'
         b'        For[m = 1, m \\[LessEqual] nptsy, \\(m++\\), \n          For'
         b'[n = 1, n \\[LessEqual] nptsx, \\(n++\\), \n            zymaskim'
         b'\\[LeftDoubleBracket]p, m, n\\[RightDoubleBracket] = \n            '
         b'  Gx[p - zcen, sz]\\ Gx[m - ycen, sy]\\ G[n - xcen, \n             '
         b'     sx]]]];\\)\\), "\\n", \n    \\(\\(ListDensityPlot[zymaskim[\\('
         b'[zcen // Floor]\\)], Mesh \\[Rule] False, \n        PlotRange \\[Rul'
         b'e] All];\\)\\[IndentingNewLine]\\)}], "Input",\n  ImageRegion->{{0, '
         b'1}, {0, 1}}],\n\nCell[BoxData[\n    \\(xmaskim[\\([1, 1, 1]\\)] //'
         b' N\\)], "Input"],\n\nCell[BoxData[{\n    \\(\\(dim\\  = \\ zymaskim;'
         b'\\)\\), "\\[IndentingNewLine]", \n    \\(\\(max\\  = \\ \\(-10^\\('
         b'(6)\\)\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\(min\\ \\  = '
         b'\\ \\(-max\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\(\\(\\((ma'
         b'x\\  = If[# > \\ max, #, max])\\) &\\) /@ \n        Flatten[dim];'
         b'\\)\\), "\\[IndentingNewLine]", \n    \\(\\(\\(\\((min\\  = If[# '
         b'< \\ min, #, min])\\) &\\) /@ \n        Flatten[dim];\\)\\), "\\[In'
         b'dentingNewLine]", \n    \\({min, max}\\), "\\[IndentingNewLine]"'
         b', \n    \\(For[p = 1, \n      p \\[LessEqual] \n        nptsz, \\('
         b'p++\\), \\n\\(ListDensityPlot[dim[\\([p]\\)], Mesh \\[Rule] False,'
         b' \n          PlotRange \\[Rule] {min, max}];\\)\\[IndentingNewLine]]'
         b'\\)}], "Input"],\n\nCell[BoxData[{\n    \\( (*\\ 1  st\\ derivative'
         b's\\ *) \\[IndentingNewLine]\\(fxmaskim = \n        Fourier[N[xmaskim'
         b']];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(fymaskim = Fourier['
         b'N[ymaskim]];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(fzmaskim ='
         b' Fourier[N[zmaskim]];\\)\\[IndentingNewLine] (*\\ \n      2  nd\\'
         b' derivatives\\ *) \\), "\\[IndentingNewLine]", \n    \\(\\(fxxmask'
         b'im = Fourier[N[xxmaskim]];\\)\\), "\\n", \n    \\(\\(fyymaskim = F'
         b'ourier[N[yymaskim]];\\)\\), "\\n", \n    \\(\\(fzzmaskim = Fourier'
         b'[N[zzmaskim]];\\)\\), "\\n", \n    \\(\\(fxymaskim = Fourier[N[xym'
         b'askim]];\\)\\), "\\n", \n    \\(\\(fzxmaskim = Fourier[N[zxmaskim]'
         b'];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(fzymaskim = Fourier['
         b'N[zymaskim]];\\)\\[IndentingNewLine]\\)}], "Input",\n  ImageRegion->'
         b'{{0, 1}, {0, 1}}],\n\nCell[BoxData[{\n    \\(\\n\\(xfiltimf = \n   '
         b'     Chop[InverseFourier[N[fim\\ fxmaskim]]] // RotImage3D;\\)\\), '
         b'"\\n", \n    \\(\\(ListDensityPlot[xfiltimf[\\([xcen]\\)], \n      '
         b'  Mesh \\[Rule] False];\\)\\), "\\[IndentingNewLine]", \n    \\(\\('
         b'yfiltimf = \n        Chop[InverseFourier[N[fim\\ fymaskim]]] // Ro'
         b'tImage3D;\\)\\), "\\n", \n    \\(\\(ListDensityPlot[yfiltimf[\\([yc'
         b'en]\\)], \n        Mesh \\[Rule] False];\\)\\), "\\[IndentingNewLi'
         b'ne]", \n    \\(\\(zfiltimf = \n        Chop[InverseFourier[N[fim'
         b'\\ fzmaskim]]] // RotImage3D;\\)\\), "\\n", \n    \\(\\(ListDensity'
         b'Plot[zfiltimf[\\([zcen]\\)], \n        Mesh \\[Rule] False];\\)\\['
         b'IndentingNewLine] (*\\ \n      2  nd\\ derivatives\\ *) \\), "\\[I'
         b'ndentingNewLine]", \n    \\(\\(xxfiltimf = \n        Chop[InverseFou'
         b'rier[N[fim\\ fxxmaskim]]] // RotImage3D;\\)\\), "\\n", \n    \\(\\('
         b'ListDensityPlot[xxfiltimf[\\([xcen]\\)], \n        Mesh \\[Rule] Fal'
         b'se];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(yyfiltimf = \n     '
         b'   Chop[InverseFourier[N[fim\\ fyymaskim]]] // RotImage3D;\\)\\), "'
         b'\\n", \n    \\(\\(ListDensityPlot[yyfiltimf[\\([ycen]\\)], \n      '
         b'  Mesh \\[Rule] False];\\)\\), "\\[IndentingNewLine]", \n    \\(\\('
         b'zzfiltimf = \n        Chop[InverseFourier[N[fim\\ fzzmaskim]]] // '
         b'RotImage3D;\\)\\), "\\n", \n    \\(\\(ListDensityPlot[zzfiltimf[\\('
         b'[zcen]\\)], \n        Mesh \\[Rule] False];\\)\\[IndentingNewLine'
         b']\\), "\\[IndentingNewLine]", \n    \\(\\(xyfiltimf = \n        Ch'
         b'op[InverseFourier[N[fim\\ fxymaskim]]] // RotImage3D;\\)\\), "\\n", '
         b'\n    \\(\\(ListDensityPlot[xyfiltimf[\\([xcen]\\)], \n        Mes'
         b'h \\[Rule] False];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(zyfil'
         b'timf = \n        Chop[InverseFourier[N[fim\\ fzymaskim]]] // RotIm'
         b'age3D;\\)\\), "\\n", \n    \\(\\(ListDensityPlot[zyfiltimf[\\([ycen'
         b']\\)], \n        Mesh \\[Rule] False];\\)\\), "\\[IndentingNewLine'
         b']", \n    \\(\\(zxfiltimf = \n        Chop[InverseFourier[N[fim\\'
         b' fzxmaskim]]] // RotImage3D;\\)\\), "\\n", \n    \\(\\(ListDensity'
         b'Plot[zxfiltimf[\\([zcen]\\)], \n        Mesh \\[Rule] \n         '
         b' False];\\)\\[IndentingNewLine]\\[IndentingNewLine]\\)}], "Input'
         b'",\n  ImageRegion->{{0, 1}, {0, 1}}],\n\nCell[BoxData[{\n    \\(\\'
         b'(dim\\  = \\ zzfiltimf;\\)\\), "\\[IndentingNewLine]", \n    \\(\\(m'
         b'ax\\  = \\ \\(-10^\\((6)\\)\\);\\)\\), "\\[IndentingNewLine]", \n '
         b'   \\(\\(min\\ \\  = \\ \\(-max\\);\\)\\), "\\[IndentingNewLine]",'
         b' \n    \\(\\(\\(\\((max\\  = If[# > \\ max, #, max])\\) &\\) /@ \n'
         b'        Flatten[dim];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(\\'
         b'(\\((min\\  = If[# < \\ min, #, min])\\) &\\) /@ \n        Flatten'
         b'[dim];\\)\\), "\\[IndentingNewLine]", \n    \\({min, max}\\), "\\[I'
         b'ndentingNewLine]", \n    \\(For[p = 1, \n      p \\[LessEqual] \n'
         b'        nptsz, \\(p++\\), \\n\\(ListDensityPlot[dim[\\([p]\\)], Me'
         b'sh \\[Rule] False, \n          PlotRange \\[Rule] {min, max}];\\'
         b')\\[IndentingNewLine]]\\)}], "Input"],\n\nCell[BoxData[{\n    \\(\\'
         b'[IndentingNewLine] (*\\ \n      Form\\ Gradient\\ and\\ Laplacian'
         b'\\ images\\ *) \\[IndentingNewLine]\\(gradim\\ \\\n = \\ Sqrt[\n '
         b'         xfiltimf^2\\  + \\ yfiltimf^2\\  + \\ \n            zfil'
         b'timf^2];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(laplim\\  ='
         b' \\ \n        xxfiltimf^2\\  + \\ yyfiltimf^2\\  + \\ zzfiltimf^2;'
         b'\\)\\)}], "Input"],\n\nCell[BoxData[{\n    \\(\\(max\\  = \\ \\(-1'
         b'0^\\((6)\\)\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\(min\\ \\'
         b'  = \\ \\(-max\\);\\)\\), "\\[IndentingNewLine]", \n    \\(\\(\\(\\'
         b'((max\\  = If[# > \\ max, #, max])\\) &\\) /@ \n        Flatten[g'
         b'radim];\\)\\), "\\[IndentingNewLine]", \n    \\(\\(\\(\\((min\\  '
         b'= If[# < \\ min, #, min])\\) &\\) /@ \n        Flatten[gradim];\\'
         b')\\), "\\[IndentingNewLine]", \n    \\({min, max}\\), "\\[Indentin'
         b'gNewLine]", \n    \\(For[p = 1, \n      p \\[LessEqual] \n       '
         b' nptsz, \\(p++\\), \\n\\(ListDensityPlot[gradim[\\([p]\\)], \n     '
         b'     Mesh \\[Rule] False, \n          PlotRange \\[Rule] {0, max}];'
         b'\\)\\[IndentingNewLine]]\\)}], "Input"],\n\nCell[BoxData[{\n    \\('
         b'\\[IndentingNewLine]\\(max\\  = \\ \\(-10^\\((6)\\)\\);\\)\\), "\\n'
         b'", \n    \\(\\(min\\ \\  = \\ \\(-max\\);\\)\\), "\\n", \n    \\('
         b'\\(\\(\\((max\\  = If[# > \\ max, #, max])\\) &\\) /@ \n        Flat'
         b'ten[laplim];\\)\\), "\\n", \n    \\(\\(\\(\\((min\\  = If[# < \\ m'
         b'in, #, min])\\) &\\) /@ \n        Flatten[laplim];\\)\\), "\\n", \n'
         b'    \\({min, max}\\), "\\n", \n    \\(For[p = 1, \n      p \\[LessE'
         b'qual] \n        nptsz, \\(p++\\), \\n\\(ListDensityPlot[laplim[\\('
         b'[p]\\)], \n          Mesh \\[Rule] False, \n          PlotRange '
         b'\\[Rule] {min, \n              max}];\\)\\[IndentingNewLine]]\\[I'
         b'ndentingNewLine]\\)}], "Input"],\n\nCell[BoxData[\n    \\(\\(\\(\\[I'
         b'ndentingNewLine]\\)\\( (*\\ \n      Form\\ the\\ Canny\\ image\\ *) '
         b'\\)\\(\\[IndentingNewLine]\\)\\(\\\n\\[IndentingNewLine]\\)\\(cann'
         b'yim\\  = \\ \\((xfiltimf^2\\ xxfiltimf\\  + \\ \\ \\\nyfiltimf^2\\'
         b' yyfiltimf + \\ \\ zfiltimf^2\\ zzfiltimf + \\ \n              2\\'
         b' xfiltimf\\ yfiltimf\\ xyfiltimf\\ \\  + \n              2\\ xfilt'
         b'imf\\ zfiltimf\\ zxfiltimf\\ \\  + \\ \n              2\\ zfiltimf\\'
         b' yfiltimf\\ zyfiltimf\\ \\ )\\)/\\((xfiltimf^2\\  + \\ \n           '
         b'   yfiltimf^2\\  + \\ \n              zfiltimf^2)\\);\\)\\(\\[Inden'
         b'tingNewLine]\\)\\(\\[IndentingNewLine]\\)\\)\\\n\\)], "Input"],\n'
         b'\nCell[BoxData[{\n    \\(\\(max\\  = \\ \\(-10^\\((6)\\)\\);\\)\\), '
         b'"\\[IndentingNewLine]", \n    \\(\\(min\\ \\  = \\ \\(-max\\);\\)\\'
         b'), "\\[IndentingNewLine]", \n    \\(\\(\\(\\((max\\  = If[# > \\ max'
         b', #, max])\\) &\\) /@ \n        Flatten[cannyim];\\)\\), "\\[Inden'
         b'tingNewLine]", \n    \\(\\(\\(\\((min\\  = If[# < \\ min, #, min])\\'
         b') &\\) /@ \n        Flatten[cannyim];\\)\\), "\\[IndentingNewLine'
         b']", \n    \\({min, max}\\)}], "Input"],\n\nCell[BoxData[\n    \\(\\('
         b'ListDensityPlot[cannyim[\\([zcen]\\)], Mesh \\[Rule] False, \n      '
         b'  PlotRange \\[Rule] {min, max}];\\)\\)], "Input"],\n\nCell[BoxDa'
         b'ta[\n    \\(For[p = 1, \n      p \\[LessEqual] \n        nptsz, \\'
         b'(p++\\), \\n\\(ListDensityPlot[cannyim[\\([p]\\)], \n          Mes'
         b'h \\[Rule] False, \n          PlotRange \\[Rule] {min, max}];\\)'
         b'\\[IndentingNewLine]]\\)], "Input"]\n},\nFrontEndVersion->"4.0 for X'
         b'",\nScreenRectangle->{{0, 1152}, {0, 900}},\nWindowToolbars->{},\nC'
         b'ellGrouping->Manual,\nWindowSize->{1016, 668},\nWindowMargins->{{0'
         b', Automatic}, {Automatic, 0}},\nPrintingPageRange->{Automatic, Au'
         b'tomatic},\nPrintingOptions->{"PaperSize"->{612, 792},\n"PaperOrien'
         b'tation"->"Portrait",\n"PostScriptOutputFile":>FrontEnd`FileName[{'
         b'"cs", "research", "medim", \\\n"images3", "starship", "ucacarr", "'
         b'teaching", "3c72", "math"}, "edge2.nb.ps", \\\nCharacterEncoding -'
         b'> "ISO8859-1"],\n"Magnification"->1},\nPrivateNotebookOptions->{"C'
         b'olorPalette"->{RGBColor, -1}},\nShowCellLabel->True,\nShowCellTags'
         b'->False,\nRenderingOptions->{"ObjectDithering"->True,\n"RasterDith'
         b'ering"->False}\n]\n\n\n(********************************************'
         b'***************************\nCached data follows.  If you edit th'
         b'is Notebook file directly, not using\nMathematica, you must remov'
         b'e the line containing CacheID at the top of \nthe file.  The cach'
         b'e data will then be recreated when you save this file \nfrom with'
         b'in Mathematica.\n************************************************'
         b'***********************)\n\n(*CellTagsOutline\nCellTagsIndex->{}\n*)'
         b'\n\n(*CellTagsIndex\nCellTagsIndex->{}\n*)\n\n(*NotebookFileOutlin'
         b'e\nNotebook[{\nCell[1717, 49, 565, 14, 212, "Text",\n  Evaluatable-'
         b'>True],\nCell[2285, 65, 1444, 29, 433, "Input"],\nCell[3732, 96, 1'
         b'28, 3, 43, "Input"],\nCell[3863, 101, 290, 6, 75, "Input"],\nCell['
         b'4156, 109, 1065, 18, 183, "Input"],\nCell[5224, 129, 88, 1, 27, "'
         b'Input"],\nCell[5315, 132, 182, 3, 43, "Input"],\nCell[5500, 137, 3'
         b'33, 7, 107, "Input"],\nCell[5836, 146, 131, 2, 43, "Input"],\nCell'
         b'[5970, 150, 372, 10, 101, "Input"],\nCell[6345, 162, 5107, 94, 83'
         b'7, "Input"],\nCell[11455, 258, 60, 1, 27, "Input"],\nCell[11518, 2'
         b'61, 644, 12, 155, "Input"],\nCell[12165, 275, 728, 12, 203, "Inpu'
         b't"],\nCell[12896, 289, 1967, 39, 379, "Input"],\nCell[14866, 330, '
         b'645, 12, 155, "Input"],\nCell[15514, 344, 330, 7, 75, "Input"],\nC'
         b'ell[15847, 353, 605, 12, 139, "Input"],\nCell[16455, 367, 575, 13'
         b', 171, "Input"],\nCell[17033, 382, 553, 10, 139, "Input"],\nCell[1'
         b'7589, 394, 386, 7, 91, "Input"],\nCell[17978, 403, 133, 2, 27, "I'
         b'nput"],\nCell[18114, 407, 223, 5, 59, "Input"]\n}\n]\n*)\n\n\n\n'
         b'\n(**************************************************************'
         b'*********\nEnd of Mathematica Notebook file.\n********************'
         b'***************************************************)\n\n',
 'links': [],
 'pid': 3724,
 'url': 'http://www0.cs.ucl.ac.uk/staff/S.Arridge/teaching/ndsp/canny3d.nb'}